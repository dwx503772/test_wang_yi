<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="4">
  <HTTPTask id="17" hostname="192.168.0.106" path="/testlink/gui/javascript/testlink_library.js" url="http://192.168.0.106/testlink/gui/javascript/testlink_library.js" ip="192.168.0.106" port="80" connectionId="3" origin="Primary" frame="1" startTime="7432776" endTime="7432792">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Accept" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdCwgKi8qO3E9MC44</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzE5Mi4xNjguMC4xMDYvdGVzdGxpbmsvbG9naW4ucGhw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>emgtQ04=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgVHJpZGVudC81LjAp</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTkyLjE2OC4wLjEwNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>UEhQU0VTU0lEPTY1NDAzaXUybGw5ZzdnY2ttdGJ2NWk1NTU3</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC90ZXN0bGluay9ndWkvamF2YXNjcmlwdC90ZXN0bGlua19saWJyYXJ5LmpzIEhUVFAvMS4xDQpBY2NlcHQ6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsICovKjtxPTAuOA0KUmVmZXJlcjogaHR0cDovLzE5Mi4xNjguMC4xMDYvdGVzdGxpbmsvbG9naW4ucGhwDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNODQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBUcmlkZW50LzUuMCkNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KSG9zdDogMTkyLjE2OC4wLjEwNg0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KQ29va2llOiBQSFBTRVNTSUQ9NjU0MDNpdTJsbDlnN2dja210YnY1aTU1NTcNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="PHPSESSID" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NjU0MDNpdTJsbDlnN2dja210YnY1aTU1NTc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Date" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VHVlLCAxNiBBdWcgMjAxNiAxNTo1ODo0OCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QXBhY2hlLzIuNC4xMCAoVWJ1bnR1KQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U2F0LCAwMSBTZXAgMjAxMiAxMzo1NTozMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>IjhhZTItNGM4YTQ0MmVmMTg4MC1nemlwIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>OTA5Mg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Keep-Alive" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGltZW91dD01LCBtYXg9MTAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUdWUsIDE2IEF1ZyAyMDE2IDE1OjU4OjQ4IEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjEwIChVYnVudHUpDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDAxIFNlcCAyMDEyIDEzOjU1OjMwIEdNVA0KRVRhZzogIjhhZTItNGM4YTQ0MmVmMTg4MC1nemlwIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1MZW5ndGg6IDkwOTINCktlZXAtQWxpdmU6IHRpbWVvdXQ9NSwgbWF4PTEwMA0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>