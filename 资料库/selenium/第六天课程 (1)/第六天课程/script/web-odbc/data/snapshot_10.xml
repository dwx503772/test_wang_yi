<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="10">
  <HTTPTask id="28" hostname="192.168.0.106" path="/testlink/third_party/prototype/prototype.js" url="http://192.168.0.106/testlink/third_party/prototype/prototype.js" ip="192.168.0.106" port="80" connectionId="8" origin="Primary" frame="1" startTime="50653540" endTime="50653587">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Accept" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdCwgKi8qO3E9MC44</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzE5Mi4xNjguMC4xMDYvdGVzdGxpbmsvbG9naW4ucGhw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>emgtQ04=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgVHJpZGVudC81LjAp</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTkyLjE2OC4wLjEwNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>UEhQU0VTU0lEPWNxbzFsa2FrcjJnM2I3ZGg2MGE0ZXFxcmQx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC90ZXN0bGluay90aGlyZF9wYXJ0eS9wcm90b3R5cGUvcHJvdG90eXBlLmpzIEhUVFAvMS4xDQpBY2NlcHQ6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsICovKjtxPTAuOA0KUmVmZXJlcjogaHR0cDovLzE5Mi4xNjguMC4xMDYvdGVzdGxpbmsvbG9naW4ucGhwDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNODQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBUcmlkZW50LzUuMCkNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KSG9zdDogMTkyLjE2OC4wLjEwNg0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KQ29va2llOiBQSFBTRVNTSUQ9Y3FvMWxrYWtyMmczYjdkaDYwYTRlcXFyZDENCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="PHPSESSID" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y3FvMWxrYWtyMmczYjdkaDYwYTRlcXFyZDE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Date" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U2F0LCAxMyBBdWcgMjAxNiAxNTo1ODo0OSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QXBhY2hlLzIuNC4xMCAoVWJ1bnR1KQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U2F0LCAwMSBTZXAgMjAxMiAxMzo1NTozMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>IjExNmU1LTRjOGE0NDJlZjE4ODAtZ3ppcCI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTYzOTA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Keep-Alive" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGltZW91dD01LCBtYXg9MTAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBTYXQsIDEzIEF1ZyAyMDE2IDE1OjU4OjQ5IEdNVA0KU2VydmVyOiBBcGFjaGUvMi40LjEwIChVYnVudHUpDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDAxIFNlcCAyMDEyIDEzOjU1OjMwIEdNVA0KRVRhZzogIjExNmU1LTRjOGE0NDJlZjE4ODAtZ3ppcCINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkNvbnRlbnQtTGVuZ3RoOiAxNjM5MA0KS2VlcC1BbGl2ZTogdGltZW91dD01LCBtYXg9MTAwDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>LyoKICogRXh0IEpTIExpYnJhcnkgMS4wIEJldGEgMQogKiBDb3B5cmlnaHQoYykgMjAwNi0yMDA3LCBFeHQgSlMsIExMQy4KICogbGljZW5zaW5nQGV4dGpzLmNvbQogKiAKICogaHR0cDovL3d3dy5leHRqcy5jb20vbGljZW5zZQogKi8KCi8qICBQcm90b3R5cGUgSmF2YVNjcmlwdCBmcmFtZXdvcmssIHZlcnNpb24gMS41LjAKICogIChjKSAyMDA1LTIwMDcgU2FtIFN0ZXBoZW5zb24KICoKICogIFByb3RvdHlwZSBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgYW4gTUlULXN0eWxlIGxpY2Vuc2UuCiAqICBGb3IgZGV0YWlscywgc2VlIHRoZSBQcm90b3R5cGUgd2ViIHNpdGU6IGh0dHA6Ly9wcm90b3R5cGUuY29uaW8ubmV0LwogKgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCnZhciBQcm90b3R5cGUgPSB7CiAgVmVyc2lvbjogJzEuNS4wJywKICBCcm93c2VyRmVhdHVyZXM6IHsKICAgIFhQYXRoOiAhIWRvY3VtZW50LmV2YWx1YXRlCiAgfSwKCiAgU2NyaXB0RnJhZ21lbnQ6ICcoPzo8c2NyaXB0Lio/PikoKFxufFxyfC4pKj8pKD86PFwvc2NyaXB0PiknLAogIGVtcHR5RnVuY3Rpb246IGZ1bmN0aW9uKCkge30sCiAgSzogZnVuY3Rpb24oeCkgeyByZXR1cm4geCB9Cn0KCnZhciBDbGFzcyA9IHsKICBjcmVhdGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KICB9Cn0KCnZhciBBYnN0cmFjdCA9IG5ldyBPYmplY3QoKTsKCk9iamVjdC5leHRlbmQgPSBmdW5jdGlvbihkZXN0aW5hdGlvbiwgc291cmNlKSB7CiAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7CiAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldOwogIH0KICByZXR1cm4gZGVzdGluYXRpb247Cn0KCk9iamVjdC5leHRlbmQoT2JqZWN0LCB7CiAgaW5zcGVjdDogZnVuY3Rpb24ob2JqZWN0KSB7CiAgICB0cnkgewogICAgICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHJldHVybiAndW5kZWZpbmVkJzsKICAgICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJzsKICAgICAgcmV0dXJuIG9iamVjdC5pbnNwZWN0ID8gb2JqZWN0Lmluc3BlY3QoKSA6IG9iamVjdC50b1N0cmluZygpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpIHJldHVybiAnLi4uJzsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBrZXlzOiBmdW5jdGlvbihvYmplY3QpIHsKICAgIHZhciBrZXlzID0gW107CiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmplY3QpCiAgICAgIGtleXMucHVzaChwcm9wZXJ0eSk7CiAgICByZXR1cm4ga2V5czsKICB9LAoKICB2YWx1ZXM6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIHZhbHVlcyA9IFtdOwogICAgZm9yICh2YXIgcHJvcGVydHkgaW4gb2JqZWN0KQogICAgICB2YWx1ZXMucHVzaChvYmplY3RbcHJvcGVydHldKTsKICAgIHJldHVybiB2YWx1ZXM7CiAgfSwKCiAgY2xvbmU6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgcmV0dXJuIE9iamVjdC5leHRlbmQoe30sIG9iamVjdCk7CiAgfQp9KTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oKSB7CiAgdmFyIF9fbWV0aG9kID0gdGhpcywgYXJncyA9ICRBKGFyZ3VtZW50cyksIG9iamVjdCA9IGFyZ3Muc2hpZnQoKTsKICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gX19tZXRob2QuYXBwbHkob2JqZWN0LCBhcmdzLmNvbmNhdCgkQShhcmd1bWVudHMpKSk7CiAgfQp9CgpGdW5jdGlvbi5wcm90b3R5cGUuYmluZEFzRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKG9iamVjdCkgewogIHZhciBfX21ldGhvZCA9IHRoaXMsIGFyZ3MgPSAkQShhcmd1bWVudHMpLCBvYmplY3QgPSBhcmdzLnNoaWZ0KCk7CiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICByZXR1cm4gX19tZXRob2QuYXBwbHkob2JqZWN0LCBbKCBldmVudCB8fCB3aW5kb3cuZXZlbnQpXS5jb25jYXQoYXJncykuY29uY2F0KCRBKGFyZ3VtZW50cykpKTsKICB9Cn0KCk9iamVjdC5leHRlbmQoTnVtYmVyLnByb3RvdHlwZSwgewogIHRvQ29sb3JQYXJ0OiBmdW5jdGlvbigpIHsKICAgIHZhciBkaWdpdHMgPSB0aGlzLnRvU3RyaW5nKDE2KTsKICAgIGlmICh0aGlzIDwgMTYpIHJldHVybiAnMCcgKyBkaWdpdHM7CiAgICByZXR1cm4gZGlnaXRzOwogIH0sCgogIHN1Y2M6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMgKyAxOwogIH0sCgogIHRpbWVzOiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgJFIoMCwgdGhpcywgdHJ1ZSkuZWFjaChpdGVyYXRvcik7CiAgICByZXR1cm4gdGhpczsKICB9Cn0pOwoKdmFyIFRyeSA9IHsKICB0aGVzZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgcmV0dXJuVmFsdWU7CgogICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICB2YXIgbGFtYmRhID0gYXJndW1lbnRzW2ldOwogICAgICB0cnkgewogICAgICAgIHJldHVyblZhbHVlID0gbGFtYmRhKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICB9CgogICAgcmV0dXJuIHJldHVyblZhbHVlOwogIH0KfQoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgp2YXIgUGVyaW9kaWNhbEV4ZWN1dGVyID0gQ2xhc3MuY3JlYXRlKCk7ClBlcmlvZGljYWxFeGVjdXRlci5wcm90b3R5cGUgPSB7CiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY2FsbGJhY2ssIGZyZXF1ZW5jeSkgewogICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrOwogICAgdGhpcy5mcmVxdWVuY3kgPSBmcmVxdWVuY3k7CiAgICB0aGlzLmN1cnJlbnRseUV4ZWN1dGluZyA9IGZhbHNlOwoKICAgIHRoaXMucmVnaXN0ZXJDYWxsYmFjaygpOwogIH0sCgogIHJlZ2lzdGVyQ2FsbGJhY2s6IGZ1bmN0aW9uKCkgewogICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMub25UaW1lckV2ZW50LmJpbmQodGhpcyksIHRoaXMuZnJlcXVlbmN5ICogMTAwMCk7CiAgfSwKCiAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMudGltZXIpIHJldHVybjsKICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICB0aGlzLnRpbWVyID0gbnVsbDsKICB9LAoKICBvblRpbWVyRXZlbnQ6IGZ1bmN0aW9uKCkgewogICAgaWYgKCF0aGlzLmN1cnJlbnRseUV4ZWN1dGluZykgewogICAgICB0cnkgewogICAgICAgIHRoaXMuY3VycmVudGx5RXhlY3V0aW5nID0gdHJ1ZTsKICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMuY3VycmVudGx5RXhlY3V0aW5nID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9Cn0KU3RyaW5nLmludGVycHJldCA9IGZ1bmN0aW9uKHZhbHVlKXsKICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHZhbHVlKTsKfQoKT2JqZWN0LmV4dGVuZChTdHJpbmcucHJvdG90eXBlLCB7CiAgZ3N1YjogZnVuY3Rpb24ocGF0dGVybiwgcmVwbGFjZW1lbnQpIHsKICAgIHZhciByZXN1bHQgPSAnJywgc291cmNlID0gdGhpcywgbWF0Y2g7CiAgICByZXBsYWNlbWVudCA9IGFyZ3VtZW50cy5jYWxsZWUucHJlcGFyZVJlcGxhY2VtZW50KHJlcGxhY2VtZW50KTsKCiAgICB3aGlsZSAoc291cmNlLmxlbmd0aCA+IDApIHsKICAgICAgaWYgKG1hdGNoID0gc291cmNlLm1hdGNoKHBhdHRlcm4pKSB7CiAgICAgICAgcmVzdWx0ICs9IHNvdXJjZS5zbGljZSgwLCBtYXRjaC5pbmRleCk7CiAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5pbnRlcnByZXQocmVwbGFjZW1lbnQobWF0Y2gpKTsKICAgICAgICBzb3VyY2UgID0gc291cmNlLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQgKz0gc291cmNlLCBzb3VyY2UgPSAnJzsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICBzdWI6IGZ1bmN0aW9uKHBhdHRlcm4sIHJlcGxhY2VtZW50LCBjb3VudCkgewogICAgcmVwbGFjZW1lbnQgPSB0aGlzLmdzdWIucHJlcGFyZVJlcGxhY2VtZW50KHJlcGxhY2VtZW50KTsKICAgIGNvdW50ID0gY291bnQgPT09IHVuZGVmaW5lZCA/IDEgOiBjb3VudDsKCiAgICByZXR1cm4gdGhpcy5nc3ViKHBhdHRlcm4sIGZ1bmN0aW9uKG1hdGNoKSB7CiAgICAgIGlmICgtLWNvdW50IDwgMCkgcmV0dXJuIG1hdGNoWzBdOwogICAgICByZXR1cm4gcmVwbGFjZW1lbnQobWF0Y2gpOwogICAgfSk7CiAgfSwKCiAgc2NhbjogZnVuY3Rpb24ocGF0dGVybiwgaXRlcmF0b3IpIHsKICAgIHRoaXMuZ3N1YihwYXR0ZXJuLCBpdGVyYXRvcik7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICB0cnVuY2F0ZTogZnVuY3Rpb24obGVuZ3RoLCB0cnVuY2F0aW9uKSB7CiAgICBsZW5ndGggPSBsZW5ndGggfHwgMzA7CiAgICB0cnVuY2F0aW9uID0gdHJ1bmNhdGlvbiA9PT0gdW5kZWZpbmVkID8gJy4uLicgOiB0cnVuY2F0aW9uOwogICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gbGVuZ3RoID8KICAgICAgdGhpcy5zbGljZSgwLCBsZW5ndGggLSB0cnVuY2F0aW9uLmxlbmd0aCkgKyB0cnVuY2F0aW9uIDogdGhpczsKICB9LAoKICBzdHJpcDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9eXHMrLywgJycpLnJlcGxhY2UoL1xzKyQvLCAnJyk7CiAgfSwKCiAgc3RyaXBUYWdzOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLzxcLz9bXj5dKz4vZ2ksICcnKTsKICB9LAoKICBzdHJpcFNjcmlwdHM6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKFByb3RvdHlwZS5TY3JpcHRGcmFnbWVudCwgJ2ltZycpLCAnJyk7CiAgfSwKCiAgZXh0cmFjdFNjcmlwdHM6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1hdGNoQWxsID0gbmV3IFJlZ0V4cChQcm90b3R5cGUuU2NyaXB0RnJhZ21lbnQsICdpbWcnKTsKICAgIHZhciBtYXRjaE9uZSA9IG5ldyBSZWdFeHAoUHJvdG90eXBlLlNjcmlwdEZyYWdtZW50LCAnaW0nKTsKICAgIHJldHVybiAodGhpcy5tYXRjaChtYXRjaEFsbCkgfHwgW10pLm1hcChmdW5jdGlvbihzY3JpcHRUYWcpIHsKICAgICAgcmV0dXJuIChzY3JpcHRUYWcubWF0Y2gobWF0Y2hPbmUpIHx8IFsnJywgJyddKVsxXTsKICAgIH0pOwogIH0sCgogIGV2YWxTY3JpcHRzOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmV4dHJhY3RTY3JpcHRzKCkubWFwKGZ1bmN0aW9uKHNjcmlwdCkgeyByZXR1cm4gZXZhbChzY3JpcHQpIH0pOwogIH0sCgogIGVzY2FwZUhUTUw6IGZ1bmN0aW9uKCkgewogICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzKTsKICAgIGRpdi5hcHBlbmRDaGlsZCh0ZXh0KTsKICAgIHJldHVybiBkaXYuaW5uZXJIVE1MOwogIH0sCgogIHVuZXNjYXBlSFRNTDogZnVuY3Rpb24oKSB7CiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBkaXYuaW5uZXJIVE1MID0gdGhpcy5zdHJpcFRhZ3MoKTsKICAgIHJldHVybiBkaXYuY2hpbGROb2Rlc1swXSA/IChkaXYuY2hpbGROb2Rlcy5sZW5ndGggPiAxID8KICAgICAgJEEoZGl2LmNoaWxkTm9kZXMpLmluamVjdCgnJyxmdW5jdGlvbihtZW1vLG5vZGUpeyByZXR1cm4gbWVtbytub2RlLm5vZGVWYWx1ZSB9KSA6CiAgICAgIGRpdi5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZSkgOiAnJzsKICB9LAoKICB0b1F1ZXJ5UGFyYW1zOiBmdW5jdGlvbihzZXBhcmF0b3IpIHsKICAgIHZhciBtYXRjaCA9IHRoaXMuc3RyaXAoKS5tYXRjaCgvKFtePyNdKikoIy4qKT8kLyk7CiAgICBpZiAoIW1hdGNoKSByZXR1cm4ge307CgogICAgcmV0dXJuIG1hdGNoWzFdLnNwbGl0KHNlcGFyYXRvciB8fCAnJicpLmluamVjdCh7fSwgZnVuY3Rpb24oaGFzaCwgcGFpcikgewogICAgICBpZiAoKHBhaXIgPSBwYWlyLnNwbGl0KCc9JykpWzBdKSB7CiAgICAgICAgdmFyIG5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQocGFpclswXSk7CiAgICAgICAgdmFyIHZhbHVlID0gcGFpclsxXSA/IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKSA6IHVuZGVmaW5lZDsKCiAgICAgICAgaWYgKGhhc2hbbmFtZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgaWYgKGhhc2hbbmFtZV0uY29uc3RydWN0b3IgIT0gQXJyYXkpCiAgICAgICAgICAgIGhhc2hbbmFtZV0gPSBbaGFzaFtuYW1lXV07CiAgICAgICAgICBpZiAodmFsdWUpIGhhc2hbbmFtZV0ucHVzaCh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaGFzaFtuYW1lXSA9IHZhbHVlOwogICAgICB9CiAgICAgIHJldHVybiBoYXNoOwogICAgfSk7CiAgfSwKCiAgdG9BcnJheTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5zcGxpdCgnJyk7CiAgfSwKCiAgc3VjYzogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5zbGljZSgwLCB0aGlzLmxlbmd0aCAtIDEpICsKICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmNoYXJDb2RlQXQodGhpcy5sZW5ndGggLSAxKSArIDEpOwogIH0sCgogIGNhbWVsaXplOiBmdW5jdGlvbigpIHsKICAgIHZhciBwYXJ0cyA9IHRoaXMuc3BsaXQoJy0nKSwgbGVuID0gcGFydHMubGVuZ3RoOwogICAgaWYgKGxlbiA9PSAxKSByZXR1cm4gcGFydHNbMF07CgogICAgdmFyIGNhbWVsaXplZCA9IHRoaXMuY2hhckF0KDApID09ICctJwogICAgICA/IHBhcnRzWzBdLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcGFydHNbMF0uc3Vic3RyaW5nKDEpCiAgICAgIDogcGFydHNbMF07CgogICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsZW47IGkrKykKICAgICAgY2FtZWxpemVkICs9IHBhcnRzW2ldLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcGFydHNbaV0uc3Vic3RyaW5nKDEpOwoKICAgIHJldHVybiBjYW1lbGl6ZWQ7CiAgfSwKCiAgY2FwaXRhbGl6ZTogZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKTsKICB9LAoKICB1bmRlcnNjb3JlOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmdzdWIoLzo6LywgJy8nKS5nc3ViKC8oW0EtWl0rKShbQS1aXVthLXpdKS8sJyN7MX1fI3syfScpLmdzdWIoLyhbYS16XGRdKShbQS1aXSkvLCcjezF9XyN7Mn0nKS5nc3ViKC8tLywnXycpLnRvTG93ZXJDYXNlKCk7CiAgfSwKCiAgZGFzaGVyaXplOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmdzdWIoL18vLCctJyk7CiAgfSwKCiAgaW5zcGVjdDogZnVuY3Rpb24odXNlRG91YmxlUXVvdGVzKSB7CiAgICB2YXIgZXNjYXBlZFN0cmluZyA9IHRoaXMucmVwbGFjZSgvXFwvZywgJ1xcXFwnKTsKICAgIGlmICh1c2VEb3VibGVRdW90ZXMpCiAgICAgIHJldHVybiAnIicgKyBlc2NhcGVkU3RyaW5nLnJlcGxhY2UoLyIvZywgJ1xcIicpICsgJyInOwogICAgZWxzZQogICAgICByZXR1cm4gIiciICsgZXNjYXBlZFN0cmluZy5yZXBsYWNlKC8nL2csICdcXFwnJykgKyAiJyI7CiAgfQp9KTsKClN0cmluZy5wcm90b3R5cGUuZ3N1Yi5wcmVwYXJlUmVwbGFjZW1lbnQgPSBmdW5jdGlvbihyZXBsYWNlbWVudCkgewogIGlmICh0eXBlb2YgcmVwbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHJlcGxhY2VtZW50OwogIHZhciB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXBsYWNlbWVudCk7CiAgcmV0dXJuIGZ1bmN0aW9uKG1hdGNoKSB7IHJldHVybiB0ZW1wbGF0ZS5ldmFsdWF0ZShtYXRjaCkgfTsKfQoKU3RyaW5nLnByb3RvdHlwZS5wYXJzZVF1ZXJ5ID0gU3RyaW5nLnByb3RvdHlwZS50b1F1ZXJ5UGFyYW1zOwoKdmFyIFRlbXBsYXRlID0gQ2xhc3MuY3JlYXRlKCk7ClRlbXBsYXRlLlBhdHRlcm4gPSAvKF58LnxccnxcbikoI1x7KC4qPylcfSkvOwpUZW1wbGF0ZS5wcm90b3R5cGUgPSB7CiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24odGVtcGxhdGUsIHBhdHRlcm4pIHsKICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZS50b1N0cmluZygpOwogICAgdGhpcy5wYXR0ZXJuICA9IHBhdHRlcm4gfHwgVGVtcGxhdGUuUGF0dGVybjsKICB9LAoKICBldmFsdWF0ZTogZnVuY3Rpb24ob2JqZWN0KSB7CiAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZS5nc3ViKHRoaXMucGF0dGVybiwgZnVuY3Rpb24obWF0Y2gpIHsKICAgICAgdmFyIGJlZm9yZSA9IG1hdGNoWzFdOwogICAgICBpZiAoYmVmb3JlID09ICdcXCcpIHJldHVybiBtYXRjaFsyXTsKICAgICAgcmV0dXJuIGJlZm9yZSArIFN0cmluZy5pbnRlcnByZXQob2JqZWN0W21hdGNoWzNdXSk7CiAgICB9KTsKICB9Cn0KCnZhciAkYnJlYWsgICAgPSBuZXcgT2JqZWN0KCk7CnZhciAkY29udGludWUgPSBuZXcgT2JqZWN0KCk7Cgp2YXIgRW51bWVyYWJsZSA9IHsKICBlYWNoOiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgdmFyIGluZGV4ID0gMDsKICAgIHRyeSB7CiAgICAgIHRoaXMuX2VhY2goZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgaXRlcmF0b3IodmFsdWUsIGluZGV4KyspOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGlmIChlICE9ICRjb250aW51ZSkgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICBpZiAoZSAhPSAkYnJlYWspIHRocm93IGU7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9LAoKICBlYWNoU2xpY2U6IGZ1bmN0aW9uKG51bWJlciwgaXRlcmF0b3IpIHsKICAgIHZhciBpbmRleCA9IC1udW1iZXIsIHNsaWNlcyA9IFtdLCBhcnJheSA9IHRoaXMudG9BcnJheSgpOwogICAgd2hpbGUgKChpbmRleCArPSBudW1iZXIpIDwgYXJyYXkubGVuZ3RoKQogICAgICBzbGljZXMucHVzaChhcnJheS5zbGljZShpbmRleCwgaW5kZXgrbnVtYmVyKSk7CiAgICByZXR1cm4gc2xpY2VzLm1hcChpdGVyYXRvcik7CiAgfSwKCiAgYWxsOiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgdmFyIHJlc3VsdCA9IHRydWU7CiAgICB0aGlzLmVhY2goZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiAhIShpdGVyYXRvciB8fCBQcm90b3R5cGUuSykodmFsdWUsIGluZGV4KTsKICAgICAgaWYgKCFyZXN1bHQpIHRocm93ICRicmVhazsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICBhbnk6IGZ1bmN0aW9uKGl0ZXJhdG9yKSB7CiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7CiAgICB0aGlzLmVhY2goZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgIGlmIChyZXN1bHQgPSAhIShpdGVyYXRvciB8fCBQcm90b3R5cGUuSykodmFsdWUsIGluZGV4KSkKICAgICAgICB0aHJvdyAkYnJlYWs7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKCiAgY29sbGVjdDogZnVuY3Rpb24oaXRlcmF0b3IpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICB0aGlzLmVhY2goZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgIHJlc3VsdHMucHVzaCgoaXRlcmF0b3IgfHwgUHJvdG90eXBlLkspKHZhbHVlLCBpbmRleCkpOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9LAoKICBkZXRlY3Q6IGZ1bmN0aW9uKGl0ZXJhdG9yKSB7CiAgICB2YXIgcmVzdWx0OwogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICBpZiAoaXRlcmF0b3IodmFsdWUsIGluZGV4KSkgewogICAgICAgIHJlc3VsdCA9IHZhbHVlOwogICAgICAgIHRocm93ICRicmVhazsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0sCgogIGZpbmRBbGw6IGZ1bmN0aW9uKGl0ZXJhdG9yKSB7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICBpZiAoaXRlcmF0b3IodmFsdWUsIGluZGV4KSkKICAgICAgICByZXN1bHRzLnB1c2godmFsdWUpOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9LAoKICBncmVwOiBmdW5jdGlvbihwYXR0ZXJuLCBpdGVyYXRvcikgewogICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgIHRoaXMuZWFjaChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgdmFyIHN0cmluZ1ZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTsKICAgICAgaWYgKHN0cmluZ1ZhbHVlLm1hdGNoKHBhdHRlcm4pKQogICAgICAgIHJlc3VsdHMucHVzaCgoaXRlcmF0b3IgfHwgUHJvdG90eXBlLkspKHZhbHVlLCBpbmRleCkpOwogICAgfSkKICAgIHJldHVybiByZXN1bHRzOwogIH0sCgogIGluY2x1ZGU6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIGZvdW5kID0gZmFsc2U7CiAgICB0aGlzLmVhY2goZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKHZhbHVlID09IG9iamVjdCkgewogICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICB0aHJvdyAkYnJlYWs7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGZvdW5kOwogIH0sCgogIGluR3JvdXBzT2Y6IGZ1bmN0aW9uKG51bWJlciwgZmlsbFdpdGgpIHsKICAgIGZpbGxXaXRoID0gZmlsbFdpdGggPT09IHVuZGVmaW5lZCA/IG51bGwgOiBmaWxsV2l0aDsKICAgIHJldHVybiB0aGlzLmVhY2hTbGljZShudW1iZXIsIGZ1bmN0aW9uKHNsaWNlKSB7CiAgICAgIHdoaWxlKHNsaWNlLmxlbmd0aCA8IG51bWJlcikgc2xpY2UucHVzaChmaWxsV2l0aCk7CiAgICAgIHJldHVybiBzbGljZTsKICAgIH0pOwogIH0sCgogIGluamVjdDogZnVuY3Rpb24obWVtbywgaXRlcmF0b3IpIHsKICAgIHRoaXMuZWFjaChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgbWVtbyA9IGl0ZXJhdG9yKG1lbW8sIHZhbHVlLCBpbmRleCk7CiAgICB9KTsKICAgIHJldHVybiBtZW1vOwogIH0sCgogIGludm9rZTogZnVuY3Rpb24obWV0aG9kKSB7CiAgICB2YXIgYXJncyA9ICRBKGFyZ3VtZW50cykuc2xpY2UoMSk7CiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlW21ldGhvZF0uYXBwbHkodmFsdWUsIGFyZ3MpOwogICAgfSk7CiAgfSwKCiAgbWF4OiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgdmFyIHJlc3VsdDsKICAgIHRoaXMuZWFjaChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgdmFsdWUgPSAoaXRlcmF0b3IgfHwgUHJvdG90eXBlLkspKHZhbHVlLCBpbmRleCk7CiAgICAgIGlmIChyZXN1bHQgPT0gdW5kZWZpbmVkIHx8IHZhbHVlID49IHJlc3VsdCkKICAgICAgICByZXN1bHQgPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICBtaW46IGZ1bmN0aW9uKGl0ZXJhdG9yKSB7CiAgICB2YXIgcmVzdWx0OwogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICB2YWx1ZSA9IChpdGVyYXRvciB8fCBQcm90b3R5cGUuSykodmFsdWUsIGluZGV4KTsKICAgICAgaWYgKHJlc3VsdCA9PSB1bmRlZmluZWQgfHwgdmFsdWUgPCByZXN1bHQpCiAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKCiAgcGFydGl0aW9uOiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgdmFyIHRydWVzID0gW10sIGZhbHNlcyA9IFtdOwogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICAoKGl0ZXJhdG9yIHx8IFByb3RvdHlwZS5LKSh2YWx1ZSwgaW5kZXgpID8KICAgICAgICB0cnVlcyA6IGZhbHNlcykucHVzaCh2YWx1ZSk7CiAgICB9KTsKICAgIHJldHVybiBbdHJ1ZXMsIGZhbHNlc107CiAgfSwKCiAgcGx1Y2s6IGZ1bmN0aW9uKHByb3BlcnR5KSB7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICByZXN1bHRzLnB1c2godmFsdWVbcHJvcGVydHldKTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfSwKCiAgcmVqZWN0OiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgIHRoaXMuZWFjaChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgaWYgKCFpdGVyYXRvcih2YWx1ZSwgaW5kZXgpKQogICAgICAgIHJlc3VsdHMucHVzaCh2YWx1ZSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH0sCgogIHNvcnRCeTogZnVuY3Rpb24oaXRlcmF0b3IpIHsKICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGNyaXRlcmlhOiBpdGVyYXRvcih2YWx1ZSwgaW5kZXgpfTsKICAgIH0pLnNvcnQoZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhLCBiID0gcmlnaHQuY3JpdGVyaWE7CiAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDsKICAgIH0pLnBsdWNrKCd2YWx1ZScpOwogIH0sCgogIHRvQXJyYXk6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMubWFwKCk7CiAgfSwKCiAgemlwOiBmdW5jdGlvbigpIHsKICAgIHZhciBpdGVyYXRvciA9IFByb3RvdHlwZS5LLCBhcmdzID0gJEEoYXJndW1lbnRzKTsKICAgIGlmICh0eXBlb2YgYXJncy5sYXN0KCkgPT0gJ2Z1bmN0aW9uJykKICAgICAgaXRlcmF0b3IgPSBhcmdzLnBvcCgpOwoKICAgIHZhciBjb2xsZWN0aW9ucyA9IFt0aGlzXS5jb25jYXQoYXJncykubWFwKCRBKTsKICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgcmV0dXJuIGl0ZXJhdG9yKGNvbGxlY3Rpb25zLnBsdWNrKGluZGV4KSk7CiAgICB9KTsKICB9LAoKICBzaXplOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5sZW5ndGg7CiAgfSwKCiAgaW5zcGVjdDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gJyM8RW51bWVyYWJsZTonICsgdGhpcy50b0FycmF5KCkuaW5zcGVjdCgpICsgJz4nOwogIH0KfQoKT2JqZWN0LmV4dGVuZChFbnVtZXJhYmxlLCB7CiAgbWFwOiAgICAgRW51bWVyYWJsZS5jb2xsZWN0LAogIGZpbmQ6ICAgIEVudW1lcmFibGUuZGV0ZWN0LAogIHNlbGVjdDogIEVudW1lcmFibGUuZmluZEFsbCwKICBtZW1iZXI6ICBFbnVtZXJhYmxlLmluY2x1ZGUsCiAgZW50cmllczogRW51bWVyYWJsZS50b0FycmF5Cn0pOwp2YXIgJEEgPSBBcnJheS5mcm9tID0gZnVuY3Rpb24oaXRlcmFibGUpIHsKICBpZiAoIWl0ZXJhYmxlKSByZXR1cm4gW107CiAgaWYgKGl0ZXJhYmxlLnRvQXJyYXkpIHsKICAgIHJldHVybiBpdGVyYWJsZS50b0FycmF5KCk7CiAgfSBlbHNlIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gaXRlcmFibGUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspCiAgICAgIHJlc3VsdHMucHVzaChpdGVyYWJsZVtpXSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9Cn0KCk9iamVjdC5leHRlbmQoQXJyYXkucHJvdG90eXBlLCBFbnVtZXJhYmxlKTsKCmlmICghQXJyYXkucHJvdG90eXBlLl9yZXZlcnNlKQogIEFycmF5LnByb3RvdHlwZS5fcmV2ZXJzZSA9IEFycmF5LnByb3RvdHlwZS5yZXZlcnNlOwoKT2JqZWN0LmV4dGVuZChBcnJheS5wcm90b3R5cGUsIHsKICBfZWFjaDogZnVuY3Rpb24oaXRlcmF0b3IpIHsKICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0aGlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKQogICAgICBpdGVyYXRvcih0aGlzW2ldKTsKICB9LAoKICBjbGVhcjogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICBmaXJzdDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpc1swXTsKICB9LAoKICBsYXN0OiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzW3RoaXMubGVuZ3RoIC0gMV07CiAgfSwKCiAgY29tcGFjdDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGw7CiAgICB9KTsKICB9LAoKICBmbGF0dGVuOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmluamVjdChbXSwgZnVuY3Rpb24oYXJyYXksIHZhbHVlKSB7CiAgICAgIHJldHVybiBhcnJheS5jb25jYXQodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgPT0gQXJyYXkgPwogICAgICAgIHZhbHVlLmZsYXR0ZW4oKSA6IFt2YWx1ZV0pOwogICAgfSk7CiAgfSwKCiAgd2l0aG91dDogZnVuY3Rpb24oKSB7CiAgICB2YXIgdmFsdWVzID0gJEEoYXJndW1lbnRzKTsKICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gIXZhbHVlcy5pbmNsdWRlKHZhbHVlKTsKICAgIH0pOwogIH0sCgogIGluZGV4T2Y6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRoaXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspCiAgICAgIGlmICh0aGlzW2ldID09IG9iamVjdCkgcmV0dXJuIGk7CiAgICByZXR1cm4gLTE7CiAgfSwKCiAgcmV2ZXJzZTogZnVuY3Rpb24oaW5saW5lKSB7CiAgICByZXR1cm4gKGlubGluZSAhPT0gZmFsc2UgPyB0aGlzIDogdGhpcy50b0FycmF5KCkpLl9yZXZlcnNlKCk7CiAgfSwKCiAgcmVkdWNlOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmxlbmd0aCA+IDEgPyB0aGlzIDogdGhpc1swXTsKICB9LAoKICB1bmlxOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmluamVjdChbXSwgZnVuY3Rpb24oYXJyYXksIHZhbHVlKSB7CiAgICAgIHJldHVybiBhcnJheS5pbmNsdWRlKHZhbHVlKSA/IGFycmF5IDogYXJyYXkuY29uY2F0KFt2YWx1ZV0pOwogICAgfSk7CiAgfSwKCiAgY2xvbmU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIFtdLmNvbmNhdCh0aGlzKTsKICB9LAoKICBzaXplOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmxlbmd0aDsKICB9LAoKICBpbnNwZWN0OiBmdW5jdGlvbigpIHsKICAgIHJldHVybiAnWycgKyB0aGlzLm1hcChPYmplY3QuaW5zcGVjdCkuam9pbignLCAnKSArICddJzsKICB9Cn0pOwoKQXJyYXkucHJvdG90eXBlLnRvQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuY2xvbmU7CgpmdW5jdGlvbiAkdyhzdHJpbmcpewogIHN0cmluZyA9IHN0cmluZy5zdHJpcCgpOwogIHJldHVybiBzdHJpbmcgPyBzdHJpbmcuc3BsaXQoL1xzKy8pIDogW107Cn0KCmlmKHdpbmRvdy5vcGVyYSl7CiAgQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgYXJyYXkgPSBbXTsKICAgIGZvcih2YXIgaSA9IDAsIGxlbmd0aCA9IHRoaXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIGFycmF5LnB1c2godGhpc1tpXSk7CiAgICBmb3IodmFyIGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgaWYoYXJndW1lbnRzW2ldLmNvbnN0cnVjdG9yID09IEFycmF5KSB7CiAgICAgICAgZm9yKHZhciBqID0gMCwgYXJyYXlMZW5ndGggPSBhcmd1bWVudHNbaV0ubGVuZ3RoOyBqIDwgYXJyYXlMZW5ndGg7IGorKykKICAgICAgICAgIGFycmF5LnB1c2goYXJndW1lbnRzW2ldW2pdKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcnJheS5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBhcnJheTsKICB9Cn0KdmFyIEhhc2ggPSBmdW5jdGlvbihvYmopIHsKICBPYmplY3QuZXh0ZW5kKHRoaXMsIG9iaiB8fCB7fSk7Cn07CgpPYmplY3QuZXh0ZW5kKEhhc2gsIHsKICB0b1F1ZXJ5U3RyaW5nOiBmdW5jdGlvbihvYmopIHsKICAgIHZhciBwYXJ0cyA9IFtdOwoKCSAgdGhpcy5wcm90b3R5cGUuX2VhY2guY2FsbChvYmosIGZ1bmN0aW9uKHBhaXIpIHsKICAgICAgaWYgKCFwYWlyLmtleSkgcmV0dXJuOwoKICAgICAgaWYgKHBhaXIudmFsdWUgJiYgcGFpci52YWx1ZS5jb25zdHJ1Y3RvciA9PSBBcnJheSkgewogICAgICAgIHZhciB2YWx1ZXMgPSBwYWlyLnZhbHVlLmNvbXBhY3QoKTsKICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA8IDIpIHBhaXIudmFsdWUgPSB2YWx1ZXMucmVkdWNlKCk7CiAgICAgICAgZWxzZSB7CiAgICAgICAgCWtleSA9IGVuY29kZVVSSUNvbXBvbmVudChwYWlyLmtleSk7CiAgICAgICAgICB2YWx1ZXMuZWFjaChmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IHVuZGVmaW5lZCA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgOiAnJzsKICAgICAgICAgICAgcGFydHMucHVzaChrZXkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAocGFpci52YWx1ZSA9PSB1bmRlZmluZWQpIHBhaXJbMV0gPSAnJzsKICAgICAgcGFydHMucHVzaChwYWlyLm1hcChlbmNvZGVVUklDb21wb25lbnQpLmpvaW4oJz0nKSk7CgkgIH0pOwoKICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7CiAgfQp9KTsKCk9iamVjdC5leHRlbmQoSGFzaC5wcm90b3R5cGUsIEVudW1lcmFibGUpOwpPYmplY3QuZXh0ZW5kKEhhc2gucHJvdG90eXBlLCB7CiAgX2VhY2g6IGZ1bmN0aW9uKGl0ZXJhdG9yKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzW2tleV07CiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSA9PSBIYXNoLnByb3RvdHlwZVtrZXldKSBjb250aW51ZTsKCiAgICAgIHZhciBwYWlyID0gW2tleSwgdmFsdWVdOwogICAgICBwYWlyLmtleSA9IGtleTsKICAgICAgcGFpci52YWx1ZSA9IHZhbHVlOwogICAgICBpdGVyYXRvcihwYWlyKTsKICAgIH0KICB9LAoKICBrZXlzOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnBsdWNrKCdrZXknKTsKICB9LAoKICB2YWx1ZXM6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMucGx1Y2soJ3ZhbHVlJyk7CiAgfSwKCiAgbWVyZ2U6IGZ1bmN0aW9uKGhhc2gpIHsKICAgIHJldHVybiAkSChoYXNoKS5pbmplY3QodGhpcywgZnVuY3Rpb24obWVyZ2VkSGFzaCwgcGFpcikgewogICAgICBtZXJnZWRIYXNoW3BhaXIua2V5XSA9IHBhaXIudmFsdWU7CiAgICAgIHJldHVybiBtZXJnZWRIYXNoOwogICAgfSk7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbigpIHsKICAgIHZhciByZXN1bHQ7CiAgICBmb3IodmFyIGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHZhbHVlID0gdGhpc1thcmd1bWVudHNbaV1dOwogICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCl7CiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSByZXN1bHQgPSB2YWx1ZTsKICAgICAgICBlbHNlIHsKICAgICAgICAgIGlmIChyZXN1bHQuY29uc3RydWN0b3IgIT0gQXJyYXkpIHJlc3VsdCA9IFtyZXN1bHRdOwogICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpCiAgICAgICAgfQogICAgICB9CiAgICAgIGRlbGV0ZSB0aGlzW2FyZ3VtZW50c1tpXV07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0sCgogIHRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIEhhc2gudG9RdWVyeVN0cmluZyh0aGlzKTsKICB9LAoKICBpbnNwZWN0OiBmdW5jdGlvbigpIHsKICAgIHJldHVybiAnIzxIYXNoOnsnICsgdGhpcy5tYXAoZnVuY3Rpb24ocGFpcikgewogICAgICByZXR1cm4gcGFpci5tYXAoT2JqZWN0Lmluc3BlY3QpLmpvaW4oJzogJyk7CiAgICB9KS5qb2luKCcsICcpICsgJ30+JzsKICB9Cn0pOwoKZnVuY3Rpb24gJEgob2JqZWN0KSB7CiAgaWYgKG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3IgPT0gSGFzaCkgcmV0dXJuIG9iamVjdDsKICByZXR1cm4gbmV3IEhhc2gob2JqZWN0KTsKfTsKT2JqZWN0UmFuZ2UgPSBDbGFzcy5jcmVhdGUoKTsKT2JqZWN0LmV4dGVuZChPYmplY3RSYW5nZS5wcm90b3R5cGUsIEVudW1lcmFibGUpOwpPYmplY3QuZXh0ZW5kKE9iamVjdFJhbmdlLnByb3RvdHlwZSwgewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIGV4Y2x1c2l2ZSkgewogICAgdGhpcy5zdGFydCA9IHN0YXJ0OwogICAgdGhpcy5lbmQgPSBlbmQ7CiAgICB0aGlzLmV4Y2x1c2l2ZSA9IGV4Y2x1c2l2ZTsKICB9LAoKICBfZWFjaDogZnVuY3Rpb24oaXRlcmF0b3IpIHsKICAgIHZhciB2YWx1ZSA9IHRoaXMuc3RhcnQ7CiAgICB3aGlsZSAodGhpcy5pbmNsdWRlKHZhbHVlKSkgewogICAgICBpdGVyYXRvcih2YWx1ZSk7CiAgICAgIHZhbHVlID0gdmFsdWUuc3VjYygpOwogICAgfQogIH0sCgogIGluY2x1ZGU6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPCB0aGlzLnN0YXJ0KQogICAgICByZXR1cm4gZmFsc2U7CiAgICBpZiAodGhpcy5leGNsdXNpdmUpCiAgICAgIHJldHVybiB2YWx1ZSA8IHRoaXMuZW5kOwogICAgcmV0dXJuIHZhbHVlIDw9IHRoaXMuZW5kOwogIH0KfSk7Cgp2YXIgJFIgPSBmdW5jdGlvbihzdGFydCwgZW5kLCBleGNsdXNpdmUpIHsKICByZXR1cm4gbmV3IE9iamVjdFJhbmdlKHN0YXJ0LCBlbmQsIGV4Y2x1c2l2ZSk7Cn0KCnZhciBBamF4ID0gewogIGdldFRyYW5zcG9ydDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gVHJ5LnRoZXNlKAogICAgICBmdW5jdGlvbigpIHtyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCl9LAogICAgICBmdW5jdGlvbigpIHtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyl9LAogICAgICBmdW5jdGlvbigpIHtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyl9CiAgICApIHx8IGZhbHNlOwogIH0sCgogIGFjdGl2ZVJlcXVlc3RDb3VudDogMAp9CgpBamF4LlJlc3BvbmRlcnMgPSB7CiAgcmVzcG9uZGVyczogW10sCgogIF9lYWNoOiBmdW5jdGlvbihpdGVyYXRvcikgewogICAgdGhpcy5yZXNwb25kZXJzLl9lYWNoKGl0ZXJhdG9yKTsKICB9LAoKICByZWdpc3RlcjogZnVuY3Rpb24ocmVzcG9uZGVyKSB7CiAgICBpZiAoIXRoaXMuaW5jbHVkZShyZXNwb25kZXIpKQogICAgICB0aGlzLnJlc3BvbmRlcnMucHVzaChyZXNwb25kZXIpOwogIH0sCgogIHVucmVnaXN0ZXI6IGZ1bmN0aW9uKHJlc3BvbmRlcikgewogICAgdGhpcy5yZXNwb25kZXJzID0gdGhpcy5yZXNwb25kZXJzLndpdGhvdXQocmVzcG9uZGVyKTsKICB9LAoKICBkaXNwYXRjaDogZnVuY3Rpb24oY2FsbGJhY2ssIHJlcXVlc3QsIHRyYW5zcG9ydCwganNvbikgewogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKHJlc3BvbmRlcikgewogICAgICBpZiAodHlwZW9mIHJlc3BvbmRlcltjYWxsYmFja10gPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHRyeSB7CiAgICAgICAgICByZXNwb25kZXJbY2FsbGJhY2tdLmFwcGx5KHJlc3BvbmRlciwgW3JlcXVlc3QsIHRyYW5zcG9ydCwganNvbl0pOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgIH0KICAgIH0pOwogIH0KfTsKCk9iamVjdC5leHRlbmQoQWpheC5SZXNwb25kZXJzLCBFbnVtZXJhYmxlKTsKCkFqYXguUmVzcG9uZGVycy5yZWdpc3Rlcih7CiAgb25DcmVhdGU6IGZ1bmN0aW9uKCkgewogICAgQWpheC5hY3RpdmVSZXF1ZXN0Q291bnQrKzsKICB9LAogIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCkgewogICAgQWpheC5hY3RpdmVSZXF1ZXN0Q291bnQtLTsKICB9Cn0pOwoKQWpheC5CYXNlID0gZnVuY3Rpb24oKSB7fTsKQWpheC5CYXNlLnByb3RvdHlwZSA9IHsKICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICB0aGlzLm9wdGlvbnMgPSB7CiAgICAgIG1ldGhvZDogICAgICAgJ3Bvc3QnLAogICAgICBhc3luY2hyb25vdXM6IHRydWUsCiAgICAgIGNvbnRlbnRUeXBlOiAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgIGVuY29kaW5nOiAgICAgJ1VURi04JywKICAgICAgcGFyYW1ldGVyczogICAnJwogICAgfQogICAgT2JqZWN0LmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMgfHwge30pOwoKICAgIHRoaXMub3B0aW9ucy5tZXRob2QgPSB0aGlzLm9wdGlvbnMubWV0aG9kLnRvTG93ZXJDYXNlKCk7CiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5wYXJhbWV0ZXJzID09ICdzdHJpbmcnKQogICAgICB0aGlzLm9wdGlvbnMucGFyYW1ldGVycyA9IHRoaXMub3B0aW9ucy5wYXJhbWV0ZXJzLnRvUXVlcnlQYXJhbXMoKTsKICB9Cn0KCkFqYXguUmVxdWVzdCA9IENsYXNzLmNyZWF0ZSgpOwpBamF4LlJlcXVlc3QuRXZlbnRzID0KICBbJ1VuaW5pdGlhbGl6ZWQnLCAnTG9hZGluZycsICdMb2FkZWQnLCAnSW50ZXJhY3RpdmUnLCAnQ29tcGxldGUnXTsKCkFqYXguUmVxdWVzdC5wcm90b3R5cGUgPSBPYmplY3QuZXh0ZW5kKG5ldyBBamF4LkJhc2UoKSwgewogIF9jb21wbGV0ZTogZmFsc2UsCgogIGluaXRpYWxpemU6IGZ1bmN0aW9uKHVybCwgb3B0aW9ucykgewogICAgdGhpcy50cmFuc3BvcnQgPSBBamF4LmdldFRyYW5zcG9ydCgpOwogICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgdGhpcy5yZXF1ZXN0KHVybCk7CiAgfSwKCiAgcmVxdWVzdDogZnVuY3Rpb24odXJsKSB7CiAgICB0aGlzLnVybCA9IHVybDsKICAgIHRoaXMubWV0aG9kID0gdGhpcy5vcHRpb25zLm1ldGhvZDsKICAgIHZhciBwYXJhbXMgPSB0aGlzLm9wdGlvbnMucGFyYW1ldGVyczsKCiAgICBpZiAoIVsnZ2V0JywgJ3Bvc3QnXS5pbmNsdWRlKHRoaXMubWV0aG9kKSkgewogICAgICAvLyBzaW11bGF0ZSBvdGhlciB2ZXJicyBvdmVyIHBvc3QKICAgICAgcGFyYW1zWydfbWV0aG9kJ10gPSB0aGlzLm1ldGhvZDsKICAgICAgdGhpcy5tZXRob2QgPSAncG9zdCc7CiAgICB9CgogICAgcGFyYW1zID0gSGFzaC50b1F1ZXJ5U3RyaW5nKHBhcmFtcyk7CiAgICBpZiAocGFyYW1zICYmIC9Lb25xdWVyb3J8U2FmYXJpfEtIVE1MLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSBwYXJhbXMgKz0gJyZfPScKCiAgICAvLyB3aGVuIEdFVCwgYXBwZW5kIHBhcmFtZXRlcnMgdG8gVVJMCiAgICBpZiAodGhpcy5tZXRob2QgPT0gJ2dldCcgJiYgcGFyYW1zKQogICAgICB0aGlzLnVybCArPSAodGhpcy51cmwuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycpICsgcGFyYW1zOwoKICAgIHRyeSB7CiAgICAgIEFqYXguUmVzcG9uZGVycy5kaXNwYXRjaCgnb25DcmVhdGUnLCB0aGlzLCB0aGlzLnRyYW5zcG9ydCk7CgogICAgICB0aGlzLnRyYW5zcG9ydC5vcGVuKHRoaXMubWV0aG9kLnRvVXBwZXJDYXNlKCksIHRoaXMudXJsLAogICAgICAgIHRoaXMub3B0aW9ucy5hc3luY2hyb25vdXMpOwoKICAgICAgaWYgKHRoaXMub3B0aW9ucy5hc3luY2hyb25vdXMpCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgdGhpcy5yZXNwb25kVG9SZWFkeVN0YXRlKDEpIH0uYmluZCh0aGlzKSwgMTApOwoKICAgICAgdGhpcy50cmFuc3BvcnQub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcyk7CiAgICAgIHRoaXMuc2V0UmVxdWVzdEhlYWRlcnMoKTsKCiAgICAgIHZhciBib2R5ID0gdGhpcy5tZXRob2QgPT0gJ3Bvc3QnID8gKHRoaXMub3B0aW9ucy5wb3N0Qm9keSB8fCBwYXJhbXMpIDogbnVsbDsKCiAgICAgIHRoaXMudHJhbnNwb3J0LnNlbmQoYm9keSk7CgogICAgICAvKiBGb3JjZSBGaXJlZm94IHRvIGhhbmRsZSByZWFkeSBzdGF0ZSA0IGZvciBzeW5jaHJvbm91cyByZXF1ZXN0cyAqLwogICAgICBpZiAoIXRoaXMub3B0aW9ucy5hc3luY2hyb25vdXMgJiYgdGhpcy50cmFuc3BvcnQub3ZlcnJpZGVNaW1lVHlwZSkKICAgICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTsKCiAgICB9CiAgICBjYXRjaCAoZSkgewogICAgICB0aGlzLmRpc3BhdGNoRXhjZXB0aW9uKGUpOwogICAgfQogIH0sCgogIG9uU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uKCkgewogICAgdmFyIHJlYWR5U3RhdGUgPSB0aGlzLnRyYW5zcG9ydC5yZWFkeVN0YXRlOwogICAgaWYgKHJlYWR5U3RhdGUgPiAxICYmICEoKHJlYWR5U3RhdGUgPT0gNCkgJiYgdGhpcy5fY29tcGxldGUpKQogICAgICB0aGlzLnJlc3BvbmRUb1JlYWR5U3RhdGUodGhpcy50cmFuc3BvcnQucmVhZHlTdGF0ZSk7CiAgfSwKCiAgc2V0UmVxdWVzdEhlYWRlcnM6IGZ1bmN0aW9uKCkgewogICAgdmFyIGhlYWRlcnMgPSB7CiAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JywKICAgICAgJ1gtUHJvdG90eXBlLVZlcnNpb24nOiBQcm90b3R5cGUuVmVyc2lvbiwKICAgICAgJ0FjY2VwdCc6ICd0ZXh0L2phdmFzY3JpcHQsIHRleHQvaHRtbCwgYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCwgKi8qJwogICAgfTsKCiAgICBpZiAodGhpcy5tZXRob2QgPT0gJ3Bvc3QnKSB7CiAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtdHlwZSddID0gdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlICsKICAgICAgICAodGhpcy5vcHRpb25zLmVuY29kaW5nID8gJzsgY2hhcnNldD0nICsgdGhpcy5vcHRpb25zLmVuY29kaW5nIDogJycpOwoKICAgICAgLyogRm9yY2UgIkNvbm5lY3Rpb246IGNsb3NlIiBmb3Igb2xkZXIgTW96aWxsYSBicm93c2VycyB0byB3b3JrCiAgICAgICAqIGFyb3VuZCBhIGJ1ZyB3aGVyZSBYTUxIdHRwUmVxdWVzdCBzZW5kcyBhbiBpbmNvcnJlY3QKICAgICAgICogQ29udGVudC1sZW5ndGggaGVhZGVyLiBTZWUgTW96aWxsYSBCdWd6aWxsYSAjMjQ2NjUxLgogICAgICAgKi8KICAgICAgaWYgKHRoaXMudHJhbnNwb3J0Lm92ZXJyaWRlTWltZVR5cGUgJiYKICAgICAgICAgIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9HZWNrb1wvKFxkezR9KS8pIHx8IFswLDIwMDVdKVsxXSA8IDIwMDUpCiAgICAgICAgICAgIGhlYWRlcnNbJ0Nvbm5lY3Rpb24nXSA9ICdjbG9zZSc7CiAgICB9CgogICAgLy8gdXNlci1kZWZpbmVkIGhlYWRlcnMKICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnJlcXVlc3RIZWFkZXJzID09ICdvYmplY3QnKSB7CiAgICAgIHZhciBleHRyYXMgPSB0aGlzLm9wdGlvbnMucmVxdWVzdEhlYWRlcnM7CgogICAgICBpZiAodHlwZW9mIGV4dHJhcy5wdXNoID09ICdmdW5jdGlvbicpCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGV4dHJhcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMikKICAgICAgICAgIGhlYWRlcnNbZXh0cmFzW2ldXSA9IGV4dHJhc1tpKzFdOwogICAgICBlbHNlCiAgICAgICAgJEgoZXh0cmFzKS5lYWNoKGZ1bmN0aW9uKHBhaXIpIHsgaGVhZGVyc1twYWlyLmtleV0gPSBwYWlyLnZhbHVlIH0pOwogICAgfQoKICAgIGZvciAodmFyIG5hbWUgaW4gaGVhZGVycykKICAgICAgdGhpcy50cmFuc3BvcnQuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBoZWFkZXJzW25hbWVdKTsKICB9LAoKICBzdWNjZXNzOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiAhdGhpcy50cmFuc3BvcnQuc3RhdHVzCiAgICAgICAgfHwgKHRoaXMudHJhbnNwb3J0LnN0YXR1cyA+PSAyMDAgJiYgdGhpcy50cmFuc3BvcnQuc3RhdHVzIDwgMzAwKTsKICB9LAoKICByZXNwb25kVG9SZWFkeVN0YXRlOiBmdW5jdGlvbihyZWFkeVN0YXRlKSB7CiAgICB2YXIgc3RhdGUgPSBBamF4LlJlcXVlc3QuRXZlbnRzW3JlYWR5U3RhdGVdOwogICAgdmFyIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0LCBqc29uID0gdGhpcy5ldmFsSlNPTigpOwoKICAgIGlmIChzdGF0ZSA9PSAnQ29tcGxldGUnKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhpcy5fY29tcGxldGUgPSB0cnVlOwogICAgICAgICh0aGlzLm9wdGlvbnNbJ29uJyArIHRoaXMudHJhbnNwb3J0LnN0YXR1c10KICAgICAgICAgfHwgdGhpcy5vcHRpb25zWydvbicgKyAodGhpcy5zdWNjZXNzKCkgPyAnU3VjY2VzcycgOiAnRmFpbHVyZScpXQogICAgICAgICB8fCBQcm90b3R5cGUuZW1wdHlGdW5jdGlvbikodHJhbnNwb3J0LCBqc29uKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHRoaXMuZGlzcGF0Y2hFeGNlcHRpb24oZSk7CiAgICAgIH0KCiAgICAgIGlmICgodGhpcy5nZXRIZWFkZXIoJ0NvbnRlbnQtdHlwZScpIHx8ICd0ZXh0L2phdmFzY3JpcHQnKS5zdHJpcCgpLgogICAgICAgIG1hdGNoKC9eKHRleHR8YXBwbGljYXRpb24pXC8oeC0pPyhqYXZhfGVjbWEpc2NyaXB0KDsuKik/JC9pKSkKICAgICAgICAgIHRoaXMuZXZhbFJlc3BvbnNlKCk7CiAgICB9CgogICAgdHJ5IHsKICAgICAgKHRoaXMub3B0aW9uc1snb24nICsgc3RhdGVdIHx8IFByb3RvdHlwZS5lbXB0eUZ1bmN0aW9uKSh0cmFuc3BvcnQsIGpzb24pOwogICAgICBBamF4LlJlc3BvbmRlcnMuZGlzcGF0Y2goJ29uJyArIHN0YXRlLCB0aGlzLCB0cmFuc3BvcnQsIGpzb24pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aGlzLmRpc3BhdGNoRXhjZXB0aW9uKGUpOwogICAgfQoKICAgIGlmIChzdGF0ZSA9PSAnQ29tcGxldGUnKSB7CiAgICAgIC8vIGF2b2lkIG1lbW9yeSBsZWFrIGluIE1TSUU6IGNsZWFuIHVwCiAgICAgIHRoaXMudHJhbnNwb3J0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IFByb3RvdHlwZS5lbXB0eUZ1bmN0aW9uOwogICAgfQogIH0sCgogIGdldEhlYWRlcjogZnVuY3Rpb24obmFtZSkgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmdldFJlc3BvbnNlSGVhZGVyKG5hbWUpOwogICAgfSBjYXRjaCAoZSkgeyByZXR1cm4gbnVsbCB9CiAgfSwKCiAgZXZhbEpTT046IGZ1bmN0aW9uKCkgewogICAgdHJ5IHsKICAgICAgdmFyIGpzb24gPSB0aGlzLmdldEhlYWRlcignWC1KU09OJyk7CiAgICAgIHJldHVybiBqc29uID8gZXZhbCgnKCcgKyBqc29uICsgJyknKSA6IG51bGw7CiAgICB9IGNhdGNoIChlKSB7IHJldHVybiBudWxsIH0KICB9LAoKICBldmFsUmVzcG9uc2U6IGZ1bmN0aW9uKCkgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIGV2YWwodGhpcy50cmFuc3BvcnQucmVzcG9uc2VUZXh0KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhpcy5kaXNwYXRjaEV4Y2VwdGlvbihlKTsKICAgIH0KICB9LAoKICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7CiAgICAodGhpcy5vcHRpb25zLm9uRXhjZXB0aW9uIHx8IFByb3RvdHlwZS5lbXB0eUZ1bmN0aW9uKSh0aGlzLCBleGNlcHRpb24pOwogICAgQWpheC5SZXNwb25kZXJzLmRpc3BhdGNoKCdvbkV4Y2VwdGlvbicsIHRoaXMsIGV4Y2VwdGlvbik7CiAgfQp9KTsKCkFqYXguVXBkYXRlciA9IENsYXNzLmNyZWF0ZSgpOwoKT2JqZWN0LmV4dGVuZChPYmplY3QuZXh0ZW5kKEFqYXguVXBkYXRlci5wcm90b3R5cGUsIEFqYXguUmVxdWVzdC5wcm90b3R5cGUpLCB7CiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY29udGFpbmVyLCB1cmwsIG9wdGlvbnMpIHsKICAgIHRoaXMuY29udGFpbmVyID0gewogICAgICBzdWNjZXNzOiAoY29udGFpbmVyLnN1Y2Nlc3MgfHwgY29udGFpbmVyKSwKICAgICAgZmFpbHVyZTogKGNvbnRhaW5lci5mYWlsdXJlIHx8IChjb250YWluZXIuc3VjY2VzcyA/IG51bGwgOiBjb250YWluZXIpKQogICAgfQoKICAgIHRoaXMudHJhbnNwb3J0ID0gQWpheC5nZXRUcmFuc3BvcnQoKTsKICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTsKCiAgICB2YXIgb25Db21wbGV0ZSA9IHRoaXMub3B0aW9ucy5vbkNvbXBsZXRlIHx8IFByb3RvdHlwZS5lbXB0eUZ1bmN0aW9uOwogICAgdGhpcy5vcHRpb25zLm9uQ29tcGxldGUgPSAoZnVuY3Rpb24odHJhbnNwb3J0LCBwYXJhbSkgewogICAgICB0aGlzLnVwZGF0ZUNvbnRlbnQoKTsKICAgICAgb25Db21wbGV0ZSh0cmFuc3BvcnQsIHBhcmFtKTsKICAgIH0pLmJpbmQodGhpcyk7CgogICAgdGhpcy5yZXF1ZXN0KHVybCk7CiAgfSwKCiAgdXBkYXRlQ29udGVudDogZnVuY3Rpb24oKSB7CiAgICB2YXIgcmVjZWl2ZXIgPSB0aGlzLmNvbnRhaW5lclt0aGlzLnN1Y2Nlc3MoKSA/ICdzdWNjZXNzJyA6ICdmYWlsdXJlJ107CiAgICB2YXIgcmVzcG9uc2UgPSB0aGlzLnRyYW5zcG9ydC5yZXNwb25zZVRleHQ7CgogICAgaWYgKCF0aGlzLm9wdGlvbnMuZXZhbFNjcmlwdHMpIHJlc3BvbnNlID0gcmVzcG9uc2Uuc3RyaXBTY3JpcHRzKCk7CgogICAgaWYgKHJlY2VpdmVyID0gJChyZWNlaXZlcikpIHsKICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbnNlcnRpb24pCiAgICAgICAgbmV3IHRoaXMub3B0aW9ucy5pbnNlcnRpb24ocmVjZWl2ZXIsIHJlc3BvbnNlKTsKICAgICAgZWxzZQogICAgICAgIHJlY2VpdmVyLnVwZGF0ZShyZXNwb25zZSk7CiAgICB9CgogICAgaWYgKHRoaXMuc3VjY2VzcygpKSB7CiAgICAgIGlmICh0aGlzLm9uQ29tcGxldGUpCiAgICAgICAgc2V0VGltZW91dCh0aGlzLm9uQ29tcGxldGUuYmluZCh0aGlzKSwgMTApOwogICAgfQogIH0KfSk7CgpBamF4LlBlcmlvZGljYWxVcGRhdGVyID0gQ2xhc3MuY3JlYXRlKCk7CkFqYXguUGVyaW9kaWNhbFVwZGF0ZXIucHJvdG90eXBlID0gT2JqZWN0LmV4dGVuZChuZXcgQWpheC5CYXNlKCksIHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihjb250YWluZXIsIHVybCwgb3B0aW9ucykgewogICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgdGhpcy5vbkNvbXBsZXRlID0gdGhpcy5vcHRpb25zLm9uQ29tcGxldGU7CgogICAgdGhpcy5mcmVxdWVuY3kgPSAodGhpcy5vcHRpb25zLmZyZXF1ZW5jeSB8fCAyKTsKICAgIHRoaXMuZGVjYXkgPSAodGhpcy5vcHRpb25zLmRlY2F5IHx8IDEpOwoKICAgIHRoaXMudXBkYXRlciA9IHt9OwogICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7CiAgICB0aGlzLnVybCA9IHVybDsKCiAgICB0aGlzLnN0YXJ0KCk7CiAgfSwKCiAgc3RhcnQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5vcHRpb25zLm9uQ29tcGxldGUgPSB0aGlzLnVwZGF0ZUNvbXBsZXRlLmJpbmQodGhpcyk7CiAgICB0aGlzLm9uVGltZXJFdmVudCgpOwogIH0sCgogIHN0b3A6IGZ1bmN0aW9uKCkgewogICAgdGhpcy51cGRhdGVyLm9wdGlvbnMub25Db21wbGV0ZSA9IHVuZGVmaW5lZDsKICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKICAgICh0aGlzLm9uQ29tcGxldGUgfHwgUHJvdG90eXBlLmVtcHR5RnVuY3Rpb24pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfSwKCiAgdXBkYXRlQ29tcGxldGU6IGZ1bmN0aW9uKHJlcXVlc3QpIHsKICAgIGlmICh0aGlzLm9wdGlvbnMuZGVjYXkpIHsKICAgICAgdGhpcy5kZWNheSA9IChyZXF1ZXN0LnJlc3BvbnNlVGV4dCA9PSB0aGlzLmxhc3RUZXh0ID8KICAgICAgICB0aGlzLmRlY2F5ICogdGhpcy5vcHRpb25zLmRlY2F5IDogMSk7CgogICAgICB0aGlzLmxhc3RUZXh0ID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7CiAgICB9CiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCh0aGlzLm9uVGltZXJFdmVudC5iaW5kKHRoaXMpLAogICAgICB0aGlzLmRlY2F5ICogdGhpcy5mcmVxdWVuY3kgKiAxMDAwKTsKICB9LAoKICBvblRpbWVyRXZlbnQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy51cGRhdGVyID0gbmV3IEFqYXguVXBkYXRlcih0aGlzLmNvbnRhaW5lciwgdGhpcy51cmwsIHRoaXMub3B0aW9ucyk7CiAgfQp9KTsKZnVuY3Rpb24gJChlbGVtZW50KSB7CiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICBmb3IgKHZhciBpID0gMCwgZWxlbWVudHMgPSBbXSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKQogICAgICBlbGVtZW50cy5wdXNoKCQoYXJndW1lbnRzW2ldKSk7CiAgICByZXR1cm4gZWxlbWVudHM7CiAgfQogIGlmICh0eXBlb2YgZWxlbWVudCA9PSAnc3RyaW5nJykKICAgIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTsKICByZXR1cm4gRWxlbWVudC5leHRlbmQoZWxlbWVudCk7Cn0KCmlmIChQcm90b3R5cGUuQnJvd3NlckZlYXR1cmVzLlhQYXRoKSB7CiAgZG9jdW1lbnQuX2dldEVsZW1lbnRzQnlYUGF0aCA9IGZ1bmN0aW9uKGV4cHJlc3Npb24sIHBhcmVudEVsZW1lbnQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICB2YXIgcXVlcnkgPSBkb2N1bWVudC5ldmFsdWF0ZShleHByZXNzaW9uLCAkKHBhcmVudEVsZW1lbnQpIHx8IGRvY3VtZW50LAogICAgICBudWxsLCBYUGF0aFJlc3VsdC5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSwgbnVsbCk7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcXVlcnkuc25hcHNob3RMZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykKICAgICAgcmVzdWx0cy5wdXNoKHF1ZXJ5LnNuYXBzaG90SXRlbShpKSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9Owp9Cgpkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBwYXJlbnRFbGVtZW50KSB7CiAgaWYgKFByb3RvdHlwZS5Ccm93c2VyRmVhdHVyZXMuWFBhdGgpIHsKICAgIHZhciBxID0gIi4vLypbY29udGFpbnMoY29uY2F0KCcgJywgQGNsYXNzLCAnICcpLCAnICIgKyBjbGFzc05hbWUgKyAiICcpXSI7CiAgICByZXR1cm4gZG9jdW1lbnQuX2dldEVsZW1lbnRzQnlYUGF0aChxLCBwYXJlbnRFbGVtZW50KTsKICB9IGVsc2UgewogICAgdmFyIGNoaWxkcmVuID0gKCQocGFyZW50RWxlbWVudCkgfHwgZG9jdW1lbnQuYm9keSkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKICAgIHZhciBlbGVtZW50cyA9IFtdLCBjaGlsZDsKICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldOwogICAgICBpZiAoRWxlbWVudC5oYXNDbGFzc05hbWUoY2hpbGQsIGNsYXNzTmFtZSkpCiAgICAgICAgZWxlbWVudHMucHVzaChFbGVtZW50LmV4dGVuZChjaGlsZCkpOwogICAgfQogICAgcmV0dXJuIGVsZW1lbnRzOwogIH0KfTsKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKaWYgKCF3aW5kb3cuRWxlbWVudCkKICB2YXIgRWxlbWVudCA9IG5ldyBPYmplY3QoKTsKCkVsZW1lbnQuZXh0ZW5kID0gZnVuY3Rpb24oZWxlbWVudCkgewogIGlmICghZWxlbWVudCB8fCBfbmF0aXZlRXh0ZW5zaW9ucyB8fCBlbGVtZW50Lm5vZGVUeXBlID09IDMpIHJldHVybiBlbGVtZW50OwoKICBpZiAoIWVsZW1lbnQuX2V4dGVuZGVkICYmIGVsZW1lbnQudGFnTmFtZSAmJiBlbGVtZW50ICE9IHdpbmRvdykgewogICAgdmFyIG1ldGhvZHMgPSBPYmplY3QuY2xvbmUoRWxlbWVudC5NZXRob2RzKSwgY2FjaGUgPSBFbGVtZW50LmV4dGVuZC5jYWNoZTsKCiAgICBpZiAoZWxlbWVudC50YWdOYW1lID09ICdGT1JNJykKICAgICAgT2JqZWN0LmV4dGVuZChtZXRob2RzLCBGb3JtLk1ldGhvZHMpOwogICAgaWYgKFsnSU5QVVQnLCAnVEVYVEFSRUEnLCAnU0VMRUNUJ10uaW5jbHVkZShlbGVtZW50LnRhZ05hbWUpKQogICAgICBPYmplY3QuZXh0ZW5kKG1ldGhvZHMsIEZvcm0uRWxlbWVudC5NZXRob2RzKTsKCiAgICBPYmplY3QuZXh0ZW5kKG1ldGhvZHMsIEVsZW1lbnQuTWV0aG9kcy5TaW11bGF0ZWQpOwoKICAgIGZvciAodmFyIHByb3BlcnR5IGluIG1ldGhvZHMpIHsKICAgICAgdmFyIHZhbHVlID0gbWV0aG9kc1twcm9wZXJ0eV07CiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyAmJiAhKHByb3BlcnR5IGluIGVsZW1lbnQpKQogICAgICAgIGVsZW1lbnRbcHJvcGVydHldID0gY2FjaGUuZmluZE9yU3RvcmUodmFsdWUpOwogICAgfQogIH0KCiAgZWxlbWVudC5fZXh0ZW5kZWQgPSB0cnVlOwogIHJldHVybiBlbGVtZW50Owp9OwoKRWxlbWVudC5leHRlbmQuY2FjaGUgPSB7CiAgZmluZE9yU3RvcmU6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdGhpc1t2YWx1ZV0gPSB0aGlzW3ZhbHVlXSB8fCBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KG51bGwsIFt0aGlzXS5jb25jYXQoJEEoYXJndW1lbnRzKSkpOwogICAgfQogIH0KfTsKCkVsZW1lbnQuTWV0aG9kcyA9IHsKICB2aXNpYmxlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gJChlbGVtZW50KS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJzsKICB9LAoKICB0b2dnbGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgRWxlbWVudFtFbGVtZW50LnZpc2libGUoZWxlbWVudCkgPyAnaGlkZScgOiAnc2hvdyddKGVsZW1lbnQpOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgaGlkZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgJChlbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgc2hvdzogZnVuY3Rpb24oZWxlbWVudCkgewogICAgJChlbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICByZXR1cm4gZWxlbWVudDsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCBodG1sKSB7CiAgICBodG1sID0gdHlwZW9mIGh0bWwgPT0gJ3VuZGVmaW5lZCcgPyAnJyA6IGh0bWwudG9TdHJpbmcoKTsKICAgICQoZWxlbWVudCkuaW5uZXJIVE1MID0gaHRtbC5zdHJpcFNjcmlwdHMoKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7aHRtbC5ldmFsU2NyaXB0cygpfSwgMTApOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgcmVwbGFjZTogZnVuY3Rpb24oZWxlbWVudCwgaHRtbCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICBodG1sID0gdHlwZW9mIGh0bWwgPT0gJ3VuZGVmaW5lZCcgPyAnJyA6IGh0bWwudG9TdHJpbmcoKTsKICAgIGlmIChlbGVtZW50Lm91dGVySFRNTCkgewogICAgICBlbGVtZW50Lm91dGVySFRNTCA9IGh0bWwuc3RyaXBTY3JpcHRzKCk7CiAgICB9IGVsc2UgewogICAgICB2YXIgcmFuZ2UgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsKICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpOwogICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKAogICAgICAgIHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChodG1sLnN0cmlwU2NyaXB0cygpKSwgZWxlbWVudCk7CiAgICB9CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge2h0bWwuZXZhbFNjcmlwdHMoKX0sIDEwKTsKICAgIHJldHVybiBlbGVtZW50OwogIH0sCgogIGluc3BlY3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgdmFyIHJlc3VsdCA9ICc8JyArIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgJEgoeydpZCc6ICdpZCcsICdjbGFzc05hbWUnOiAnY2xhc3MnfSkuZWFjaChmdW5jdGlvbihwYWlyKSB7CiAgICAgIHZhciBwcm9wZXJ0eSA9IHBhaXIuZmlyc3QoKSwgYXR0cmlidXRlID0gcGFpci5sYXN0KCk7CiAgICAgIHZhciB2YWx1ZSA9IChlbGVtZW50W3Byb3BlcnR5XSB8fCAnJykudG9TdHJpbmcoKTsKICAgICAgaWYgKHZhbHVlKSByZXN1bHQgKz0gJyAnICsgYXR0cmlidXRlICsgJz0nICsgdmFsdWUuaW5zcGVjdCh0cnVlKTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdCArICc+JzsKICB9LAoKICByZWN1cnNpdmVseUNvbGxlY3Q6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5KSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIHZhciBlbGVtZW50cyA9IFtdOwogICAgd2hpbGUgKGVsZW1lbnQgPSBlbGVtZW50W3Byb3BlcnR5XSkKICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT0gMSkKICAgICAgICBlbGVtZW50cy5wdXNoKEVsZW1lbnQuZXh0ZW5kKGVsZW1lbnQpKTsKICAgIHJldHVybiBlbGVtZW50czsKICB9LAoKICBhbmNlc3RvcnM6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiAkKGVsZW1lbnQpLnJlY3Vyc2l2ZWx5Q29sbGVjdCgncGFyZW50Tm9kZScpOwogIH0sCgogIGRlc2NlbmRhbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gJEEoJChlbGVtZW50KS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKTsKICB9LAoKICBpbW1lZGlhdGVEZXNjZW5kYW50czogZnVuY3Rpb24oZWxlbWVudCkgewogICAgaWYgKCEoZWxlbWVudCA9ICQoZWxlbWVudCkuZmlyc3RDaGlsZCkpIHJldHVybiBbXTsKICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT0gMSkgZWxlbWVudCA9IGVsZW1lbnQubmV4dFNpYmxpbmc7CiAgICBpZiAoZWxlbWVudCkgcmV0dXJuIFtlbGVtZW50XS5jb25jYXQoJChlbGVtZW50KS5uZXh0U2libGluZ3MoKSk7CiAgICByZXR1cm4gW107CiAgfSwKCiAgcHJldmlvdXNTaWJsaW5nczogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuICQoZWxlbWVudCkucmVjdXJzaXZlbHlDb2xsZWN0KCdwcmV2aW91c1NpYmxpbmcnKTsKICB9LAoKICBuZXh0U2libGluZ3M6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiAkKGVsZW1lbnQpLnJlY3Vyc2l2ZWx5Q29sbGVjdCgnbmV4dFNpYmxpbmcnKTsKICB9LAoKICBzaWJsaW5nczogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICByZXR1cm4gZWxlbWVudC5wcmV2aW91c1NpYmxpbmdzKCkucmV2ZXJzZSgpLmNvbmNhdChlbGVtZW50Lm5leHRTaWJsaW5ncygpKTsKICB9LAoKICBtYXRjaDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHsKICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycpCiAgICAgIHNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKHNlbGVjdG9yKTsKICAgIHJldHVybiBzZWxlY3Rvci5tYXRjaCgkKGVsZW1lbnQpKTsKICB9LAoKICB1cDogZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgaW5kZXgpIHsKICAgIHJldHVybiBTZWxlY3Rvci5maW5kRWxlbWVudCgkKGVsZW1lbnQpLmFuY2VzdG9ycygpLCBleHByZXNzaW9uLCBpbmRleCk7CiAgfSwKCiAgZG93bjogZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgaW5kZXgpIHsKICAgIHJldHVybiBTZWxlY3Rvci5maW5kRWxlbWVudCgkKGVsZW1lbnQpLmRlc2NlbmRhbnRzKCksIGV4cHJlc3Npb24sIGluZGV4KTsKICB9LAoKICBwcmV2aW91czogZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgaW5kZXgpIHsKICAgIHJldHVybiBTZWxlY3Rvci5maW5kRWxlbWVudCgkKGVsZW1lbnQpLnByZXZpb3VzU2libGluZ3MoKSwgZXhwcmVzc2lvbiwgaW5kZXgpOwogIH0sCgogIG5leHQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIGluZGV4KSB7CiAgICByZXR1cm4gU2VsZWN0b3IuZmluZEVsZW1lbnQoJChlbGVtZW50KS5uZXh0U2libGluZ3MoKSwgZXhwcmVzc2lvbiwgaW5kZXgpOwogIH0sCgogIGdldEVsZW1lbnRzQnlTZWxlY3RvcjogZnVuY3Rpb24oKSB7CiAgICB2YXIgYXJncyA9ICRBKGFyZ3VtZW50cyksIGVsZW1lbnQgPSAkKGFyZ3Muc2hpZnQoKSk7CiAgICByZXR1cm4gU2VsZWN0b3IuZmluZENoaWxkRWxlbWVudHMoZWxlbWVudCwgYXJncyk7CiAgfSwKCiAgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZTogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lKSB7CiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUsIGVsZW1lbnQpOwogIH0sCgogIHJlYWRBdHRyaWJ1dGU6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgaWYgKGRvY3VtZW50LmFsbCAmJiAhd2luZG93Lm9wZXJhKSB7CiAgICAgIHZhciB0ID0gRWxlbWVudC5fYXR0cmlidXRlVHJhbnNsYXRpb25zOwogICAgICBpZiAodC52YWx1ZXNbbmFtZV0pIHJldHVybiB0LnZhbHVlc1tuYW1lXShlbGVtZW50LCBuYW1lKTsKICAgICAgaWYgKHQubmFtZXNbbmFtZV0pICBuYW1lID0gdC5uYW1lc1tuYW1lXTsKICAgICAgdmFyIGF0dHJpYnV0ZSA9IGVsZW1lbnQuYXR0cmlidXRlc1tuYW1lXTsKICAgICAgaWYoYXR0cmlidXRlKSByZXR1cm4gYXR0cmlidXRlLm5vZGVWYWx1ZTsKICAgIH0KICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTsKICB9LAoKICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiAkKGVsZW1lbnQpLmdldERpbWVuc2lvbnMoKS5oZWlnaHQ7CiAgfSwKCiAgZ2V0V2lkdGg6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiAkKGVsZW1lbnQpLmdldERpbWVuc2lvbnMoKS53aWR0aDsKICB9LAoKICBjbGFzc05hbWVzOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gbmV3IEVsZW1lbnQuQ2xhc3NOYW1lcyhlbGVtZW50KTsKICB9LAoKICBoYXNDbGFzc05hbWU6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSkgewogICAgaWYgKCEoZWxlbWVudCA9ICQoZWxlbWVudCkpKSByZXR1cm47CiAgICB2YXIgZWxlbWVudENsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lOwogICAgaWYgKGVsZW1lbnRDbGFzc05hbWUubGVuZ3RoID09IDApIHJldHVybiBmYWxzZTsKICAgIGlmIChlbGVtZW50Q2xhc3NOYW1lID09IGNsYXNzTmFtZSB8fAogICAgICAgIGVsZW1lbnRDbGFzc05hbWUubWF0Y2gobmV3IFJlZ0V4cCgiKF58XFxzKSIgKyBjbGFzc05hbWUgKyAiKFxcc3wkKSIpKSkKICAgICAgcmV0dXJuIHRydWU7CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKCiAgYWRkQ2xhc3NOYW1lOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgIGlmICghKGVsZW1lbnQgPSAkKGVsZW1lbnQpKSkgcmV0dXJuOwogICAgRWxlbWVudC5jbGFzc05hbWVzKGVsZW1lbnQpLmFkZChjbGFzc05hbWUpOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgcmVtb3ZlQ2xhc3NOYW1lOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgIGlmICghKGVsZW1lbnQgPSAkKGVsZW1lbnQpKSkgcmV0dXJuOwogICAgRWxlbWVudC5jbGFzc05hbWVzKGVsZW1lbnQpLnJlbW92ZShjbGFzc05hbWUpOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgdG9nZ2xlQ2xhc3NOYW1lOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgIGlmICghKGVsZW1lbnQgPSAkKGVsZW1lbnQpKSkgcmV0dXJuOwogICAgRWxlbWVudC5jbGFzc05hbWVzKGVsZW1lbnQpW2VsZW1lbnQuaGFzQ2xhc3NOYW1lKGNsYXNzTmFtZSkgPyAncmVtb3ZlJyA6ICdhZGQnXShjbGFzc05hbWUpOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7CiAgICBFdmVudC5vYnNlcnZlLmFwcGx5KEV2ZW50LCBhcmd1bWVudHMpOwogICAgcmV0dXJuICRBKGFyZ3VtZW50cykuZmlyc3QoKTsKICB9LAoKICBzdG9wT2JzZXJ2aW5nOiBmdW5jdGlvbigpIHsKICAgIEV2ZW50LnN0b3BPYnNlcnZpbmcuYXBwbHkoRXZlbnQsIGFyZ3VtZW50cyk7CiAgICByZXR1cm4gJEEoYXJndW1lbnRzKS5maXJzdCgpOwogIH0sCgogIC8vIHJlbW92ZXMgd2hpdGVzcGFjZS1vbmx5IHRleHQgbm9kZSBjaGlsZHJlbgogIGNsZWFuV2hpdGVzcGFjZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICB2YXIgbm9kZSA9IGVsZW1lbnQuZmlyc3RDaGlsZDsKICAgIHdoaWxlIChub2RlKSB7CiAgICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMgJiYgIS9cUy8udGVzdChub2RlLm5vZGVWYWx1ZSkpCiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChub2RlKTsKICAgICAgbm9kZSA9IG5leHROb2RlOwogICAgfQogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgZW1wdHk6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiAkKGVsZW1lbnQpLmlubmVySFRNTC5tYXRjaCgvXlxzKiQvKTsKICB9LAoKICBkZXNjZW5kYW50T2Y6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuY2VzdG9yKSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KSwgYW5jZXN0b3IgPSAkKGFuY2VzdG9yKTsKICAgIHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKQogICAgICBpZiAoZWxlbWVudCA9PSBhbmNlc3RvcikgcmV0dXJuIHRydWU7CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKCiAgc2Nyb2xsVG86IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgdmFyIHBvcyA9IFBvc2l0aW9uLmN1bXVsYXRpdmVPZmZzZXQoZWxlbWVudCk7CiAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zWzBdLCBwb3NbMV0pOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgZ2V0U3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlKSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIGlmIChbJ2Zsb2F0JywnY3NzRmxvYXQnXS5pbmNsdWRlKHN0eWxlKSkKICAgICAgc3R5bGUgPSAodHlwZW9mIGVsZW1lbnQuc3R5bGUuc3R5bGVGbG9hdCAhPSAndW5kZWZpbmVkJyA/ICdzdHlsZUZsb2F0JyA6ICdjc3NGbG9hdCcpOwogICAgc3R5bGUgPSBzdHlsZS5jYW1lbGl6ZSgpOwogICAgdmFyIHZhbHVlID0gZWxlbWVudC5zdHlsZVtzdHlsZV07CiAgICBpZiAoIXZhbHVlKSB7CiAgICAgIGlmIChkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7CiAgICAgICAgdmFyIGNzcyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7CiAgICAgICAgdmFsdWUgPSBjc3MgPyBjc3Nbc3R5bGVdIDogbnVsbDsKICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmN1cnJlbnRTdHlsZSkgewogICAgICAgIHZhbHVlID0gZWxlbWVudC5jdXJyZW50U3R5bGVbc3R5bGVdOwogICAgICB9CiAgICB9CgogICAgaWYoKHZhbHVlID09ICdhdXRvJykgJiYgWyd3aWR0aCcsJ2hlaWdodCddLmluY2x1ZGUoc3R5bGUpICYmIChlbGVtZW50LmdldFN0eWxlKCdkaXNwbGF5JykgIT0gJ25vbmUnKSkKICAgICAgdmFsdWUgPSBlbGVtZW50WydvZmZzZXQnK3N0eWxlLmNhcGl0YWxpemUoKV0gKyAncHgnOwoKICAgIGlmICh3aW5kb3cub3BlcmEgJiYgWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXS5pbmNsdWRlKHN0eWxlKSkKICAgICAgaWYgKEVsZW1lbnQuZ2V0U3R5bGUoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT0gJ3N0YXRpYycpIHZhbHVlID0gJ2F1dG8nOwogICAgaWYoc3R5bGUgPT0gJ29wYWNpdHknKSB7CiAgICAgIGlmKHZhbHVlKSByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7CiAgICAgIGlmKHZhbHVlID0gKGVsZW1lbnQuZ2V0U3R5bGUoJ2ZpbHRlcicpIHx8ICcnKS5tYXRjaCgvYWxwaGFcKG9wYWNpdHk9KC4qKVwpLykpCiAgICAgICAgaWYodmFsdWVbMV0pIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlWzFdKSAvIDEwMDsKICAgICAgcmV0dXJuIDEuMDsKICAgIH0KICAgIHJldHVybiB2YWx1ZSA9PSAnYXV0bycgPyBudWxsIDogdmFsdWU7CiAgfSwKCiAgc2V0U3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlKSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHsKICAgICAgdmFyIHZhbHVlID0gc3R5bGVbbmFtZV07CiAgICAgIGlmKG5hbWUgPT0gJ29wYWNpdHknKSB7CiAgICAgICAgaWYgKHZhbHVlID09IDEpIHsKICAgICAgICAgIHZhbHVlID0gKC9HZWNrby8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJgogICAgICAgICAgICAhL0tvbnF1ZXJvcnxTYWZhcml8S0hUTUwvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpID8gMC45OTk5OTkgOiAxLjA7CiAgICAgICAgICBpZigvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lm9wZXJhKQogICAgICAgICAgICBlbGVtZW50LnN0eWxlLmZpbHRlciA9IGVsZW1lbnQuZ2V0U3R5bGUoJ2ZpbHRlcicpLnJlcGxhY2UoL2FscGhhXChbXlwpXSpcKS9naSwnJyk7CiAgICAgICAgfSBlbHNlIGlmKHZhbHVlID09PSAnJykgewogICAgICAgICAgaWYoL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIXdpbmRvdy5vcGVyYSkKICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5maWx0ZXIgPSBlbGVtZW50LmdldFN0eWxlKCdmaWx0ZXInKS5yZXBsYWNlKC9hbHBoYVwoW15cKV0qXCkvZ2ksJycpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZih2YWx1ZSA8IDAuMDAwMDEpIHZhbHVlID0gMDsKICAgICAgICAgIGlmKC9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cub3BlcmEpCiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZmlsdGVyID0gZWxlbWVudC5nZXRTdHlsZSgnZmlsdGVyJykucmVwbGFjZSgvYWxwaGFcKFteXCldKlwpL2dpLCcnKSArCiAgICAgICAgICAgICAgJ2FscGhhKG9wYWNpdHk9Jyt2YWx1ZSoxMDArJyknOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmKFsnZmxvYXQnLCdjc3NGbG9hdCddLmluY2x1ZGUobmFtZSkpIG5hbWUgPSAodHlwZW9mIGVsZW1lbnQuc3R5bGUuc3R5bGVGbG9hdCAhPSAndW5kZWZpbmVkJykgPyAnc3R5bGVGbG9hdCcgOiAnY3NzRmxvYXQnOwogICAgICBlbGVtZW50LnN0eWxlW25hbWUuY2FtZWxpemUoKV0gPSB2YWx1ZTsKICAgIH0KICAgIHJldHVybiBlbGVtZW50OwogIH0sCgogIGdldERpbWVuc2lvbnM6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgdmFyIGRpc3BsYXkgPSAkKGVsZW1lbnQpLmdldFN0eWxlKCdkaXNwbGF5Jyk7CiAgICBpZiAoZGlzcGxheSAhPSAnbm9uZScgJiYgZGlzcGxheSAhPSBudWxsKSAvLyBTYWZhcmkgYnVnCiAgICAgIHJldHVybiB7d2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHR9OwoKICAgIC8vIEFsbCAqV2lkdGggYW5kICpIZWlnaHQgcHJvcGVydGllcyBnaXZlIDAgb24gZWxlbWVudHMgd2l0aCBkaXNwbGF5IG5vbmUsCiAgICAvLyBzbyBlbmFibGUgdGhlIGVsZW1lbnQgdGVtcG9yYXJpbHkKICAgIHZhciBlbHMgPSBlbGVtZW50LnN0eWxlOwogICAgdmFyIG9yaWdpbmFsVmlzaWJpbGl0eSA9IGVscy52aXNpYmlsaXR5OwogICAgdmFyIG9yaWdpbmFsUG9zaXRpb24gPSBlbHMucG9zaXRpb247CiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWxzLmRpc3BsYXk7CiAgICBlbHMudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgZWxzLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsKICAgIGVscy5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgIHZhciBvcmlnaW5hbFdpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDsKICAgIHZhciBvcmlnaW5hbEhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0OwogICAgZWxzLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7CiAgICBlbHMucG9zaXRpb24gPSBvcmlnaW5hbFBvc2l0aW9uOwogICAgZWxzLnZpc2liaWxpdHkgPSBvcmlnaW5hbFZpc2liaWxpdHk7CiAgICByZXR1cm4ge3dpZHRoOiBvcmlnaW5hbFdpZHRoLCBoZWlnaHQ6IG9yaWdpbmFsSGVpZ2h0fTsKICB9LAoKICBtYWtlUG9zaXRpb25lZDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICB2YXIgcG9zID0gRWxlbWVudC5nZXRTdHlsZShlbGVtZW50LCAncG9zaXRpb24nKTsKICAgIGlmIChwb3MgPT0gJ3N0YXRpYycgfHwgIXBvcykgewogICAgICBlbGVtZW50Ll9tYWRlUG9zaXRpb25lZCA9IHRydWU7CiAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnOwogICAgICAvLyBPcGVyYSByZXR1cm5zIHRoZSBvZmZzZXQgcmVsYXRpdmUgdG8gdGhlIHBvc2l0aW9uaW5nIGNvbnRleHQsIHdoZW4gYW4KICAgICAgLy8gZWxlbWVudCBpcyBwb3NpdGlvbiByZWxhdGl2ZSBidXQgdG9wIGFuZCBsZWZ0IGhhdmUgbm90IGJlZW4gZGVmaW5lZAogICAgICBpZiAod2luZG93Lm9wZXJhKSB7CiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSAwOwogICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IDA7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBlbGVtZW50OwogIH0sCgogIHVuZG9Qb3NpdGlvbmVkOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIGlmIChlbGVtZW50Ll9tYWRlUG9zaXRpb25lZCkgewogICAgICBlbGVtZW50Ll9tYWRlUG9zaXRpb25lZCA9IHVuZGVmaW5lZDsKICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9CiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPQogICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9CiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3R0b20gPQogICAgICAgIGVsZW1lbnQuc3R5bGUucmlnaHQgPSAnJzsKICAgIH0KICAgIHJldHVybiBlbGVtZW50OwogIH0sCgogIG1ha2VDbGlwcGluZzogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICBpZiAoZWxlbWVudC5fb3ZlcmZsb3cpIHJldHVybiBlbGVtZW50OwogICAgZWxlbWVudC5fb3ZlcmZsb3cgPSBlbGVtZW50LnN0eWxlLm92ZXJmbG93IHx8ICdhdXRvJzsKICAgIGlmICgoRWxlbWVudC5nZXRTdHlsZShlbGVtZW50LCAnb3ZlcmZsb3cnKSB8fCAndmlzaWJsZScpICE9ICdoaWRkZW4nKQogICAgICBlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7CiAgICByZXR1cm4gZWxlbWVudDsKICB9LAoKICB1bmRvQ2xpcHBpbmc6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgaWYgKCFlbGVtZW50Ll9vdmVyZmxvdykgcmV0dXJuIGVsZW1lbnQ7CiAgICBlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gZWxlbWVudC5fb3ZlcmZsb3cgPT0gJ2F1dG8nID8gJycgOiBlbGVtZW50Ll9vdmVyZmxvdzsKICAgIGVsZW1lbnQuX292ZXJmbG93ID0gbnVsbDsKICAgIHJldHVybiBlbGVtZW50OwogIH0KfTsKCk9iamVjdC5leHRlbmQoRWxlbWVudC5NZXRob2RzLCB7Y2hpbGRPZjogRWxlbWVudC5NZXRob2RzLmRlc2NlbmRhbnRPZn0pOwoKRWxlbWVudC5fYXR0cmlidXRlVHJhbnNsYXRpb25zID0ge307CgpFbGVtZW50Ll9hdHRyaWJ1dGVUcmFuc2xhdGlvbnMubmFtZXMgPSB7CiAgY29sc3BhbjogICAiY29sU3BhbiIsCiAgcm93c3BhbjogICAicm93U3BhbiIsCiAgdmFsaWduOiAgICAidkFsaWduIiwKICBkYXRldGltZTogICJkYXRlVGltZSIsCiAgYWNjZXNza2V5OiAiYWNjZXNzS2V5IiwKICB0YWJpbmRleDogICJ0YWJJbmRleCIsCiAgZW5jdHlwZTogICAiZW5jVHlwZSIsCiAgbWF4bGVuZ3RoOiAibWF4TGVuZ3RoIiwKICByZWFkb25seTogICJyZWFkT25seSIsCiAgbG9uZ2Rlc2M6ICAibG9uZ0Rlc2MiCn07CgpFbGVtZW50Ll9hdHRyaWJ1dGVUcmFuc2xhdGlvbnMudmFsdWVzID0gewogIF9nZXRBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyaWJ1dGUpIHsKICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIDIpOwogIH0sCgogIF9mbGFnOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyaWJ1dGUpIHsKICAgIHJldHVybiAkKGVsZW1lbnQpLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpID8gYXR0cmlidXRlIDogbnVsbDsKICB9LAoKICBzdHlsZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQuc3R5bGUuY3NzVGV4dC50b0xvd2VyQ2FzZSgpOwogIH0sCgogIHRpdGxlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgbm9kZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTm9kZSgndGl0bGUnKTsKICAgIHJldHVybiBub2RlLnNwZWNpZmllZCA/IG5vZGUubm9kZVZhbHVlIDogbnVsbDsKICB9Cn07CgpPYmplY3QuZXh0ZW5kKEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9ucy52YWx1ZXMsIHsKICBocmVmOiBFbGVtZW50Ll9hdHRyaWJ1dGVUcmFuc2xhdGlvbnMudmFsdWVzLl9nZXRBdHRyLAogIHNyYzogIEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9ucy52YWx1ZXMuX2dldEF0dHIsCiAgZGlzYWJsZWQ6IEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9ucy52YWx1ZXMuX2ZsYWcsCiAgY2hlY2tlZDogIEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9ucy52YWx1ZXMuX2ZsYWcsCiAgcmVhZG9ubHk6IEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9ucy52YWx1ZXMuX2ZsYWcsCiAgbXVsdGlwbGU6IEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9ucy52YWx1ZXMuX2ZsYWcKfSk7CgpFbGVtZW50Lk1ldGhvZHMuU2ltdWxhdGVkID0gewogIGhhc0F0dHJpYnV0ZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlKSB7CiAgICB2YXIgdCA9IEVsZW1lbnQuX2F0dHJpYnV0ZVRyYW5zbGF0aW9uczsKICAgIGF0dHJpYnV0ZSA9IHQubmFtZXNbYXR0cmlidXRlXSB8fCBhdHRyaWJ1dGU7CiAgICByZXR1cm4gJChlbGVtZW50KS5nZXRBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZSkuc3BlY2lmaWVkOwogIH0KfTsKCi8vIElFIGlzIG1pc3NpbmcgLmlubmVySFRNTCBzdXBwb3J0IGZvciBUQUJMRS1yZWxhdGVkIGVsZW1lbnRzCmlmIChkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5vcGVyYSl7CiAgRWxlbWVudC5NZXRob2RzLnVwZGF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGh0bWwpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgaHRtbCA9IHR5cGVvZiBodG1sID09ICd1bmRlZmluZWQnID8gJycgOiBodG1sLnRvU3RyaW5nKCk7CiAgICB2YXIgdGFnTmFtZSA9IGVsZW1lbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpOwogICAgaWYgKFsnVEhFQUQnLCdUQk9EWScsJ1RSJywnVEQnXS5pbmNsdWRlKHRhZ05hbWUpKSB7CiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgc3dpdGNoICh0YWdOYW1lKSB7CiAgICAgICAgY2FzZSAnVEhFQUQnOgogICAgICAgIGNhc2UgJ1RCT0RZJzoKICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPHRhYmxlPjx0Ym9keT4nICsgIGh0bWwuc3RyaXBTY3JpcHRzKCkgKyAnPC90Ym9keT48L3RhYmxlPic7CiAgICAgICAgICBkZXB0aCA9IDI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdUUic6CiAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzx0YWJsZT48dGJvZHk+PHRyPicgKyAgaHRtbC5zdHJpcFNjcmlwdHMoKSArICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nOwogICAgICAgICAgZGVwdGggPSAzOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnVEQnOgogICAgICAgICAgZGl2LmlubmVySFRNTCA9ICc8dGFibGU+PHRib2R5Pjx0cj48dGQ+JyArICBodG1sLnN0cmlwU2NyaXB0cygpICsgJzwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+JzsKICAgICAgICAgIGRlcHRoID0gNDsKICAgICAgfQogICAgICAkQShlbGVtZW50LmNoaWxkTm9kZXMpLmVhY2goZnVuY3Rpb24obm9kZSl7CiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChub2RlKQogICAgICB9KTsKICAgICAgZGVwdGgudGltZXMoZnVuY3Rpb24oKXsgZGl2ID0gZGl2LmZpcnN0Q2hpbGQgfSk7CgogICAgICAkQShkaXYuY2hpbGROb2RlcykuZWFjaCgKICAgICAgICBmdW5jdGlvbihub2RlKXsgZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKSB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbC5zdHJpcFNjcmlwdHMoKTsKICAgIH0KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7aHRtbC5ldmFsU2NyaXB0cygpfSwgMTApOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfQp9OwoKT2JqZWN0LmV4dGVuZChFbGVtZW50LCBFbGVtZW50Lk1ldGhvZHMpOwoKdmFyIF9uYXRpdmVFeHRlbnNpb25zID0gZmFsc2U7CgppZigvS29ucXVlcm9yfFNhZmFyaXxLSFRNTC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkKICBbJycsICdGb3JtJywgJ0lucHV0JywgJ1RleHRBcmVhJywgJ1NlbGVjdCddLmVhY2goZnVuY3Rpb24odGFnKSB7CiAgICB2YXIgY2xhc3NOYW1lID0gJ0hUTUwnICsgdGFnICsgJ0VsZW1lbnQnOwogICAgaWYod2luZG93W2NsYXNzTmFtZV0pIHJldHVybjsKICAgIHZhciBrbGFzcyA9IHdpbmRvd1tjbGFzc05hbWVdID0ge307CiAgICBrbGFzcy5wcm90b3R5cGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyA/IHRhZy50b0xvd2VyQ2FzZSgpIDogJ2RpdicpLl9fcHJvdG9fXzsKICB9KTsKCkVsZW1lbnQuYWRkTWV0aG9kcyA9IGZ1bmN0aW9uKG1ldGhvZHMpIHsKICBPYmplY3QuZXh0ZW5kKEVsZW1lbnQuTWV0aG9kcywgbWV0aG9kcyB8fCB7fSk7CgogIGZ1bmN0aW9uIGNvcHkobWV0aG9kcywgZGVzdGluYXRpb24sIG9ubHlJZkFic2VudCkgewogICAgb25seUlmQWJzZW50ID0gb25seUlmQWJzZW50IHx8IGZhbHNlOwogICAgdmFyIGNhY2hlID0gRWxlbWVudC5leHRlbmQuY2FjaGU7CiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBtZXRob2RzKSB7CiAgICAgIHZhciB2YWx1ZSA9IG1ldGhvZHNbcHJvcGVydHldOwogICAgICBpZiAoIW9ubHlJZkFic2VudCB8fCAhKHByb3BlcnR5IGluIGRlc3RpbmF0aW9uKSkKICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBjYWNoZS5maW5kT3JTdG9yZSh2YWx1ZSk7CiAgICB9CiAgfQoKICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9ICd1bmRlZmluZWQnKSB7CiAgICBjb3B5KEVsZW1lbnQuTWV0aG9kcywgSFRNTEVsZW1lbnQucHJvdG90eXBlKTsKICAgIGNvcHkoRWxlbWVudC5NZXRob2RzLlNpbXVsYXRlZCwgSFRNTEVsZW1lbnQucHJvdG90eXBlLCB0cnVlKTsKICAgIGNvcHkoRm9ybS5NZXRob2RzLCBIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlKTsKICAgIFtIVE1MSW5wdXRFbGVtZW50LCBIVE1MVGV4dEFyZWFFbGVtZW50LCBIVE1MU2VsZWN0RWxlbWVudF0uZWFjaChmdW5jdGlvbihrbGFzcykgewogICAgICBjb3B5KEZvcm0uRWxlbWVudC5NZXRob2RzLCBrbGFzcy5wcm90b3R5cGUpOwogICAgfSk7CiAgICBfbmF0aXZlRXh0ZW5zaW9ucyA9IHRydWU7CiAgfQp9Cgp2YXIgVG9nZ2xlID0gbmV3IE9iamVjdCgpOwpUb2dnbGUuZGlzcGxheSA9IEVsZW1lbnQudG9nZ2xlOwoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgpBYnN0cmFjdC5JbnNlcnRpb24gPSBmdW5jdGlvbihhZGphY2VuY3kpIHsKICB0aGlzLmFkamFjZW5jeSA9IGFkamFjZW5jeTsKfQoKQWJzdHJhY3QuSW5zZXJ0aW9uLnByb3RvdHlwZSA9IHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihlbGVtZW50LCBjb250ZW50KSB7CiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgdGhpcy5jb250ZW50ID0gY29udGVudC5zdHJpcFNjcmlwdHMoKTsKCiAgICBpZiAodGhpcy5hZGphY2VuY3kgJiYgdGhpcy5lbGVtZW50Lmluc2VydEFkamFjZW50SFRNTCkgewogICAgICB0cnkgewogICAgICAgIHRoaXMuZWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwodGhpcy5hZGphY2VuY3ksIHRoaXMuY29udGVudCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB2YXIgdGFnTmFtZSA9IHRoaXMuZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgaWYgKFsnVEJPRFknLCAnVFInXS5pbmNsdWRlKHRhZ05hbWUpKSB7CiAgICAgICAgICB0aGlzLmluc2VydENvbnRlbnQodGhpcy5jb250ZW50RnJvbUFub255bW91c1RhYmxlKCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5yYW5nZSA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CiAgICAgIGlmICh0aGlzLmluaXRpYWxpemVSYW5nZSkgdGhpcy5pbml0aWFsaXplUmFuZ2UoKTsKICAgICAgdGhpcy5pbnNlcnRDb250ZW50KFt0aGlzLnJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCh0aGlzLmNvbnRlbnQpXSk7CiAgICB9CgogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtjb250ZW50LmV2YWxTY3JpcHRzKCl9LCAxMCk7CiAgfSwKCiAgY29udGVudEZyb21Bbm9ueW1vdXNUYWJsZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBkaXYuaW5uZXJIVE1MID0gJzx0YWJsZT48dGJvZHk+JyArIHRoaXMuY29udGVudCArICc8L3Rib2R5PjwvdGFibGU+JzsKICAgIHJldHVybiAkQShkaXYuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXMpOwogIH0KfQoKdmFyIEluc2VydGlvbiA9IG5ldyBPYmplY3QoKTsKCkluc2VydGlvbi5CZWZvcmUgPSBDbGFzcy5jcmVhdGUoKTsKSW5zZXJ0aW9uLkJlZm9yZS5wcm90b3R5cGUgPSBPYmplY3QuZXh0ZW5kKG5ldyBBYnN0cmFjdC5JbnNlcnRpb24oJ2JlZm9yZUJlZ2luJyksIHsKICBpbml0aWFsaXplUmFuZ2U6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5yYW5nZS5zZXRTdGFydEJlZm9yZSh0aGlzLmVsZW1lbnQpOwogIH0sCgogIGluc2VydENvbnRlbnQ6IGZ1bmN0aW9uKGZyYWdtZW50cykgewogICAgZnJhZ21lbnRzLmVhY2goKGZ1bmN0aW9uKGZyYWdtZW50KSB7CiAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmcmFnbWVudCwgdGhpcy5lbGVtZW50KTsKICAgIH0pLmJpbmQodGhpcykpOwogIH0KfSk7CgpJbnNlcnRpb24uVG9wID0gQ2xhc3MuY3JlYXRlKCk7Ckluc2VydGlvbi5Ub3AucHJvdG90eXBlID0gT2JqZWN0LmV4dGVuZChuZXcgQWJzdHJhY3QuSW5zZXJ0aW9uKCdhZnRlckJlZ2luJyksIHsKICBpbml0aWFsaXplUmFuZ2U6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5yYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy5lbGVtZW50KTsKICAgIHRoaXMucmFuZ2UuY29sbGFwc2UodHJ1ZSk7CiAgfSwKCiAgaW5zZXJ0Q29udGVudDogZnVuY3Rpb24oZnJhZ21lbnRzKSB7CiAgICBmcmFnbWVudHMucmV2ZXJzZShmYWxzZSkuZWFjaCgoZnVuY3Rpb24oZnJhZ21lbnQpIHsKICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShmcmFnbWVudCwgdGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpOwogICAgfSkuYmluZCh0aGlzKSk7CiAgfQp9KTsKCkluc2VydGlvbi5Cb3R0b20gPSBDbGFzcy5jcmVhdGUoKTsKSW5zZXJ0aW9uLkJvdHRvbS5wcm90b3R5cGUgPSBPYmplY3QuZXh0ZW5kKG5ldyBBYnN0cmFjdC5JbnNlcnRpb24oJ2JlZm9yZUVuZCcpLCB7CiAgaW5pdGlhbGl6ZVJhbmdlOiBmdW5jdGlvbigpIHsKICAgIHRoaXMucmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRoaXMuZWxlbWVudCk7CiAgICB0aGlzLnJhbmdlLmNvbGxhcHNlKHRoaXMuZWxlbWVudCk7CiAgfSwKCiAgaW5zZXJ0Q29udGVudDogZnVuY3Rpb24oZnJhZ21lbnRzKSB7CiAgICBmcmFnbWVudHMuZWFjaCgoZnVuY3Rpb24oZnJhZ21lbnQpIHsKICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGZyYWdtZW50KTsKICAgIH0pLmJpbmQodGhpcykpOwogIH0KfSk7CgpJbnNlcnRpb24uQWZ0ZXIgPSBDbGFzcy5jcmVhdGUoKTsKSW5zZXJ0aW9uLkFmdGVyLnByb3RvdHlwZSA9IE9iamVjdC5leHRlbmQobmV3IEFic3RyYWN0Lkluc2VydGlvbignYWZ0ZXJFbmQnKSwgewogIGluaXRpYWxpemVSYW5nZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnJhbmdlLnNldFN0YXJ0QWZ0ZXIodGhpcy5lbGVtZW50KTsKICB9LAoKICBpbnNlcnRDb250ZW50OiBmdW5jdGlvbihmcmFnbWVudHMpIHsKICAgIGZyYWdtZW50cy5lYWNoKChmdW5jdGlvbihmcmFnbWVudCkgewogICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJhZ21lbnQsCiAgICAgICAgdGhpcy5lbGVtZW50Lm5leHRTaWJsaW5nKTsKICAgIH0pLmJpbmQodGhpcykpOwogIH0KfSk7CgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCkVsZW1lbnQuQ2xhc3NOYW1lcyA9IENsYXNzLmNyZWF0ZSgpOwpFbGVtZW50LkNsYXNzTmFtZXMucHJvdG90eXBlID0gewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgfSwKCiAgX2VhY2g6IGZ1bmN0aW9uKGl0ZXJhdG9yKSB7CiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KC9ccysvKS5zZWxlY3QoZnVuY3Rpb24obmFtZSkgewogICAgICByZXR1cm4gbmFtZS5sZW5ndGggPiAwOwogICAgfSkuX2VhY2goaXRlcmF0b3IpOwogIH0sCgogIHNldDogZnVuY3Rpb24oY2xhc3NOYW1lKSB7CiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lOwogIH0sCgogIGFkZDogZnVuY3Rpb24oY2xhc3NOYW1lVG9BZGQpIHsKICAgIGlmICh0aGlzLmluY2x1ZGUoY2xhc3NOYW1lVG9BZGQpKSByZXR1cm47CiAgICB0aGlzLnNldCgkQSh0aGlzKS5jb25jYXQoY2xhc3NOYW1lVG9BZGQpLmpvaW4oJyAnKSk7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbihjbGFzc05hbWVUb1JlbW92ZSkgewogICAgaWYgKCF0aGlzLmluY2x1ZGUoY2xhc3NOYW1lVG9SZW1vdmUpKSByZXR1cm47CiAgICB0aGlzLnNldCgkQSh0aGlzKS53aXRob3V0KGNsYXNzTmFtZVRvUmVtb3ZlKS5qb2luKCcgJykpOwogIH0sCgogIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiAkQSh0aGlzKS5qb2luKCcgJyk7CiAgfQp9OwoKT2JqZWN0LmV4dGVuZChFbGVtZW50LkNsYXNzTmFtZXMucHJvdG90eXBlLCBFbnVtZXJhYmxlKTsKdmFyIFNlbGVjdG9yID0gQ2xhc3MuY3JlYXRlKCk7ClNlbGVjdG9yLnByb3RvdHlwZSA9IHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihleHByZXNzaW9uKSB7CiAgICB0aGlzLnBhcmFtcyA9IHtjbGFzc05hbWVzOiBbXX07CiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uLnRvU3RyaW5nKCkuc3RyaXAoKTsKICAgIHRoaXMucGFyc2VFeHByZXNzaW9uKCk7CiAgICB0aGlzLmNvbXBpbGVNYXRjaGVyKCk7CiAgfSwKCiAgcGFyc2VFeHByZXNzaW9uOiBmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIGFib3J0KG1lc3NhZ2UpIHsgdGhyb3cgJ1BhcnNlIGVycm9yIGluIHNlbGVjdG9yOiAnICsgbWVzc2FnZTsgfQoKICAgIGlmICh0aGlzLmV4cHJlc3Npb24gPT0gJycpICBhYm9ydCgnZW1wdHkgZXhwcmVzc2lvbicpOwoKICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcywgZXhwciA9IHRoaXMuZXhwcmVzc2lvbiwgbWF0Y2gsIG1vZGlmaWVyLCBjbGF1c2UsIHJlc3Q7CiAgICB3aGlsZSAobWF0Y2ggPSBleHByLm1hdGNoKC9eKC4qKVxbKFthLXowLTlfOi1dKz8pKD86KFt+XHwhXT89KSg/OiIoW14iXSopInwoW15cXVxzXSopKSk/XF0kL2kpKSB7CiAgICAgIHBhcmFtcy5hdHRyaWJ1dGVzID0gcGFyYW1zLmF0dHJpYnV0ZXMgfHwgW107CiAgICAgIHBhcmFtcy5hdHRyaWJ1dGVzLnB1c2goe25hbWU6IG1hdGNoWzJdLCBvcGVyYXRvcjogbWF0Y2hbM10sIHZhbHVlOiBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCAnJ30pOwogICAgICBleHByID0gbWF0Y2hbMV07CiAgICB9CgogICAgaWYgKGV4cHIgPT0gJyonKSByZXR1cm4gdGhpcy5wYXJhbXMud2lsZGNhcmQgPSB0cnVlOwoKICAgIHdoaWxlIChtYXRjaCA9IGV4cHIubWF0Y2goL14oW15hLXowLTlfLV0pPyhbYS16MC05Xy1dKykoLiopL2kpKSB7CiAgICAgIG1vZGlmaWVyID0gbWF0Y2hbMV0sIGNsYXVzZSA9IG1hdGNoWzJdLCByZXN0ID0gbWF0Y2hbM107CiAgICAgIHN3aXRjaCAobW9kaWZpZXIpIHsKICAgICAgICBjYXNlICcjJzogICAgICAgcGFyYW1zLmlkID0gY2xhdXNlOyBicmVhazsKICAgICAgICBjYXNlICcuJzogICAgICAgcGFyYW1zLmNsYXNzTmFtZXMucHVzaChjbGF1c2UpOyBicmVhazsKICAgICAgICBjYXNlICcnOgogICAgICAgIGNhc2UgdW5kZWZpbmVkOiBwYXJhbXMudGFnTmFtZSA9IGNsYXVzZS50b1VwcGVyQ2FzZSgpOyBicmVhazsKICAgICAgICBkZWZhdWx0OiAgICAgICAgYWJvcnQoZXhwci5pbnNwZWN0KCkpOwogICAgICB9CiAgICAgIGV4cHIgPSByZXN0OwogICAgfQoKICAgIGlmIChleHByLmxlbmd0aCA+IDApIGFib3J0KGV4cHIuaW5zcGVjdCgpKTsKICB9LAoKICBidWlsZE1hdGNoRXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7CiAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXMsIGNvbmRpdGlvbnMgPSBbXSwgY2xhdXNlOwoKICAgIGlmIChwYXJhbXMud2lsZGNhcmQpCiAgICAgIGNvbmRpdGlvbnMucHVzaCgndHJ1ZScpOwogICAgaWYgKGNsYXVzZSA9IHBhcmFtcy5pZCkKICAgICAgY29uZGl0aW9ucy5wdXNoKCdlbGVtZW50LnJlYWRBdHRyaWJ1dGUoImlkIikgPT0gJyArIGNsYXVzZS5pbnNwZWN0KCkpOwogICAgaWYgKGNsYXVzZSA9IHBhcmFtcy50YWdOYW1lKQogICAgICBjb25kaXRpb25zLnB1c2goJ2VsZW1lbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09ICcgKyBjbGF1c2UuaW5zcGVjdCgpKTsKICAgIGlmICgoY2xhdXNlID0gcGFyYW1zLmNsYXNzTmFtZXMpLmxlbmd0aCA+IDApCiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjbGF1c2UubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspCiAgICAgICAgY29uZGl0aW9ucy5wdXNoKCdlbGVtZW50Lmhhc0NsYXNzTmFtZSgnICsgY2xhdXNlW2ldLmluc3BlY3QoKSArICcpJyk7CiAgICBpZiAoY2xhdXNlID0gcGFyYW1zLmF0dHJpYnV0ZXMpIHsKICAgICAgY2xhdXNlLmVhY2goZnVuY3Rpb24oYXR0cmlidXRlKSB7CiAgICAgICAgdmFyIHZhbHVlID0gJ2VsZW1lbnQucmVhZEF0dHJpYnV0ZSgnICsgYXR0cmlidXRlLm5hbWUuaW5zcGVjdCgpICsgJyknOwogICAgICAgIHZhciBzcGxpdFZhbHVlQnkgPSBmdW5jdGlvbihkZWxpbWl0ZXIpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZSArICcgJiYgJyArIHZhbHVlICsgJy5zcGxpdCgnICsgZGVsaW1pdGVyLmluc3BlY3QoKSArICcpJzsKICAgICAgICB9CgogICAgICAgIHN3aXRjaCAoYXR0cmlidXRlLm9wZXJhdG9yKSB7CiAgICAgICAgICBjYXNlICc9JzogICAgICAgY29uZGl0aW9ucy5wdXNoKHZhbHVlICsgJyA9PSAnICsgYXR0cmlidXRlLnZhbHVlLmluc3BlY3QoKSk7IGJyZWFrOwogICAgICAgICAgY2FzZSAnfj0nOiAgICAgIGNvbmRpdGlvbnMucHVzaChzcGxpdFZhbHVlQnkoJyAnKSArICcuaW5jbHVkZSgnICsgYXR0cmlidXRlLnZhbHVlLmluc3BlY3QoKSArICcpJyk7IGJyZWFrOwogICAgICAgICAgY2FzZSAnfD0nOiAgICAgIGNvbmRpdGlvbnMucHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0VmFsdWVCeSgnLScpICsgJy5maXJzdCgpLnRvVXBwZXJDYXNlKCkgPT0gJyArIGF0dHJpYnV0ZS52YWx1ZS50b1VwcGVyQ2FzZSgpLmluc3BlY3QoKQogICAgICAgICAgICAgICAgICAgICAgICAgICk7IGJyZWFrOwogICAgICAgICAgY2FzZSAnIT0nOiAgICAgIGNvbmRpdGlvbnMucHVzaCh2YWx1ZSArICcgIT0gJyArIGF0dHJpYnV0ZS52YWx1ZS5pbnNwZWN0KCkpOyBicmVhazsKICAgICAgICAgIGNhc2UgJyc6CiAgICAgICAgICBjYXNlIHVuZGVmaW5lZDogY29uZGl0aW9ucy5wdXNoKCdlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnICsgYXR0cmlidXRlLm5hbWUuaW5zcGVjdCgpICsgJyknKTsgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OiAgICAgICAgdGhyb3cgJ1Vua25vd24gb3BlcmF0b3IgJyArIGF0dHJpYnV0ZS5vcGVyYXRvciArICcgaW4gc2VsZWN0b3InOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIGNvbmRpdGlvbnMuam9pbignICYmICcpOwogIH0sCgogIGNvbXBpbGVNYXRjaGVyOiBmdW5jdGlvbigpIHsKICAgIHRoaXMubWF0Y2ggPSBuZXcgRnVuY3Rpb24oJ2VsZW1lbnQnLCAnaWYgKCFlbGVtZW50LnRhZ05hbWUpIHJldHVybiBmYWxzZTsgXAogICAgICBlbGVtZW50ID0gJChlbGVtZW50KTsgXAogICAgICByZXR1cm4gJyArIHRoaXMuYnVpbGRNYXRjaEV4cHJlc3Npb24oKSk7CiAgfSwKCiAgZmluZEVsZW1lbnRzOiBmdW5jdGlvbihzY29wZSkgewogICAgdmFyIGVsZW1lbnQ7CgogICAgaWYgKGVsZW1lbnQgPSAkKHRoaXMucGFyYW1zLmlkKSkKICAgICAgaWYgKHRoaXMubWF0Y2goZWxlbWVudCkpCiAgICAgICAgaWYgKCFzY29wZSB8fCBFbGVtZW50LmNoaWxkT2YoZWxlbWVudCwgc2NvcGUpKQogICAgICAgICAgcmV0dXJuIFtlbGVtZW50XTsKCiAgICBzY29wZSA9IChzY29wZSB8fCBkb2N1bWVudCkuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGhpcy5wYXJhbXMudGFnTmFtZSB8fCAnKicpOwoKICAgIHZhciByZXN1bHRzID0gW107CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2NvcGUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspCiAgICAgIGlmICh0aGlzLm1hdGNoKGVsZW1lbnQgPSBzY29wZVtpXSkpCiAgICAgICAgcmVzdWx0cy5wdXNoKEVsZW1lbnQuZXh0ZW5kKGVsZW1lbnQpKTsKCiAgICByZXR1cm4gcmVzdWx0czsKICB9LAoKICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uOwogIH0KfQoKT2JqZWN0LmV4dGVuZChTZWxlY3RvciwgewogIG1hdGNoRWxlbWVudHM6IGZ1bmN0aW9uKGVsZW1lbnRzLCBleHByZXNzaW9uKSB7CiAgICB2YXIgc2VsZWN0b3IgPSBuZXcgU2VsZWN0b3IoZXhwcmVzc2lvbik7CiAgICByZXR1cm4gZWxlbWVudHMuc2VsZWN0KHNlbGVjdG9yLm1hdGNoLmJpbmQoc2VsZWN0b3IpKS5tYXAoRWxlbWVudC5leHRlbmQpOwogIH0sCgogIGZpbmRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50cywgZXhwcmVzc2lvbiwgaW5kZXgpIHsKICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PSAnbnVtYmVyJykgaW5kZXggPSBleHByZXNzaW9uLCBleHByZXNzaW9uID0gZmFsc2U7CiAgICByZXR1cm4gU2VsZWN0b3IubWF0Y2hFbGVtZW50cyhlbGVtZW50cywgZXhwcmVzc2lvbiB8fCAnKicpW2luZGV4IHx8IDBdOwogIH0sCgogIGZpbmRDaGlsZEVsZW1lbnRzOiBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9ucykgewogICAgcmV0dXJuIGV4cHJlc3Npb25zLm1hcChmdW5jdGlvbihleHByZXNzaW9uKSB7CiAgICAgIHJldHVybiBleHByZXNzaW9uLm1hdGNoKC9bXlxzIl0rKD86IlteIl0qIlteXHMiXSspKi9nKS5pbmplY3QoW251bGxdLCBmdW5jdGlvbihyZXN1bHRzLCBleHByKSB7CiAgICAgICAgdmFyIHNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKGV4cHIpOwogICAgICAgIHJldHVybiByZXN1bHRzLmluamVjdChbXSwgZnVuY3Rpb24oZWxlbWVudHMsIHJlc3VsdCkgewogICAgICAgICAgcmV0dXJuIGVsZW1lbnRzLmNvbmNhdChzZWxlY3Rvci5maW5kRWxlbWVudHMocmVzdWx0IHx8IGVsZW1lbnQpKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KS5mbGF0dGVuKCk7CiAgfQp9KTsKCmZ1bmN0aW9uICQkKCkgewogIHJldHVybiBTZWxlY3Rvci5maW5kQ2hpbGRFbGVtZW50cyhkb2N1bWVudCwgJEEoYXJndW1lbnRzKSk7Cn0KdmFyIEZvcm0gPSB7CiAgcmVzZXQ6IGZ1bmN0aW9uKGZvcm0pIHsKICAgICQoZm9ybSkucmVzZXQoKTsKICAgIHJldHVybiBmb3JtOwogIH0sCgogIHNlcmlhbGl6ZUVsZW1lbnRzOiBmdW5jdGlvbihlbGVtZW50cywgZ2V0SGFzaCkgewogICAgdmFyIGRhdGEgPSBlbGVtZW50cy5pbmplY3Qoe30sIGZ1bmN0aW9uKHJlc3VsdCwgZWxlbWVudCkgewogICAgICBpZiAoIWVsZW1lbnQuZGlzYWJsZWQgJiYgZWxlbWVudC5uYW1lKSB7CiAgICAgICAgdmFyIGtleSA9IGVsZW1lbnQubmFtZSwgdmFsdWUgPSAkKGVsZW1lbnQpLmdldFZhbHVlKCk7CiAgICAgICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgaWYgKHJlc3VsdFtrZXldKSB7CiAgICAgICAgICAgIGlmIChyZXN1bHRba2V5XS5jb25zdHJ1Y3RvciAhPSBBcnJheSkgcmVzdWx0W2tleV0gPSBbcmVzdWx0W2tleV1dOwogICAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgcmVzdWx0W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0pOwoKICAgIHJldHVybiBnZXRIYXNoID8gZGF0YSA6IEhhc2gudG9RdWVyeVN0cmluZyhkYXRhKTsKICB9Cn07CgpGb3JtLk1ldGhvZHMgPSB7CiAgc2VyaWFsaXplOiBmdW5jdGlvbihmb3JtLCBnZXRIYXNoKSB7CiAgICByZXR1cm4gRm9ybS5zZXJpYWxpemVFbGVtZW50cyhGb3JtLmdldEVsZW1lbnRzKGZvcm0pLCBnZXRIYXNoKTsKICB9LAoKICBnZXRFbGVtZW50czogZnVuY3Rpb24oZm9ybSkgewogICAgcmV0dXJuICRBKCQoZm9ybSkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKSkuaW5qZWN0KFtdLAogICAgICBmdW5jdGlvbihlbGVtZW50cywgY2hpbGQpIHsKICAgICAgICBpZiAoRm9ybS5FbGVtZW50LlNlcmlhbGl6ZXJzW2NoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKV0pCiAgICAgICAgICBlbGVtZW50cy5wdXNoKEVsZW1lbnQuZXh0ZW5kKGNoaWxkKSk7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzOwogICAgICB9CiAgICApOwogIH0sCgogIGdldElucHV0czogZnVuY3Rpb24oZm9ybSwgdHlwZU5hbWUsIG5hbWUpIHsKICAgIGZvcm0gPSAkKGZvcm0pOwogICAgdmFyIGlucHV0cyA9IGZvcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7CgogICAgaWYgKCF0eXBlTmFtZSAmJiAhbmFtZSkgcmV0dXJuICRBKGlucHV0cykubWFwKEVsZW1lbnQuZXh0ZW5kKTsKCiAgICBmb3IgKHZhciBpID0gMCwgbWF0Y2hpbmdJbnB1dHMgPSBbXSwgbGVuZ3RoID0gaW5wdXRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBpbnB1dCA9IGlucHV0c1tpXTsKICAgICAgaWYgKCh0eXBlTmFtZSAmJiBpbnB1dC50eXBlICE9IHR5cGVOYW1lKSB8fCAobmFtZSAmJiBpbnB1dC5uYW1lICE9IG5hbWUpKQogICAgICAgIGNvbnRpbnVlOwogICAgICBtYXRjaGluZ0lucHV0cy5wdXNoKEVsZW1lbnQuZXh0ZW5kKGlucHV0KSk7CiAgICB9CgogICAgcmV0dXJuIG1hdGNoaW5nSW5wdXRzOwogIH0sCgogIGRpc2FibGU6IGZ1bmN0aW9uKGZvcm0pIHsKICAgIGZvcm0gPSAkKGZvcm0pOwogICAgZm9ybS5nZXRFbGVtZW50cygpLmVhY2goZnVuY3Rpb24oZWxlbWVudCkgewogICAgICBlbGVtZW50LmJsdXIoKTsKICAgICAgZWxlbWVudC5kaXNhYmxlZCA9ICd0cnVlJzsKICAgIH0pOwogICAgcmV0dXJuIGZvcm07CiAgfSwKCiAgZW5hYmxlOiBmdW5jdGlvbihmb3JtKSB7CiAgICBmb3JtID0gJChmb3JtKTsKICAgIGZvcm0uZ2V0RWxlbWVudHMoKS5lYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgZWxlbWVudC5kaXNhYmxlZCA9ICcnOwogICAgfSk7CiAgICByZXR1cm4gZm9ybTsKICB9LAoKICBmaW5kRmlyc3RFbGVtZW50OiBmdW5jdGlvbihmb3JtKSB7CiAgICByZXR1cm4gJChmb3JtKS5nZXRFbGVtZW50cygpLmZpbmQoZnVuY3Rpb24oZWxlbWVudCkgewogICAgICByZXR1cm4gZWxlbWVudC50eXBlICE9ICdoaWRkZW4nICYmICFlbGVtZW50LmRpc2FibGVkICYmCiAgICAgICAgWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXS5pbmNsdWRlKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKTsKICAgIH0pOwogIH0sCgogIGZvY3VzRmlyc3RFbGVtZW50OiBmdW5jdGlvbihmb3JtKSB7CiAgICBmb3JtID0gJChmb3JtKTsKICAgIGZvcm0uZmluZEZpcnN0RWxlbWVudCgpLmFjdGl2YXRlKCk7CiAgICByZXR1cm4gZm9ybTsKICB9Cn0KCk9iamVjdC5leHRlbmQoRm9ybSwgRm9ybS5NZXRob2RzKTsKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKRm9ybS5FbGVtZW50ID0gewogIGZvY3VzOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAkKGVsZW1lbnQpLmZvY3VzKCk7CiAgICByZXR1cm4gZWxlbWVudDsKICB9LAoKICBzZWxlY3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICQoZWxlbWVudCkuc2VsZWN0KCk7CiAgICByZXR1cm4gZWxlbWVudDsKICB9Cn0KCkZvcm0uRWxlbWVudC5NZXRob2RzID0gewogIHNlcmlhbGl6ZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICBpZiAoIWVsZW1lbnQuZGlzYWJsZWQgJiYgZWxlbWVudC5uYW1lKSB7CiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuZ2V0VmFsdWUoKTsKICAgICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkgewogICAgICAgIHZhciBwYWlyID0ge307CiAgICAgICAgcGFpcltlbGVtZW50Lm5hbWVdID0gdmFsdWU7CiAgICAgICAgcmV0dXJuIEhhc2gudG9RdWVyeVN0cmluZyhwYWlyKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuICcnOwogIH0sCgogIGdldFZhbHVlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIHZhciBtZXRob2QgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKICAgIHJldHVybiBGb3JtLkVsZW1lbnQuU2VyaWFsaXplcnNbbWV0aG9kXShlbGVtZW50KTsKICB9LAoKICBjbGVhcjogZnVuY3Rpb24oZWxlbWVudCkgewogICAgJChlbGVtZW50KS52YWx1ZSA9ICcnOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgcHJlc2VudDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuICQoZWxlbWVudCkudmFsdWUgIT0gJyc7CiAgfSwKCiAgYWN0aXZhdGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgZWxlbWVudC5mb2N1cygpOwogICAgaWYgKGVsZW1lbnQuc2VsZWN0ICYmICggZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ2lucHV0JyB8fAogICAgICAhWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10uaW5jbHVkZShlbGVtZW50LnR5cGUpICkgKQogICAgICBlbGVtZW50LnNlbGVjdCgpOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgZGlzYWJsZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICBlbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKICAgIHJldHVybiBlbGVtZW50OwogIH0sCgogIGVuYWJsZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudCA9ICQoZWxlbWVudCk7CiAgICBlbGVtZW50LmJsdXIoKTsKICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTsKICAgIHJldHVybiBlbGVtZW50OwogIH0KfQoKT2JqZWN0LmV4dGVuZChGb3JtLkVsZW1lbnQsIEZvcm0uRWxlbWVudC5NZXRob2RzKTsKdmFyIEZpZWxkID0gRm9ybS5FbGVtZW50Owp2YXIgJEYgPSBGb3JtLkVsZW1lbnQuZ2V0VmFsdWU7CgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCkZvcm0uRWxlbWVudC5TZXJpYWxpemVycyA9IHsKICBpbnB1dDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgc3dpdGNoIChlbGVtZW50LnR5cGUudG9Mb3dlckNhc2UoKSkgewogICAgICBjYXNlICdjaGVja2JveCc6CiAgICAgIGNhc2UgJ3JhZGlvJzoKICAgICAgICByZXR1cm4gRm9ybS5FbGVtZW50LlNlcmlhbGl6ZXJzLmlucHV0U2VsZWN0b3IoZWxlbWVudCk7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIEZvcm0uRWxlbWVudC5TZXJpYWxpemVycy50ZXh0YXJlYShlbGVtZW50KTsKICAgIH0KICB9LAoKICBpbnB1dFNlbGVjdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gZWxlbWVudC5jaGVja2VkID8gZWxlbWVudC52YWx1ZSA6IG51bGw7CiAgfSwKCiAgdGV4dGFyZWE6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiBlbGVtZW50LnZhbHVlOwogIH0sCgogIHNlbGVjdDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIHRoaXNbZWxlbWVudC50eXBlID09ICdzZWxlY3Qtb25lJyA/CiAgICAgICdzZWxlY3RPbmUnIDogJ3NlbGVjdE1hbnknXShlbGVtZW50KTsKICB9LAoKICBzZWxlY3RPbmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHZhciBpbmRleCA9IGVsZW1lbnQuc2VsZWN0ZWRJbmRleDsKICAgIHJldHVybiBpbmRleCA+PSAwID8gdGhpcy5vcHRpb25WYWx1ZShlbGVtZW50Lm9wdGlvbnNbaW5kZXhdKSA6IG51bGw7CiAgfSwKCiAgc2VsZWN0TWFueTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHZhbHVlcywgbGVuZ3RoID0gZWxlbWVudC5sZW5ndGg7CiAgICBpZiAoIWxlbmd0aCkgcmV0dXJuIG51bGw7CgogICAgZm9yICh2YXIgaSA9IDAsIHZhbHVlcyA9IFtdOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIG9wdCA9IGVsZW1lbnQub3B0aW9uc1tpXTsKICAgICAgaWYgKG9wdC5zZWxlY3RlZCkgdmFsdWVzLnB1c2godGhpcy5vcHRpb25WYWx1ZShvcHQpKTsKICAgIH0KICAgIHJldHVybiB2YWx1ZXM7CiAgfSwKCiAgb3B0aW9uVmFsdWU6IGZ1bmN0aW9uKG9wdCkgewogICAgLy8gZXh0ZW5kIGVsZW1lbnQgYmVjYXVzZSBoYXNBdHRyaWJ1dGUgbWF5IG5vdCBiZSBuYXRpdmUKICAgIHJldHVybiBFbGVtZW50LmV4dGVuZChvcHQpLmhhc0F0dHJpYnV0ZSgndmFsdWUnKSA/IG9wdC52YWx1ZSA6IG9wdC50ZXh0OwogIH0KfQoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgpBYnN0cmFjdC5UaW1lZE9ic2VydmVyID0gZnVuY3Rpb24oKSB7fQpBYnN0cmFjdC5UaW1lZE9ic2VydmVyLnByb3RvdHlwZSA9IHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihlbGVtZW50LCBmcmVxdWVuY3ksIGNhbGxiYWNrKSB7CiAgICB0aGlzLmZyZXF1ZW5jeSA9IGZyZXF1ZW5jeTsKICAgIHRoaXMuZWxlbWVudCAgID0gJChlbGVtZW50KTsKICAgIHRoaXMuY2FsbGJhY2sgID0gY2FsbGJhY2s7CgogICAgdGhpcy5sYXN0VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7CiAgICB0aGlzLnJlZ2lzdGVyQ2FsbGJhY2soKTsKICB9LAoKICByZWdpc3RlckNhbGxiYWNrOiBmdW5jdGlvbigpIHsKICAgIHNldEludGVydmFsKHRoaXMub25UaW1lckV2ZW50LmJpbmQodGhpcyksIHRoaXMuZnJlcXVlbmN5ICogMTAwMCk7CiAgfSwKCiAgb25UaW1lckV2ZW50OiBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTsKICAgIHZhciBjaGFuZ2VkID0gKCdzdHJpbmcnID09IHR5cGVvZiB0aGlzLmxhc3RWYWx1ZSAmJiAnc3RyaW5nJyA9PSB0eXBlb2YgdmFsdWUKICAgICAgPyB0aGlzLmxhc3RWYWx1ZSAhPSB2YWx1ZSA6IFN0cmluZyh0aGlzLmxhc3RWYWx1ZSkgIT0gU3RyaW5nKHZhbHVlKSk7CiAgICBpZiAoY2hhbmdlZCkgewogICAgICB0aGlzLmNhbGxiYWNrKHRoaXMuZWxlbWVudCwgdmFsdWUpOwogICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlOwogICAgfQogIH0KfQoKRm9ybS5FbGVtZW50Lk9ic2VydmVyID0gQ2xhc3MuY3JlYXRlKCk7CkZvcm0uRWxlbWVudC5PYnNlcnZlci5wcm90b3R5cGUgPSBPYmplY3QuZXh0ZW5kKG5ldyBBYnN0cmFjdC5UaW1lZE9ic2VydmVyKCksIHsKICBnZXRWYWx1ZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gRm9ybS5FbGVtZW50LmdldFZhbHVlKHRoaXMuZWxlbWVudCk7CiAgfQp9KTsKCkZvcm0uT2JzZXJ2ZXIgPSBDbGFzcy5jcmVhdGUoKTsKRm9ybS5PYnNlcnZlci5wcm90b3R5cGUgPSBPYmplY3QuZXh0ZW5kKG5ldyBBYnN0cmFjdC5UaW1lZE9ic2VydmVyKCksIHsKICBnZXRWYWx1ZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gRm9ybS5zZXJpYWxpemUodGhpcy5lbGVtZW50KTsKICB9Cn0pOwoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgpBYnN0cmFjdC5FdmVudE9ic2VydmVyID0gZnVuY3Rpb24oKSB7fQpBYnN0cmFjdC5FdmVudE9ic2VydmVyLnByb3RvdHlwZSA9IHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaykgewogICAgdGhpcy5lbGVtZW50ICA9ICQoZWxlbWVudCk7CiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7CgogICAgdGhpcy5sYXN0VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7CiAgICBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnZm9ybScpCiAgICAgIHRoaXMucmVnaXN0ZXJGb3JtQ2FsbGJhY2tzKCk7CiAgICBlbHNlCiAgICAgIHRoaXMucmVnaXN0ZXJDYWxsYmFjayh0aGlzLmVsZW1lbnQpOwogIH0sCgogIG9uRWxlbWVudEV2ZW50OiBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTsKICAgIGlmICh0aGlzLmxhc3RWYWx1ZSAhPSB2YWx1ZSkgewogICAgICB0aGlzLmNhbGxiYWNrKHRoaXMuZWxlbWVudCwgdmFsdWUpOwogICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlOwogICAgfQogIH0sCgogIHJlZ2lzdGVyRm9ybUNhbGxiYWNrczogZnVuY3Rpb24oKSB7CiAgICBGb3JtLmdldEVsZW1lbnRzKHRoaXMuZWxlbWVudCkuZWFjaCh0aGlzLnJlZ2lzdGVyQ2FsbGJhY2suYmluZCh0aGlzKSk7CiAgfSwKCiAgcmVnaXN0ZXJDYWxsYmFjazogZnVuY3Rpb24oZWxlbWVudCkgewogICAgaWYgKGVsZW1lbnQudHlwZSkgewogICAgICBzd2l0Y2ggKGVsZW1lbnQudHlwZS50b0xvd2VyQ2FzZSgpKSB7CiAgICAgICAgY2FzZSAnY2hlY2tib3gnOgogICAgICAgIGNhc2UgJ3JhZGlvJzoKICAgICAgICAgIEV2ZW50Lm9ic2VydmUoZWxlbWVudCwgJ2NsaWNrJywgdGhpcy5vbkVsZW1lbnRFdmVudC5iaW5kKHRoaXMpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBFdmVudC5vYnNlcnZlKGVsZW1lbnQsICdjaGFuZ2UnLCB0aGlzLm9uRWxlbWVudEV2ZW50LmJpbmQodGhpcykpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9Cn0KCkZvcm0uRWxlbWVudC5FdmVudE9ic2VydmVyID0gQ2xhc3MuY3JlYXRlKCk7CkZvcm0uRWxlbWVudC5FdmVudE9ic2VydmVyLnByb3RvdHlwZSA9IE9iamVjdC5leHRlbmQobmV3IEFic3RyYWN0LkV2ZW50T2JzZXJ2ZXIoKSwgewogIGdldFZhbHVlOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBGb3JtLkVsZW1lbnQuZ2V0VmFsdWUodGhpcy5lbGVtZW50KTsKICB9Cn0pOwoKRm9ybS5FdmVudE9ic2VydmVyID0gQ2xhc3MuY3JlYXRlKCk7CkZvcm0uRXZlbnRPYnNlcnZlci5wcm90b3R5cGUgPSBPYmplY3QuZXh0ZW5kKG5ldyBBYnN0cmFjdC5FdmVudE9ic2VydmVyKCksIHsKICBnZXRWYWx1ZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gRm9ybS5zZXJpYWxpemUodGhpcy5lbGVtZW50KTsKICB9Cn0pOwppZiAoIXdpbmRvdy5FdmVudCkgewogIHZhciBFdmVudCA9IG5ldyBPYmplY3QoKTsKfQoKT2JqZWN0LmV4dGVuZChFdmVudCwgewogIEtFWV9CQUNLU1BBQ0U6IDgsCiAgS0VZX1RBQjogICAgICAgOSwKICBLRVlfUkVUVVJOOiAgIDEzLAogIEtFWV9FU0M6ICAgICAgMjcsCiAgS0VZX0xFRlQ6ICAgICAzNywKICBLRVlfVVA6ICAgICAgIDM4LAogIEtFWV9SSUdIVDogICAgMzksCiAgS0VZX0RPV046ICAgICA0MCwKICBLRVlfREVMRVRFOiAgIDQ2LAogIEtFWV9IT01FOiAgICAgMzYsCiAgS0VZX0VORDogICAgICAzNSwKICBLRVlfUEFHRVVQOiAgIDMzLAogIEtFWV9QQUdFRE9XTjogMzQsCgogIGVsZW1lbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICByZXR1cm4gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQ7CiAgfSwKCiAgaXNMZWZ0Q2xpY2s6IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICByZXR1cm4gKCgoZXZlbnQud2hpY2gpICYmIChldmVudC53aGljaCA9PSAxKSkgfHwKICAgICAgICAgICAgKChldmVudC5idXR0b24pICYmIChldmVudC5idXR0b24gPT0gMSkpKTsKICB9LAoKICBwb2ludGVyWDogZnVuY3Rpb24oZXZlbnQpIHsKICAgIHJldHVybiBldmVudC5wYWdlWCB8fCAoZXZlbnQuY2xpZW50WCArCiAgICAgIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQpKTsKICB9LAoKICBwb2ludGVyWTogZnVuY3Rpb24oZXZlbnQpIHsKICAgIHJldHVybiBldmVudC5wYWdlWSB8fCAoZXZlbnQuY2xpZW50WSArCiAgICAgIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKSk7CiAgfSwKCiAgc3RvcDogZnVuY3Rpb24oZXZlbnQpIHsKICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgIH0gZWxzZSB7CiAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7CiAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7CiAgICB9CiAgfSwKCiAgLy8gZmluZCB0aGUgZmlyc3Qgbm9kZSB3aXRoIHRoZSBnaXZlbiB0YWdOYW1lLCBzdGFydGluZyBmcm9tIHRoZQogIC8vIG5vZGUgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgb247IHRyYXZlcnNlcyB0aGUgRE9NIHVwd2FyZHMKICBmaW5kRWxlbWVudDogZnVuY3Rpb24oZXZlbnQsIHRhZ05hbWUpIHsKICAgIHZhciBlbGVtZW50ID0gRXZlbnQuZWxlbWVudChldmVudCk7CiAgICB3aGlsZSAoZWxlbWVudC5wYXJlbnROb2RlICYmICghZWxlbWVudC50YWdOYW1lIHx8CiAgICAgICAgKGVsZW1lbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9IHRhZ05hbWUudG9VcHBlckNhc2UoKSkpKQogICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfSwKCiAgb2JzZXJ2ZXJzOiBmYWxzZSwKCiAgX29ic2VydmVBbmRDYWNoZTogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgb2JzZXJ2ZXIsIHVzZUNhcHR1cmUpIHsKICAgIGlmICghdGhpcy5vYnNlcnZlcnMpIHRoaXMub2JzZXJ2ZXJzID0gW107CiAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goW2VsZW1lbnQsIG5hbWUsIG9ic2VydmVyLCB1c2VDYXB0dXJlXSk7CiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBvYnNlcnZlciwgdXNlQ2FwdHVyZSk7CiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHsKICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChbZWxlbWVudCwgbmFtZSwgb2JzZXJ2ZXIsIHVzZUNhcHR1cmVdKTsKICAgICAgZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgbmFtZSwgb2JzZXJ2ZXIpOwogICAgfQogIH0sCgogIHVubG9hZENhY2hlOiBmdW5jdGlvbigpIHsKICAgIGlmICghRXZlbnQub2JzZXJ2ZXJzKSByZXR1cm47CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gRXZlbnQub2JzZXJ2ZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIEV2ZW50LnN0b3BPYnNlcnZpbmcuYXBwbHkodGhpcywgRXZlbnQub2JzZXJ2ZXJzW2ldKTsKICAgICAgRXZlbnQub2JzZXJ2ZXJzW2ldWzBdID0gbnVsbDsKICAgIH0KICAgIEV2ZW50Lm9ic2VydmVycyA9IGZhbHNlOwogIH0sCgogIG9ic2VydmU6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIG9ic2VydmVyLCB1c2VDYXB0dXJlKSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIHVzZUNhcHR1cmUgPSB1c2VDYXB0dXJlIHx8IGZhbHNlOwoKICAgIGlmIChuYW1lID09ICdrZXlwcmVzcycgJiYKICAgICAgICAobmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goL0tvbnF1ZXJvcnxTYWZhcml8S0hUTUwvKQogICAgICAgIHx8IGVsZW1lbnQuYXR0YWNoRXZlbnQpKQogICAgICBuYW1lID0gJ2tleWRvd24nOwoKICAgIEV2ZW50Ll9vYnNlcnZlQW5kQ2FjaGUoZWxlbWVudCwgbmFtZSwgb2JzZXJ2ZXIsIHVzZUNhcHR1cmUpOwogIH0sCgogIHN0b3BPYnNlcnZpbmc6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIG9ic2VydmVyLCB1c2VDYXB0dXJlKSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIHVzZUNhcHR1cmUgPSB1c2VDYXB0dXJlIHx8IGZhbHNlOwoKICAgIGlmIChuYW1lID09ICdrZXlwcmVzcycgJiYKICAgICAgICAobmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goL0tvbnF1ZXJvcnxTYWZhcml8S0hUTUwvKQogICAgICAgIHx8IGVsZW1lbnQuZGV0YWNoRXZlbnQpKQogICAgICBuYW1lID0gJ2tleWRvd24nOwoKICAgIGlmIChlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHsKICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIG9ic2VydmVyLCB1c2VDYXB0dXJlKTsKICAgIH0gZWxzZSBpZiAoZWxlbWVudC5kZXRhY2hFdmVudCkgewogICAgICB0cnkgewogICAgICAgIGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIG5hbWUsIG9ic2VydmVyKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICB9Cn0pOwoKLyogcHJldmVudCBtZW1vcnkgbGVha3MgaW4gSUUgKi8KaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9cYk1TSUVcYi8pKQogIEV2ZW50Lm9ic2VydmUod2luZG93LCAndW5sb2FkJywgRXZlbnQudW5sb2FkQ2FjaGUsIGZhbHNlKTsKdmFyIFBvc2l0aW9uID0gewogIC8vIHNldCB0byB0cnVlIGlmIG5lZWRlZCwgd2FybmluZzogZmlyZWZveCBwZXJmb3JtYW5jZSBwcm9ibGVtcwogIC8vIE5PVCBuZWVlZGVkIGZvciBwYWdlIHNjcm9sbGluZywgb25seSBpZiBkcmFnZ2FibGUgY29udGFpbmVkIGluCiAgLy8gc2Nyb2xsYWJsZSBlbGVtZW50cwogIGluY2x1ZGVTY3JvbGxPZmZzZXRzOiBmYWxzZSwKCiAgLy8gbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgd2l0aGluSW5jbHVkaW5nU2Nyb2xsb2Zmc2V0LCBldmVyeSB0aW1lIHRoZQogIC8vIHBhZ2UgaXMgc2Nyb2xsZWQKICBwcmVwYXJlOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuZGVsdGFYID0gIHdpbmRvdy5wYWdlWE9mZnNldAogICAgICAgICAgICAgICAgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQKICAgICAgICAgICAgICAgIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdAogICAgICAgICAgICAgICAgfHwgMDsKICAgIHRoaXMuZGVsdGFZID0gIHdpbmRvdy5wYWdlWU9mZnNldAogICAgICAgICAgICAgICAgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcAogICAgICAgICAgICAgICAgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AKICAgICAgICAgICAgICAgIHx8IDA7CiAgfSwKCiAgcmVhbE9mZnNldDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHZhbHVlVCA9IDAsIHZhbHVlTCA9IDA7CiAgICBkbyB7CiAgICAgIHZhbHVlVCArPSBlbGVtZW50LnNjcm9sbFRvcCAgfHwgMDsKICAgICAgdmFsdWVMICs9IGVsZW1lbnQuc2Nyb2xsTGVmdCB8fCAwOwogICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgfSB3aGlsZSAoZWxlbWVudCk7CiAgICByZXR1cm4gW3ZhbHVlTCwgdmFsdWVUXTsKICB9LAoKICBjdW11bGF0aXZlT2Zmc2V0OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgdmFsdWVUID0gMCwgdmFsdWVMID0gMDsKICAgIGRvIHsKICAgICAgdmFsdWVUICs9IGVsZW1lbnQub2Zmc2V0VG9wICB8fCAwOwogICAgICB2YWx1ZUwgKz0gZWxlbWVudC5vZmZzZXRMZWZ0IHx8IDA7CiAgICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDsKICAgIH0gd2hpbGUgKGVsZW1lbnQpOwogICAgcmV0dXJuIFt2YWx1ZUwsIHZhbHVlVF07CiAgfSwKCiAgcG9zaXRpb25lZE9mZnNldDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHZhbHVlVCA9IDAsIHZhbHVlTCA9IDA7CiAgICBkbyB7CiAgICAgIHZhbHVlVCArPSBlbGVtZW50Lm9mZnNldFRvcCAgfHwgMDsKICAgICAgdmFsdWVMICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwOwogICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7CiAgICAgIGlmIChlbGVtZW50KSB7CiAgICAgICAgaWYoZWxlbWVudC50YWdOYW1lPT0nQk9EWScpIGJyZWFrOwogICAgICAgIHZhciBwID0gRWxlbWVudC5nZXRTdHlsZShlbGVtZW50LCAncG9zaXRpb24nKTsKICAgICAgICBpZiAocCA9PSAncmVsYXRpdmUnIHx8IHAgPT0gJ2Fic29sdXRlJykgYnJlYWs7CiAgICAgIH0KICAgIH0gd2hpbGUgKGVsZW1lbnQpOwogICAgcmV0dXJuIFt2YWx1ZUwsIHZhbHVlVF07CiAgfSwKCiAgb2Zmc2V0UGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBpZiAoZWxlbWVudC5vZmZzZXRQYXJlbnQpIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDsKICAgIGlmIChlbGVtZW50ID09IGRvY3VtZW50LmJvZHkpIHJldHVybiBlbGVtZW50OwoKICAgIHdoaWxlICgoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkgJiYgZWxlbWVudCAhPSBkb2N1bWVudC5ib2R5KQogICAgICBpZiAoRWxlbWVudC5nZXRTdHlsZShlbGVtZW50LCAncG9zaXRpb24nKSAhPSAnc3RhdGljJykKICAgICAgICByZXR1cm4gZWxlbWVudDsKCiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTsKICB9LAoKICAvLyBjYWNoZXMgeC95IGNvb3JkaW5hdGUgcGFpciB0byB1c2Ugd2l0aCBvdmVybGFwCiAgd2l0aGluOiBmdW5jdGlvbihlbGVtZW50LCB4LCB5KSB7CiAgICBpZiAodGhpcy5pbmNsdWRlU2Nyb2xsT2Zmc2V0cykKICAgICAgcmV0dXJuIHRoaXMud2l0aGluSW5jbHVkaW5nU2Nyb2xsb2Zmc2V0cyhlbGVtZW50LCB4LCB5KTsKICAgIHRoaXMueGNvbXAgPSB4OwogICAgdGhpcy55Y29tcCA9IHk7CiAgICB0aGlzLm9mZnNldCA9IHRoaXMuY3VtdWxhdGl2ZU9mZnNldChlbGVtZW50KTsKCiAgICByZXR1cm4gKHkgPj0gdGhpcy5vZmZzZXRbMV0gJiYKICAgICAgICAgICAgeSA8ICB0aGlzLm9mZnNldFsxXSArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICYmCiAgICAgICAgICAgIHggPj0gdGhpcy5vZmZzZXRbMF0gJiYKICAgICAgICAgICAgeCA8ICB0aGlzLm9mZnNldFswXSArIGVsZW1lbnQub2Zmc2V0V2lkdGgpOwogIH0sCgogIHdpdGhpbkluY2x1ZGluZ1Njcm9sbG9mZnNldHM6IGZ1bmN0aW9uKGVsZW1lbnQsIHgsIHkpIHsKICAgIHZhciBvZmZzZXRjYWNoZSA9IHRoaXMucmVhbE9mZnNldChlbGVtZW50KTsKCiAgICB0aGlzLnhjb21wID0geCArIG9mZnNldGNhY2hlWzBdIC0gdGhpcy5kZWx0YVg7CiAgICB0aGlzLnljb21wID0geSArIG9mZnNldGNhY2hlWzFdIC0gdGhpcy5kZWx0YVk7CiAgICB0aGlzLm9mZnNldCA9IHRoaXMuY3VtdWxhdGl2ZU9mZnNldChlbGVtZW50KTsKCiAgICByZXR1cm4gKHRoaXMueWNvbXAgPj0gdGhpcy5vZmZzZXRbMV0gJiYKICAgICAgICAgICAgdGhpcy55Y29tcCA8ICB0aGlzLm9mZnNldFsxXSArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICYmCiAgICAgICAgICAgIHRoaXMueGNvbXAgPj0gdGhpcy5vZmZzZXRbMF0gJiYKICAgICAgICAgICAgdGhpcy54Y29tcCA8ICB0aGlzLm9mZnNldFswXSArIGVsZW1lbnQub2Zmc2V0V2lkdGgpOwogIH0sCgogIC8vIHdpdGhpbiBtdXN0IGJlIGNhbGxlZCBkaXJlY3RseSBiZWZvcmUKICBvdmVybGFwOiBmdW5jdGlvbihtb2RlLCBlbGVtZW50KSB7CiAgICBpZiAoIW1vZGUpIHJldHVybiAwOwogICAgaWYgKG1vZGUgPT0gJ3ZlcnRpY2FsJykKICAgICAgcmV0dXJuICgodGhpcy5vZmZzZXRbMV0gKyBlbGVtZW50Lm9mZnNldEhlaWdodCkgLSB0aGlzLnljb21wKSAvCiAgICAgICAgZWxlbWVudC5vZmZzZXRIZWlnaHQ7CiAgICBpZiAobW9kZSA9PSAnaG9yaXpvbnRhbCcpCiAgICAgIHJldHVybiAoKHRoaXMub2Zmc2V0WzBdICsgZWxlbWVudC5vZmZzZXRXaWR0aCkgLSB0aGlzLnhjb21wKSAvCiAgICAgICAgZWxlbWVudC5vZmZzZXRXaWR0aDsKICB9LAoKICBwYWdlOiBmdW5jdGlvbihmb3JFbGVtZW50KSB7CiAgICB2YXIgdmFsdWVUID0gMCwgdmFsdWVMID0gMDsKCiAgICB2YXIgZWxlbWVudCA9IGZvckVsZW1lbnQ7CiAgICBkbyB7CiAgICAgIHZhbHVlVCArPSBlbGVtZW50Lm9mZnNldFRvcCAgfHwgMDsKICAgICAgdmFsdWVMICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwOwoKICAgICAgLy8gU2FmYXJpIGZpeAogICAgICBpZiAoZWxlbWVudC5vZmZzZXRQYXJlbnQ9PWRvY3VtZW50LmJvZHkpCiAgICAgICAgaWYgKEVsZW1lbnQuZ2V0U3R5bGUoZWxlbWVudCwncG9zaXRpb24nKT09J2Fic29sdXRlJykgYnJlYWs7CgogICAgfSB3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50KTsKCiAgICBlbGVtZW50ID0gZm9yRWxlbWVudDsKICAgIGRvIHsKICAgICAgaWYgKCF3aW5kb3cub3BlcmEgfHwgZWxlbWVudC50YWdOYW1lPT0nQk9EWScpIHsKICAgICAgICB2YWx1ZVQgLT0gZWxlbWVudC5zY3JvbGxUb3AgIHx8IDA7CiAgICAgICAgdmFsdWVMIC09IGVsZW1lbnQuc2Nyb2xsTGVmdCB8fCAwOwogICAgICB9CiAgICB9IHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKTsKCiAgICByZXR1cm4gW3ZhbHVlTCwgdmFsdWVUXTsKICB9LAoKICBjbG9uZTogZnVuY3Rpb24oc291cmNlLCB0YXJnZXQpIHsKICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmV4dGVuZCh7CiAgICAgIHNldExlZnQ6ICAgIHRydWUsCiAgICAgIHNldFRvcDogICAgIHRydWUsCiAgICAgIHNldFdpZHRoOiAgIHRydWUsCiAgICAgIHNldEhlaWdodDogIHRydWUsCiAgICAgIG9mZnNldFRvcDogIDAsCiAgICAgIG9mZnNldExlZnQ6IDAKICAgIH0sIGFyZ3VtZW50c1syXSB8fCB7fSkKCiAgICAvLyBmaW5kIHBhZ2UgcG9zaXRpb24gb2Ygc291cmNlCiAgICBzb3VyY2UgPSAkKHNvdXJjZSk7CiAgICB2YXIgcCA9IFBvc2l0aW9uLnBhZ2Uoc291cmNlKTsKCiAgICAvLyBmaW5kIGNvb3JkaW5hdGUgc3lzdGVtIHRvIHVzZQogICAgdGFyZ2V0ID0gJCh0YXJnZXQpOwogICAgdmFyIGRlbHRhID0gWzAsIDBdOwogICAgdmFyIHBhcmVudCA9IG51bGw7CiAgICAvLyBkZWx0YSBbMCwwXSB3aWxsIGRvIGZpbmUgd2l0aCBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMsCiAgICAvLyBwb3NpdGlvbjphYnNvbHV0ZSBuZWVkcyBvZmZzZXRQYXJlbnQgZGVsdGFzCiAgICBpZiAoRWxlbWVudC5nZXRTdHlsZSh0YXJnZXQsJ3Bvc2l0aW9uJykgPT0gJ2Fic29sdXRlJykgewogICAgICBwYXJlbnQgPSBQb3NpdGlvbi5vZmZzZXRQYXJlbnQodGFyZ2V0KTsKICAgICAgZGVsdGEgPSBQb3NpdGlvbi5wYWdlKHBhcmVudCk7CiAgICB9CgogICAgLy8gY29ycmVjdCBieSBib2R5IG9mZnNldHMgKGZpeGVzIFNhZmFyaSkKICAgIGlmIChwYXJlbnQgPT0gZG9jdW1lbnQuYm9keSkgewogICAgICBkZWx0YVswXSAtPSBkb2N1bWVudC5ib2R5Lm9mZnNldExlZnQ7CiAgICAgIGRlbHRhWzFdIC09IGRvY3VtZW50LmJvZHkub2Zmc2V0VG9wOwogICAgfQoKICAgIC8vIHNldCBwb3NpdGlvbgogICAgaWYob3B0aW9ucy5zZXRMZWZ0KSAgIHRhcmdldC5zdHlsZS5sZWZ0ICA9IChwWzBdIC0gZGVsdGFbMF0gKyBvcHRpb25zLm9mZnNldExlZnQpICsgJ3B4JzsKICAgIGlmKG9wdGlvbnMuc2V0VG9wKSAgICB0YXJnZXQuc3R5bGUudG9wICAgPSAocFsxXSAtIGRlbHRhWzFdICsgb3B0aW9ucy5vZmZzZXRUb3ApICsgJ3B4JzsKICAgIGlmKG9wdGlvbnMuc2V0V2lkdGgpICB0YXJnZXQuc3R5bGUud2lkdGggPSBzb3VyY2Uub2Zmc2V0V2lkdGggKyAncHgnOwogICAgaWYob3B0aW9ucy5zZXRIZWlnaHQpIHRhcmdldC5zdHlsZS5oZWlnaHQgPSBzb3VyY2Uub2Zmc2V0SGVpZ2h0ICsgJ3B4JzsKICB9LAoKICBhYnNvbHV0aXplOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIGlmIChlbGVtZW50LnN0eWxlLnBvc2l0aW9uID09ICdhYnNvbHV0ZScpIHJldHVybjsKICAgIFBvc2l0aW9uLnByZXBhcmUoKTsKCiAgICB2YXIgb2Zmc2V0cyA9IFBvc2l0aW9uLnBvc2l0aW9uZWRPZmZzZXQoZWxlbWVudCk7CiAgICB2YXIgdG9wICAgICA9IG9mZnNldHNbMV07CiAgICB2YXIgbGVmdCAgICA9IG9mZnNldHNbMF07CiAgICB2YXIgd2lkdGggICA9IGVsZW1lbnQuY2xpZW50V2lkdGg7CiAgICB2YXIgaGVpZ2h0ICA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0OwoKICAgIGVsZW1lbnQuX29yaWdpbmFsTGVmdCAgID0gbGVmdCAtIHBhcnNlRmxvYXQoZWxlbWVudC5zdHlsZS5sZWZ0ICB8fCAwKTsKICAgIGVsZW1lbnQuX29yaWdpbmFsVG9wICAgID0gdG9wICAtIHBhcnNlRmxvYXQoZWxlbWVudC5zdHlsZS50b3AgfHwgMCk7CiAgICBlbGVtZW50Ll9vcmlnaW5hbFdpZHRoICA9IGVsZW1lbnQuc3R5bGUud2lkdGg7CiAgICBlbGVtZW50Ll9vcmlnaW5hbEhlaWdodCA9IGVsZW1lbnQuc3R5bGUuaGVpZ2h0OwoKICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnOwogICAgZWxlbWVudC5zdHlsZS50b3AgICAgPSB0b3AgKyAncHgnOwogICAgZWxlbWVudC5zdHlsZS5sZWZ0ICAgPSBsZWZ0ICsgJ3B4JzsKICAgIGVsZW1lbnQuc3R5bGUud2lkdGggID0gd2lkdGggKyAncHgnOwogICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnOwogIH0sCgogIHJlbGF0aXZpemU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgaWYgKGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPT0gJ3JlbGF0aXZlJykgcmV0dXJuOwogICAgUG9zaXRpb24ucHJlcGFyZSgpOwoKICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnOwogICAgdmFyIHRvcCAgPSBwYXJzZUZsb2F0KGVsZW1lbnQuc3R5bGUudG9wICB8fCAwKSAtIChlbGVtZW50Ll9vcmlnaW5hbFRvcCB8fCAwKTsKICAgIHZhciBsZWZ0ID0gcGFyc2VGbG9hdChlbGVtZW50LnN0eWxlLmxlZnQgfHwgMCkgLSAoZWxlbWVudC5fb3JpZ2luYWxMZWZ0IHx8IDApOwoKICAgIGVsZW1lbnQuc3R5bGUudG9wICAgID0gdG9wICsgJ3B4JzsKICAgIGVsZW1lbnQuc3R5bGUubGVmdCAgID0gbGVmdCArICdweCc7CiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGVsZW1lbnQuX29yaWdpbmFsSGVpZ2h0OwogICAgZWxlbWVudC5zdHlsZS53aWR0aCAgPSBlbGVtZW50Ll9vcmlnaW5hbFdpZHRoOwogIH0KfQoKLy8gU2FmYXJpIHJldHVybnMgbWFyZ2lucyBvbiBib2R5IHdoaWNoIGlzIGluY29ycmVjdCBpZiB0aGUgY2hpbGQgaXMgYWJzb2x1dGVseQovLyBwb3NpdGlvbmVkLiAgRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHJlZGVmaW5lIFBvc2l0aW9uLmN1bXVsYXRpdmVPZmZzZXQgZm9yCi8vIEtIVE1ML1dlYktpdCBvbmx5LgppZiAoL0tvbnF1ZXJvcnxTYWZhcml8S0hUTUwvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsKICBQb3NpdGlvbi5jdW11bGF0aXZlT2Zmc2V0ID0gZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHZhbHVlVCA9IDAsIHZhbHVlTCA9IDA7CiAgICBkbyB7CiAgICAgIHZhbHVlVCArPSBlbGVtZW50Lm9mZnNldFRvcCAgfHwgMDsKICAgICAgdmFsdWVMICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwOwogICAgICBpZiAoZWxlbWVudC5vZmZzZXRQYXJlbnQgPT0gZG9jdW1lbnQuYm9keSkKICAgICAgICBpZiAoRWxlbWVudC5nZXRTdHlsZShlbGVtZW50LCAncG9zaXRpb24nKSA9PSAnYWJzb2x1dGUnKSBicmVhazsKCiAgICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDsKICAgIH0gd2hpbGUgKGVsZW1lbnQpOwoKICAgIHJldHVybiBbdmFsdWVMLCB2YWx1ZVRdOwogIH0KfQoKRWxlbWVudC5hZGRNZXRob2RzKCk7</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>