蔡
治国

抓纲治国  

华国锋

课堂纪律:
1)不准迟到
2)课堂不准随便进出
3)不准做与本课堂无关的事情

-------------------------------------------------------------
E-mail: caizhiguo@51testing.com

-------------------------------------------------------------
1)计算机发展/分类/应用介绍

计算:将"一个或多个输入值" 转换为 "一个或多个结果" 的思考过程.

手 -> 石头/贝壳 -> 结绳 -> 算筹 -> 珠算 -> 计算尺

计算机发展历史:

机械式(17世纪) 齿轮
德国数学家 谢克哈特  计算钟
法国数学家 帕斯卡 加法机
德国数学家 莱布尼茨 乘法机 四则运算
法国机械师 杰卡德 提花织布机 可编程织布机
英国科学家 巴贝奇 差分机  分析机    存储概念  可编程  Ada 拜伦

-------------------------------------------------------------
机电式 继电器
美国统计学家 霍列瑞斯 制表机  二进制 数据统计之父
德国工程师  祖斯 Z3 继电器
英国政府 霹雳弹  破译德军密码   恩尼格码  图灵
艾肯博士  Mark I  霍波博士  Mark II bug

-------------------------------------------------------------
电子计算机
英国人弗莱明发明真空电子二极管/美国工程师 德・福雷斯特 发明真空三极管
阿坦纳索夫 ABC
莫里奇 埃克特 ENIAC 1946年2月14日
第一台存储式电子计算机 EDVAC 1949年8月 1951年EDVAC才开始运行

1947年12月16日 约翰.巴丁、沃尔特.布拉顿和威廉.肖克利 晶体管
1954 美国贝尔实验室研制成功第一台使用晶体管线路的计算机，取名“催迪克”（TRADIC）

-------------------------------------------------------------
计算机发展历史中重要的科学家:
1)巴贝奇
现代计算机科学的先驱者
2)图灵
现代计算机科学之父
(1)图灵机
模拟人用纸和笔进行计算的过程的机器. 抽象的计算模型.
(2)图灵实验
验证计算机是否具有思考问题的能力的实验.
(3)图灵奖
计算机界的诺贝尔奖之称.
3)香农
美国科学家,现代信息学奠基者.
将布尔代数引入计算机.
4)冯・诺伊曼
美籍匈牙利科学家.
现代电子计算机之父.
提出 存储程序 + 二进制   冯・诺伊曼模型

--------------------------------------------------------------
计算机分类:

1)模拟计算机

模拟量: 连续的不间断的量

数字量: 离散的不连续的量

2)数字计算机


3)数模混合计算机

-----------------------
电子数字计算机:
1)专用
2)通用:
       (1)嵌入式计算机           特定领域计算
       (2)微型计算机             个人计算
       (3)工作站(小型机)
       (4)服务器(中型机)
       (5)大型机                 企业计算
       (6)超级计算机  天河二号    科学计算
       
----------------------------------------------------------
存储器分类:

      ALU  千亿次  1/10^11s
      
      寄存器                           最快
      
      高速缓冲存储器
      
      主存储器(内存)    纳秒级  1/10^9            具有易失性 
      
-------------------------------------------------
      辅助存储器(磁盘)  毫秒级  1/10^3  最慢      具有非易失性
      
      闪速存储器
      
----------------------------------------------------------
程序设计语言:

1)机器语言: 01组成的数字串  --> 目的程序

2)汇编语言: 助记词(英文缩写) --> 汇编源程序

            汇编器/汇编程序
汇编源程序------------------>目的程序

3)算法语言/高级语言: 英文+数学公式 --> 源程序
        编译器/编译程序
源程序----------------->  目的程序
        解释器/解释程序
     ------------------>  目的程序
     
----------------------------------------------------------
信息: 
      文本,图形图像,声音,动画视频

数据: 信息的符号表示.编码

文本:  数值    1,2,3,4,.... 3.14  911
       非数值  a,b,c  中国
       
-----------------------------------------------------------
数值文本在计算机中的表示

R进制的运算规则:
2进制:
0+0=0
1+0=1
1+1=10

十进制:
C(10,2) + 10 = 10*9/2 + 10 = 55

R进制:
C(R,2) + R = R*(R-1)+R = R*(R+1)/2

----------------
基数:
     每个位数能用到的数码符号的个数.
    
     2进制:  1,0   -->2
     10进制: 0,1,2,3,4,5,6,7,8,9 -->10
     16进制: 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f -->16

权:
      123
     1*100 + 2*10 + 3*1 
     10^2     10^1     10^0
     0.123
     1*0.1 + 2*0.01 + 3*0.001
     10^-1    10^-2    10^-3

二进制:

     (110)   =  1*2^2 + 1*2^1 + 0*2^0 = 6       
          2
      
十六进制:
     (a5bf)   = 10*16^3 + 5*16^2 + 11*16^1 + 15*16^0 =    
           16
      
后缀表示法:    二进制    110B             
               十进制    911D   110
               十六进制  5BFH
               

进制之间的转换:
1）二进制数转换为十六进制数
分组后查表
2）十六进制数转换为二进制数
查表
3）二进制数转换为十进制数
按权展开相加
4）十进制数转换为二进制数
整数部分用除基取余法
小数部分用乘基取整法

111011.1010011011B -->  ?H

<-----
0011 1011 . 1010 0110 1100B --> 3B.A6CH

3B.328H --> ?B

3B . 328H
0011 1011.0011 0010 1000B --> 11 1011.0011 0010 1B

1011.101B --> ?D

1*2^3 + 1*2^1 + 1*2^0 + 1*2^-1 + 1*2^-3 = 11.625D


110D --> ?B  1101110B

2 110
-------
2  55 --- 0  低位
-------
2  27 --- 1
-------
2  13 --- 1
-------
2   6 --- 1
-------
2   3 --- 0
-------
2   1 --- 1
-------
2   0 --- 1 高位

0.625D --> ?B  101B

0.625
    2
-------
1.250 --- 1 高位
    2
-------
0.500 --- 0
    2
-------
1.000 --- 1 低位
            
----------------------
88.245D --> ?B  1011000.001111B
                1011000.00111110101110000101000111101011B
2 88
------
2 44 -- 0  低位
------
2 22 -- 0
------
2 11 -- 0
------
2  5 -- 1
------
2  2 -- 1
------
2  1 -- 0
------
2  0 -- 1 高位

0.245
    2  
-------
0.490 -- 0 高位
    2
-------
0.980 -- 0
    2
-------
1.960 -- 1
    2
-------
1.920 -- 1
    2
-------
1.840 -- 1
    2
-------
1.680 -- 1
    2
-------       若小数部分很难收敛只0,可以采取控制精度的方法.                            
              
真值 --->  机器数

真值:  +3.14, -911

机器数: 符号位 + 数值位(原码,补码)

原码:符号位为0表示正数，为1表示负数，数值部分用二进制数的绝对值表示

以8bit表示机器数为例:

原码:

23   x xxxxxxx
     0 0010111  

-23  x xxxxxxx
     1 0010111
     
0    0 0000000
     1 0000000

23+(-23) = 0

     0 0010111  
     1 0010111
     ----------
     1 0101110

--------------------------------------------------
补码:

正数补码: 原码
负数补码: 原码 --> 符号位不变,数值位取反 + 1

23补码:      0 0010111 
-23补码:     1 0010111 --> 1 1101000 + 1 --> 1 1101001

23+(-23)
0 0010111
1 1101001
---------
0 0000000 

---------------------------------------------------------
二进制位数与数值范围的关系:

有符号数: 能表示 - 0 +   ,有符号位
无符号数: 只能表示  0 +  ,无符号位

无符号数:
xxxxxxxx
原码: 00000000 ~ 11111111  0 ~ 255
补码: 00000000 ~ 11111111  0 ~ 255

有符号数:
y xxxxxx
原码: 1 1111111 ~ 0 1111111 -127 ~ +127
补码: 1 0000000 ~ 0 1111111 -128 ~ +127

nbit表示整数:
原码:   -2^(n-1)-1  ~ +2^(n-1)-1
补码:   -2^(n-1) ~ +2^(n-1)-1

-----------------------------------------------------------
数值数据在计算机中的表示:

定点数: 纯小数(0~1) 纯整数(整数)
        0.xxxxxxx   yyyyyyyyy.0

浮点数: 3.1415926 = 3.1415926 * 10^0 = 0.31415926 * 10^1 
        IEEE标准
        S为尾数的符号位，放在最高一位
        E为阶码，紧跟在符号位之后，占m位
        M为尾数，放在低位部分，占n位

------------------------------------------------------------
非数值文本表示:

1)英文字符
ASCII码:  95打印字符(32~126) 33控制字符(0~31,127)

2)汉字
GB2312编码: 简体中文   94*94

  1 2 3 4 ...66...  94   位   
1       |
2       |
--------|---------------
3       |
4
...
18           测
...
94      |
区

区位码:  x区y位

测: 18 区 66 位  -->  12 42H

为了与ASCII码中的控制字符不冲突: 区 + 32  位 + 32 --> + 20 20H

为了与ASCII码中的打印字符不冲突: 区 + 128 位 + 128 --> + 80 80H

机内码: 区 + A0  位 + A0

12 42 + A0 A0 --> B2 E2H

已知 "试"的区位码为 4252D 求其机内码?

区位码: 42 52D --> 2A 34 H + A0 A0H --> CA D4H

-----------------------------------------------------------------------
操作系统基础知识:
1)操作系统概念
是计算机系统中的一个系统软件，它们管理和控制计算机系统中的硬件及软件资源，
为用户提供一个功能强大、使用方便和可扩展的工作环境。

控制计算机整体运行的软件.管理计算机的硬件和软件资源.

2)操作系统发展历史

作业: 程序的一次执行称为一次作业.
时间表:
       用户  时间
        A    08:00 ~ 9:00
        B    10:00 ~ 13:00

计算机操作员: --> 计算机管理员

批处理操作系统: 将若干个作业放在一次批次中提交给计算机处理,在后续的处理过程中用户不能进一步与计算机
进行交互.

交互式处理: 在程序的执行过程中,运行用户通过远程的终端与计算机进行交互.

实时操作系统: 在一个期限内计算机被强制完成任务.计算机处理任务的速度跟得上该任务在外部环境中的行为.

分时操作系统: 在同一时间允许多个用户执行多个程序.

多道程序设计: 将时间分成若干个时间片,再将时间片合理的分配给不同的程序.
                  --------------------------------------------------->t
                  
             下载:---       ---      ---
             听歌:   ---       ---      ---
             上网:      ---       ---       ---
             
多处理器技术:
            CPU1: 下载             
            CPU2: 听歌
            CPU3: 上网
            
            负载均衡: 将若干个任务合理的分配给不同的处理器进行处理.
            均分:     将任务分解成若干个子任务合理的分配给空闲的处理器进行处理.
            
3)操作系统分类
(1)批处理操作系统
(2)实时操作系统
(3)分时操作系统
(4)通用操作系统
(5)网络操作系统

4)操作系统组成

应用软件
用户接口
操作系统内核
硬件

用户接口:
(1)CLI 命令行
字符界面 -->  键盘操作即可   
Windows:   cmd(DOS)
Linux:     shell(bash)
(2)GUI 图形化用户接口
Windows:   桌面(窗口)
Linux:     图形化桌面系统(KDE/GNOME)

操作系统内核:
(1)进程和处理器管理
进程概念:
进程是执行起来的程序，是系统进行资源调度和分配的一个独立单位。
进程由程序、数据和进程控制块(PCB)三部分组成

进程与程序的区别

进程状态:
1>新建状态:  进程控制块已经创建,但进程还没有加载到内存中
2>就绪状态:  进程已经获得除CPU之外的其他资源，只要再获得CPU，就立即执行的状态。
3>执行状态:  进程获得了需要的所有资源正在处理机上执行的状态。
4>阻塞/等待状态: 指正在执行的进程由于发生某事件而暂时无法继续执行的状态。
5>退出状态:  进程结束.

进程状态之间的转换:
参考ppt

进程调度:
进程调度的任务是为了控制、协调进程对CPU的竞争，
按照一定的调度算法使就绪状态的某一进程获得CPU，使该进程转换成运行状态。

调度算法:
1)先来先服务法
2)最高优先权优先调度法
3)时间片轮转法

死锁:
两个或两个以上的进程在执行的过程中,由于资源竞争等因素导致的阻塞现象.
若没有外力的作用,所有的进程则无法进一步推进下去.
            |
------------|-------
            ^      |
            |      |
            |      v
            -------------------
                   |
                   |

死锁的四个必要条件:
1)互斥条件
2)请求与保持条件
3)不可剥夺条件
4)循环等待条件                   
------------------------------------------------------------
(2)内存管理
(3)设备管理
设备类型:
按传输速度的高低，I/O设备分为低速设备、中速设备和高速设备三类
按资源特点，I/O设备分为独占设备、共享设备和虚拟设备三类。 
按信息交换的单位，I/O设备分为块设备和字符设备两类。 
                  块设备:  block   比如 磁盘
                字符设备:  character 比如 键盘
(4)文件系统管理
1)文件类型
是否可以容纳其他文件:   文件   文件夹/目录
格式:                   文本文件  二进制文件

2)文件路径
Windows:    驱动器(C: D: E: ...)
            目录:  C:\Windows\system32\drivers\etc\
            文件:  C:\Windows\system32\drivers\etc\hosts

Linux:      根目录(/)
            目录:  /etc/sysconfig/network-scripts/
            文件:  /etc/sysconfig/network-scripts/ifcfg-eth0           

5)常见操作系统介绍
4大主流操作系统:
(1)Windows
微软  封闭
DOS -> Windows3.1 -> Windows95 -> Windows98 -> Windows2000
Windows XP --> Vista --> Windows7 --> Windows8 --> Windows10

(2)Linux
多个厂商 开源 类 Unix 操作系统
RedHat  Debian ...
1991 芬兰 19岁  linus
GNU/Linux

(3)Unix
古老 稳定
1971 一般与硬件结合起来
IBM     AIX
Oracle  Solaris
HP      HP-UX

(4)Mac OS X
苹果 源于Unix

----------------------------------------------------------------------------------
常见DOS命令:
1)文件管理
(1)基本命令  dir cd
(2)文件操作  mkdir rd copy move del
(3)文件查找  find findstr

2)网络管理   ipconfig netstat
3)系统管理   tasklist taskkill 

1)启动dos窗口
运行 中输入 cmd 回车
2)命令的格式
命令名 [选项] [参数]
dir      /o     d:\

选项: 与命令的功能有关.不同的选项命令具有不同的功能
参数: 命令处理的对象或数据

不区分大小写

3)命令的分类
内部命令: 集成在cmd中  help
外部命令: 程序员开发具有特定功能程序

4)命令的帮助
help 命令名
命令名 /?

dir 目录

cd (change directory)
cd /d  目录(不同驱动器之间切换目录)

mkdir(make directory)

rd 空目录
rd /s /q d:\c74

copy  file  dir  (复制文件)

move  file  dir  (移动文件)

del   file       (删除文件)

find "keyword"  file

c:\Windows>find "GB2312" E:\【1】课程讲义\【12】计算机基础\备课\74计算机基础课堂笔记.txt

---------- E:\【1】课程讲义\【12】计算机基础\备课\74计算机基础课堂笔记.TXT
GB2312编码: 简体中文   94*94

c:\Windows>find /n "GB2312" E:\【1】课程讲义\【12】计算机基础\备课\74计算机基础课堂笔记.txt

---------- E:\【1】课程讲义\【12】计算机基础\备课\74计算机基础课堂笔记.TXT
[360]GB2312编码: 简体中文   94*94

c:\Windows>

findstr keyword file

--------------------------------------------------------------------------
ipconfig

1)查看IP地址
c:\Windows>ipconfig | findstr IP
Windows IP 配置
   本地链接 IPv6 地址. . . . . . . . : fe80::980a:cee9:9949:571c%13
   IPv4 地址 . . . . . . . . . . . . : 192.168.100.20
   本地链接 IPv6 地址. . . . . . . . : fe80::b85a:b761:f392:acde%15
   IPv4 地址 . . . . . . . . . . . . : 192.168.48.1
   本地链接 IPv6 地址. . . . . . . . : fe80::39fe:b066:f484:93d2%16
   IPv4 地址 . . . . . . . . . . . . : 192.168.111.1

管道: 上一个命令的输出作为下一个命令的输入
    --------------------    -------------------
--->                    --->                   --->
    --------------------    -------------------
2)查看MAC地址
c:\Windows>ipconfig /all  | findstr 物理地址/Phy
   物理地址. . . . . . . . . . . . . : 9C-B7-0D-E8-6E-D3
   物理地址. . . . . . . . . . . . . : F0-DE-F1-E6-2D-83
   物理地址. . . . . . . . . . . . . : 7C-E9-D3-B8-57-B6
   物理地址. . . . . . . . . . . . . : 00-50-56-C0-00-01
   物理地址. . . . . . . . . . . . . : 00-50-56-C0-00-08
   物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0
   物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0
   物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0
   物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0
   物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0
   物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0
3)查看DNS
c:\Windows>ipconfig /all  | findstr DNS
   主 DNS 后缀 . . . . . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   DNS 服务器  . . . . . . . . . . . : 8.8.8.8
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   DNS 服务器  . . . . . . . . . . . : fec0:0:0:ffff::1%1
   连接特定的 DNS 后缀 . . . . . . . :
   DNS 服务器  . . . . . . . . . . . : fec0:0:0:ffff::1%1
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :
   连接特定的 DNS 后缀 . . . . . . . :

netstat :查看端口
netstat -ano 

c:\Windows>netstat -ano | findstr :8080
  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       2400
  TCP    [::]:8080              [::]:0                 LISTENING       2400   

--------------------------------------------------------------------------------
tasklist: 列出所有进程信息.

pid: 进程号,操作系统给进程分配一个唯一的随机的数字

C:\Users\CaiZhiguo>tasklist | findstr Uedit32.exe
Uedit32.exe                   8704 RDP-Tcp#1                  1    186,948 K

C:\Users\CaiZhiguo>tasklist | findstr Uedit32.exe

C:\Users\CaiZhiguo>tasklist | findstr Uedit32.exe
Uedit32.exe                   5196 RDP-Tcp#1                  1     45,048 K


C:\Users\CaiZhiguo>tasklist

映像名称                       PID 会话名              会话#       内存使用
========================= ======== ================ =========== ============
System Idle Process              0 Services                   0         24 K
System                           4 Services                   0      5,320 K
smss.exe                       396 Services                   0        772 K

tasklist | findstr 映像名称  --> pid
tasklist | findstr pid       --> 映像名称


taskkill: 关闭进程

taskkill /pid  pid
taskkill /im  映像名称

C:\Users\CaiZhiguo>tasklist | findstr Uedit
Uedit32.exe                   5196 RDP-Tcp#0                  1     89,684 K

C:\Users\CaiZhiguo>taskkill /pid 5196
成功: 给进程发送了终止信号，进程的 PID 为 5196。

C:\Users\CaiZhiguo>taskkill /im Uedit32.exe
成功: 给进程 "Uedit32.exe" 发送了终止信号，进程的 PID 为 7120。

强制结束进程(force):
taskkill /f /pid  pid
taskkill /f /im  映像名称

------------------------------------------------------------------------------------------
算法与数据结构

1)数据结构
(1)数据结构的定义
1>数据：是对客观事物的符号表示，在计算机科学中是指能输入到计算机中并被计算机存储、加工的符号总称。
2>数据元素: 是数据的基本单位，由若干个数据项组成，在程序中作为一个整体而加以考虑和处理。
3>结构: 是数据元素之间的关联关系. 1:1  1:n  m:n

数据结构(Data Structure)就是相互之间存在一种或多种特定关系的相同性质数据元素的集合。

数据结构就是一个二元组: S(D,R)

数据结构的三个方面:
1>逻辑结构
线性结构和非线性结构
1)线性结构 2)树形结构 3)图形结构 4)集合
2>存储结构
3>数据运算
增加  删除  修改  查找  排序

(2)数据结构的分类
数据元素与数据元素之间的关系在计算机内中的表示.
1>存储结点
2>数据元素之间的关系

四种存储结构:
1>顺序存储
逻辑结构:    1-2-3-4-5
顺序存储:    内存    | 1 | 2 | 3 | 4 | 5 |
                    0x100 0x104 0x108 0x10C 0x110

2>链式存储
结点 下一个结点的位置
逻辑结构:    1-2-3-4-5
链式存储:    内存    | 1 p2 | ... | 2 p3 | ... | 3 p4 | 4 p5| ... | 5 ^ |
                    
3>索引存储
存储数据元素
存储数据元素的地址

key ---> address
第一章    1
第二章    25
第三章    50
...

4>散列存储(hash 哈希)
     hash(key)
key ----------->  address

(3)常见的数据结构
1>线性表(逻辑结构)
物理存储:
        <1>顺序表(顺序存储结构)
        一般用数组来存储数据元素.
        
        | 1 | 2 | 3 | 4 | 5 |
在2,3之间插入一个元素 x:
        | 1 | 2 | 3 | 4 | 5 |   |
        | 1 | 2 | x | 3 | 4 | 5 |

        <2>链表(链式存储结构)
单链表:
        node:   data next
        结点:   数据域   指针域
                数据元素  下一个数据元素的地址

        | 1 p2 | ... | 2 p3 | ... | 3 p4 | ... | 4 p5 | ... | 5 ^ |
                                
 head --> | 1 p2 | --> | 2 p3 | --> | 3 p4 | --> | 4 p5 | --> | 5 ^ |
 
插入: 在2,3之间插入一个x元素

head --> | 1 p2 | --> | 2 px | --> | 3 p4 | --> | 4 p5 | --> | 5 ^ | ... | x  p3 |

        <3>栈(顺序栈,链栈)
        对数据操作有限制.
        只允许在线性表中的一端进行插入和删除.栈顶 栈底
        是以 叠盘子 为模型
        操作: 入栈 出栈 判空 判满 
        规则: 后进现出(先进后出)
        
        <4>队列(顺序队,链队)
        允许删除的一端叫队头,允许插入的一端叫队尾.
        是以 排队 为模型
        操作: 入队 出队 判空 判满
        规则: 先进先出
        
---------------------------------------------------------------------------
算法:
1)定义和特性
算法是对具体问题求解过程和步骤的一种描述.

计算机作用? --> 解决现实中的问题

来51上课:
设定闹钟 -> 起床 -> 穿衣服 -> 洗漱 -> 早餐 -> 公交 -> 打卡 -> 上课
设定闹钟 -> 起床 -> 洗漱 -> 早餐 -> 公交 -> 打卡 -> 上课 -> 穿衣服

1> 要执行操作(步骤)
2> 操作执行的顺序
结合起来解决问题的一个流程.

算法的5个特性:
1>有穷性 步骤有限
2>确定性 执行结果唯一
3>可行性 时间有限
4>零个或多个的输入
5>有1个或多个的输出

算法度量:
1>效率 时间复杂度
2>存储 空间复杂度

2)算法的表现形式
1>自然语言
2>流程图
3>伪代码
4>程序设计语言

例子: 求两个数的最大公约数:
求两个正整数m和n (m>n)的最大公约数的求解步骤(欧几里得算法)
1)用m除以n, 所得余数为r
2)令m=n,n=r
3)若r为0, 则得到问题的解为m,否则继续步骤1)

n  m
24 36 --> 12

1) m/n  36/24 --> 12(r)
2) m=24 n=12
3) r=12 != 0
1) 24/12 --> 0(r)
2) m=12 r=0
3) r=0  m=12

流程图: 算法或算法的一部分的图像化表示.
简单符号:
1)圆角矩形: 表示算法的开始或结束
2)句点: 表示算法的一部分的入口或出口
3)平行四边形: 表示数据的输入或输出
4)矩形: 处理框,数据的运算(计算)
5)菱形: 判定框,逻辑判断
6)带箭头的直线或直线: 流程线,表示执行顺序

3)常见简单算法        
(1)求最大最小平均值
  21 34 43 12 25 18
  max
  min
  sum
  
  int a[6] = {21,34,43,12,25,18};
  
  int max = a[0];
  
  for(i=0; i<6; i++)
  {
     if(a[i] > max)
     {
        max = a[i];
     }
  }
  printf("max=%d\n",max);
  
(2)累加或累乘
1+2+3+...+100

循环: 当循环条件满足时反复执行某些操作

i=1 //循环的控制变量,计数器
sum = 0

while( i <= 100 ) //循环条件
{
    sum = sum + i;
    i = i + 1;    //循环的控制变量递增
}    

迭代: 算法不包含本身,一般通过循环结构实现.
递归: 算法包含本身,一般通过选择结构实现.

选择: 在若干种操作中选择其一去执行.

      1)基本实例   已知
      2)递归推导   已知 --> 未知

1+2+3+...+100

S(100) = S(99) + 100
       = S(98) + 99 + 100
       = S(97) + 98 + 99 + 100
       = ...
       = S(2) + 3 + 4 + ... + 100
       = S(1) + 2 + 3 + 4 ... + 100      
       = 1 + 2 + 3 + 4 + ... + 100
        
int S(n)
{
  if( n == 1 )
    return 1;
  else
    return S(n-1) + n;
}

(3)查找
1>线性查找
 21 34 43 12 25 18
 查找 25(key)
 
int list[6] = {21,34,43,12,25,18};
               0  1  2  3  4  5
int key = 25;
int i=0;

while( i < 6 )
{
   if( key = a[i] )
   {
      return i; //找到了
   }
   i = i + 1;
}

return -1; //未找到

2>折半查找
有序表: 线性表中的元素的大小是有序的.
 21 34 43 12 25 18 --> 12 18 21 25 34 43
                       0  1  2  3  4  5
                       left           right
                            middle=(left+right)/2=(0+5)/2=2
                                 left=middle+1=3   right=5
                                         middle=(3+5)/2=4
                                 right=middle-1=4-1=3
                                         middle=(3+3)/2=3
21 < 25
34 > 25
25 = 25

int a[6] = {12, 18, 21, 25, 34, 43};
int key = 25;
int left = 0, middle, right = 5;
int i = 0;

while( left < right )
{
   middle = (left + right) / 2;
   
   if( key == a[middle] )
     return middle;   //找到了
   else if( key < a[middle] )
     left = middle + 1;
   else
     righ = middle - 1;
}

return -1; //未找到

(4)排序
1>冒泡排序 //重点
2>插入排序
3>选择排序
   
---------------------------------------------------------------------------------
多媒体的基础知识
1)声音,图形图像,动画视频在计算机中的表示
采样：就是按照一定的规律每隔一定时间间隔抽取模拟信号的值。
量化：就是对样本值进行离散化处理，即事先规定一组数据，每个数据按一定规则近似表示一组相关采样值。
编码：经过量化后得到的数字信息，还必须按一定格式转换成计算机可以识别的二进制形式，才能在计算机中保存。用二进制形式表示量化值的过程称为编码。

模拟量-->采样-->量化-->编码 -->输出

2)声音,图像的类型
音频文件类型:  波形文件(mp3,wma...)   
               midi文件

图像类型: 静态图像:  矢量图 位图
          动态图像:  动画  视频
  
         

        
        


        
        
        


      





    
          









                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 