1.计算机网络的概念

把不同地理位置,具有自治功能的计算机设备,通过传输介质和网络设备连接在一起,
在网络操作系统和网络管理软件以及网络通信协议的管理和协调下实现资源共享和信息传递的计算机系统.

2.计算机网络的组成

网络硬件:  计算机终端设备: PC,笔记本,手机,平板电脑,网络摄像头,...
           网络设备: 集线器,路由器,网卡,...
           传输介质: 铜缆,纤缆,无线电波,...

网络软件:  网络操作系统: Windows,Linux,iOS,WP,...
           网络管理软件: 路由器中的软件
           网络应用软件: sina,baidu,...
           网络协议: TCP,IP,...
           
3.计算机网络体系结构
计算机网络的层次,层次之间的接口以及各层内的协议 的集合

4.为什么网络要分层? 

      张三(中文) --------------- 琳达(英文)(美国)
                      手势
                      
      张三(中文)(信)                 琳达(英文)(信)           -- 1 level
            |                             ^
            v                             |
      翻译器(中文-->密文)            翻译器(密文-->英文)      -- 2 level
            |                             ^
            v                             |
          邮局(信件)                   邮局(信件)             -- 3 level
            |                             ^
            |-----------------------------|
                          航空网络
                          
(1)便于实现
(2)易于维护与扩展

5.OSI/RM(开放式系统互联参考模型)
七层.
                  HostA   HostB(老板A向老板B发送一封纸质信件) PDU(协议数据单元)  网络编址
应用层(鹰)        老板   应用程序与网络的接口,提供网络服务    报文               域名


表示层(表)        助理   数据的表示/压缩/安全(加密解密)       报文               域名
  

会话层(灰)        秘书   会话的创建/管理/终止                 报文               域名


传输层(船)        司机   实现数据进程到进程之间的交付         段/用户数据报      端口


网络层(网)        排序工人 IP寻址和路由选择                   分组(包)           逻辑地址(IP)


数据链路层(树)    打包工人 实现帧的逐跳交付                   帧                 物理地址(MAC)


物理层(屋)        运输工人 实现比特逐跳交付                   比特               无


高层-->底层:  封装         底层 --> 高层： 解封装
1>加控制信息(首部/头)      1>去掉控制信息
2>切片                     2>重装

帅哥主机:(QQ/MSN) ---------------R1------R2-----------美女主机(QQ/MSN)
源端口:sp(src port)                                  目的端口:dp(dest port)
源IP地址:sa(src address)                             目的IP地址:da(dest address)
源MAC地址:sm(src mac)        下一跳MAC:R1_M          目的MAC地址:dm(dest mac)

应用层       hello                                     应用层    
表示层       hello                                     表示层
会话层       hello                                     会话层
传输层       sp dp + hello                             传输层
网络层       sa da + (sp dp + hello)                   网络层
数据链路层   hm sm + (sa da + (sp dp + hello))         数据链路层
物理层                                                 物理层

6.TCP/IP模型              5层            4层
应用层      
表示层      
会话层    -------------> 应用层                 应用层
传输层    -------------> 传输层                 传输层
网络层    -------------> 互联网层               互联网层
数据链路层-------------> 数据链路层
物理层    -------------> 物理层      ---------->网络接口层

7.每一层实现具体的功能
1)物理层
(1)比特表示
0/1 电信号/光信号/磁信号
(2)比特率和比特同步
(3)网络拓扑
怎样将计算机设备组成网络.
           常见一些拓扑结构          |      |         |
           1>总线型              --------------------------
                                        |           |
           2>星形
                                              |
                                      |-----------|
                          ------------|           |-------
                                      -------------
                                         |
           3>环形
           4>树形
           5>网状
           6>混合型
(4)传输方式
   1>单工            A -----> B
   2>半双工         t1: A -----> B
                    t2: A <----- B
   3>全双工         t:  A ------->B
                          <------
2)数据链路层
(1)物理编址
(2)数据帧的封装和重装
(3)差错控制
   三无: 无损坏,无丢失,无重复
(4)流量控制
   发送数据的速度要与接收数据的速度一致.
(5)拥塞控制

3)网络层
(1)IP编址
(2)路由选择

4)传输层
(1)端口编址
(2)分段与重装
(3)建立连接
(4)差错控制
(5)流量控制
(6)拥塞控制

5)会话层
(1)会话的创建管理终止
(2)同步

6)表示层
(1)数据表示
(2)压缩与解压缩
(3)加密与解密

7)应用层
(1)提供网络接口
(2)提供网络服务

-----------------------------------------------------------------------------------
物理层:

几个概念:
1)带宽: 每秒钟在网络中能传输的bit的个数.
2M bps = 2 * 1024 K = 2 * 1024 * 1024 b/s  
单位: 比特每秒  bps

2)传输速率
单位: 字节每秒  Bps
2M / 8 = 2*1024K/8 ps = 256KBps

3)网络延时
数据从一端传送到另一端所耗费的时间.

物理层中主要的物理设备:
1)网络设备: 网卡 集线器 中继器
网卡: 物理地址(MAC地址)
C:\Users\CaiZhiguo>ipconfig /all | findstr 物理地址
   物理地址. . . . . . . . . . . . . : 9C-B7-0D-E8-6E-D3
   物理地址. . . . . . . . . . . . . : F0-DE-F1-E6-2D-83
   物理地址. . . . . . . . . . . . . : 7C-E9-D3-B8-57-B6
   物理地址. . . . . . . . . . . . . : 00-50-56-C0-00-01
   物理地址. . . . . . . . . . . . . : 00-50-56-C0-00-08
   
MAC(NIC)地址: 48bit --> 12位 16进制   
IEEE      24bit(厂商编号) +  24bit(网卡编号)

中继器: 信号放大和转发
集线器: 多端口的中继器
                   B
                   |
              ----------
       A-----|         |-------C
              ----------
                  |D

假设A-->B发送数据. 转发以广播方式发送.
                   传输方式:半双工
                   数据包碰撞

2)传输介质: 
            1>有线:  双绞线  光纤  电话线
            
双绞线:  屏蔽/非屏蔽
         直连线/交叉线
         
         布线规则: T568A T568B
         直连线:  T568A ------ T568A   T568B ------ T568B  连接不同层次的物理设备
         交叉线:  T568A ------ T568B                       连接相同层次的物理设备
         
网络设备(以TCP/IP模型为例):
层次          物理设备
应用层        网关
传输层        防火墙
网络层        路由器/三层交换机
数据链路层    二层交换机
物理层        集线器   
            
            2>无线:  蓝牙 红外 WiFi
-----------------------------------------------------------------------
数据链路层:

LLC:保证帧传送的完整性和无误性

MAC:将上层传下来的数据封装成帧进行发送(接收时进行相反的过程，将帧拆卸)

数据链路层的物理设备:

网桥,交换机

网桥:连接两个不同的物理网络.

交换机:
            
                   B
                  2|
            1 ----------3
       A-----|         |-------C
              ----------
                 4|D
                  
假设A-->D发送数据:

帧:   D_M A_M + data (源MAC地址  目的MAC地址 + 上层数据)                  
                         
交换机转发是通过单播(1:1)的方式发送.

网桥表:
        目的主机    端口
          A          1
          B          2
          C          3
          D          4

透明网桥: 具有自我学习能力的网桥

网桥表:
        目的主机    端口
           A         1  (A-->B)
           B         2  (B-->A)
           C         3  (C-->D)
           D         4  (D-->A)

--------------------------------------------------------------------------
网络层:
1)网络层中的主要协议
IP/ICMP/ARP/RARP
2)分组转发与交付

数据交换方式:
(1)电路交换(首先建立一条物理线路)
数据报文会完整不会被分割从源点发送到目的点.

(2)分组交换   
数据报文被分割成若干个分组由源点发送到目的点,到达目的点之后被重新组装起来.

1>面向连接(首先建立一条虚电路)
三个阶段: 建立连接 传输数据  断开连接
以电话系统建模
2>面向无连接
只要指导目的地址就可以将数据发送出去.
以邮政系统建模     

当今网络层是一个面向无连接的分组交换系统.

A --> B

A-------R1-R3
        |\/|
        |/\|
        R2-R4--------B
        
A分组: 1 2 3 4
          
分组1: A-R1-R4-B
分组3: A-R1-R2-R4-B
分组4: A-R1-R3-R4-B
分组2: A-R1-R2-R4-B

分组不一定走相同的路径,不一定按照发送顺序达到.
--------------------------------------------------------------
网络层源主机,目的主机,路由器提供的服务:

A-------R1-R3
        |\/|
        |/\|
        R2-R4--------B
        
源主机A:
上层数据(传输层/本层)
1)对上层数据进行分组化处理
源IP地址  目的IP地址  +  上层数据  --> 分组/数据报
2)查找下一跳的逻辑地址(IP)
                          路由表
                      终点      下一跳
                       B          R1
3)查找下一跳的物理地址(MAC)
                          arp表   ---> ARP协议
                      IP        MAC
                      R1       R1_M
4)分片处理                MTU
                     链路    MTU
                     A-R1   1500  
                     R1-R2  299

路由器R1:
检查分片的有效性: 检查数据报的首部是否损坏
1)查找下一跳的逻辑地址(IP)
                          路由表
                      终点      下一跳
                       B          R1
2)查找下一跳的物理地址(MAC)
                          arp表   ---> ARP协议
                      IP        MAC
                      R1       R1_M
3)分片处理                MTU
                     链路    MTU
                     A-R1   1500  
                     R1-R2  299

目的主机B:
检查分片的有效性: 检查数据报的首部是否损坏 -->损坏丢弃
|
v
设定一个计时器  -->  超时  --> 丢弃
|
v
等待所有分片到达之后拆分重装

-------------------------------------------------------------
IP编址:
IP地址可以看成计算机设备/网络设备在网络层中的一个唯一的编号.

IPv4 / IPv6

IPv4中IP地址 32bit
1)二进制方式   32bit
2)十进制方式   每8bit为一组,分为4组
               00000000 ~ 11111111  0~255
点分十进制:    192.168.100.18
              11000000 10101000 01100100 00010010

理论上能表示多少个IP地址: 2^32  月 41亿

姓 名
张 三

IP地址 =  网络号(netid) +  主机号(hostid)              
          192.168.100.     18   
          
问题:
1)怎样识别IP的类型?
2)每一类IP地址能表示的网络数
3)每一类IP地址的每一个网络中能容纳的主机数           

IP地址分类:
            netid                       hostid (共32bit)
A类         8bit                        24bit 
            0 0000000                   00000000 00000000 00000000
            0 1111111                   11111111 11111111 11111111
            网络数:2^7=>128-2=126 主机数:2^24-2
            (全为0,127)  1~126          (全为0,1)
B类         16bit                       16bit
            10 000000 00000000          00000000 00000000
            10 111111 11111111          11111111 11111111
            网络数:2^14           主机数:2^16-2
            128~191
C类         24bit                       8bit
            110 00000 00000000 00000000 00000000
            110 11111 11111111 11111111 11111111
            网络数:2^21           主机数:2^8-2
            192~223
D类         1110  组播
E类         1111  研究

----------------------------------------------------------------------------
特殊的IP地址:

netid           hostid
any             全为0      表示特定的网段   192.168.100.0
any             全为1      表示直接广播地址 192.168.100.255
全为1           全为1      表示全网/受限广播地址 255.255.255.255

192.168.100.18向192.168.100.0网络的所有主机发送数据:
目的IP地址:    192.168.100.255 / 255.255.255.255 

192.168.100.18向192.168.200.0网络的所有主机发送数据:
目的IP地址:    192.168.200.255

127             any       127.0.0.1 环回地址
全为0           全为0      表示所有的网络 0.0.0.0

-----------------------------------------------------------------------------
公有IP与私有IP:
3块IP地址空间(1个A类地址段，16个B类地址段，256个C类地址段)作为私有的内部使用的地址，
即10.0.0.0-10.255.255.255、172.16.0.0-172.31.255.255和192.168.0.0-192.168.255.255

-----------------------------------------------------------------------------
192.168.100.18  192.168.100.191

子网划分:
将A/B/C类网络划分成若干个小的网络.

子网掩码:
1)区分netid与hostid
2)子网划分

子网掩码: 32bit  
(1)二进制表示 每8bit 为一组  四组
(2)点分十进制表示  255.255.255.0

与netid相对应的子网掩码的位设置为1,与hostid相对应的子网掩码的位设置为0

点分十进制:    192.168.100.18
              11000000 10101000 01100100 00010010  

C类:          netid 24bit                hostid 8bit
              11111111 11111111 11111111 00000000
              255.255.255.0

B类:                16bit                       16bit
             255.255.0.0

A类:                8bit                        24bit
             255.0.0.0
             

能表示的网络数由netid的位数决定,能容纳的主机数由hostid的位数决定.

假设将192.168.100.0网络划分成5个子网,每个子网能容纳30台主机.

由192.168.100.0可知是一个C类的IP地址.默认子网掩码255.255.255.0
                 netid 24bit           hostid 8bit
子网掩码:   11111111 11111111 11111111 00000000 
                                       11100000
                                       m=3   n=5
                 netid 27bit           hostid 5bit
子网掩码:   11111111 11111111 11111111 11100000
            255.255.255.224                                                                           

借位: 将表示hostid的二进制位借过来表示netid.
假定借m位,则能表示的网络数:                2^m >= 5
剩下n位表示hostid,则能表示的主机数:        2^n - 2 >= 30
借位数 + 剩下的位数 = 原先的hostid位数     m+n=8

m=3,4,5,6,7,8
n=5,6,7,8
m=3,n=5

192.168.100.18/24  192.168.100.191/24
192.168.100.18/27  192.168.100.191/27

netid 27bit       hostid 5bit
18--> 000 10010
191-->101 11111     

求与192.168.100.18/27在同一网段的IP地址范围?
000 10010
000 00001 ~ 000 11110  --> 192.168.100.1 ~ 192.168.100.30

IP/子网掩码的1的个数(netid位数)

192.168.100.18 255.255.255.224
192.168.100.18/27

------------------------------------------------------------------------------
1、一台主机IP192.168.1.193，子网掩码255.255.255.248，当这台主机将一条消息发往255.255.255.255时，能顺利接受到消息的主机IP范围。
C类IP地址,默认子网掩码255.255.255.0
255.255.255.248 --> 11111111 11111111 11111111 11111  000
                    netid 29bit                      hostid 3bit
                                               11000  001
                                               11000  001 ~ 11000 110 -->193 ~ 198

2、一个网络（假定网络号为172.16.0.0）中有5个子网，子网的主机数目至少300台，请为该网络选择子网规划方案，并写出子网掩码。
B类网络,默认子网掩码 255.255.0.0
                            hostid 16bit
                            2^m >= 5
                            2^n - 2 >= 300
                            m + n = 16
                    11111111 11111111 11100000 00000000
                    255.255.224.0                            
                            
m=3,4,5,6,...16
n=9,10,...16
m=3,n=13  v
m=4,n=12
m=5,n=11
m=6,n=10
m=7,n=9
                      
3、有四台主机IP配置如下：

   A  192.168.155.68       255.255.255.224

   B  192.168.155.113      255.255.255.224

   C  192.168.155.33       255.255.255.224

   D  192.168.155.94       255.255.255.224

试问：哪两台主机可以直接通信？跟主机C在同一子网的主机IP范围。

C类,默认子网掩码:255.255.255.0
255.255.255.224 -->  11111111 11111111 11111111 111 00000
                     netid 27bit
                                                010 00100  --68  v
																								011 10001  --113
                                                001 00001  --33
                                                001 00001 ~ 001 11110 --> 33 ~ 62
                                                010 11110  --94  v
-------------------------------------------------------------------------------------
A-------R1-R3
|       |\/|
C       |/\|
        R2-R4--------B-----D(N1)
                     |
                     C
        
分组的交付和转发

以A-->B发送分组为例:

交付类型:
1)直接交付   A-->C  R4-->B
同一网络的两台主机之间, 路由器向目的主机发送数据
2)间接交付
不同网络之间两台主机,A->R1->R2->R4

转发: 数据报经过路由器,路由器做出抉择,将数据报发送给下一跳.

转发机制:
1)基于路由
A主机   路由表
      终点     路由
       B     A->R1->R4->B

R1路由器 路由表
      终点     路由
       B       R1->R4->B

R4路由器 路由表
      终点     路由
       B       R4->B       
2)基于下一跳
A主机  路由表
      终点    下一跳
       B       R1
       C       null
R1     路由表
      终点    下一跳
       B       R4
R4     路由表
      终点    下一跳
       B       B
B主机  路由表
      终点    下一跳
       B       null
3)基于特定主机
      终点    下一跳
       B       R1     192.168.100.18
       C       R1                 19
       D       R1                 20
4)基于特定网络
      终点    下一跳
       N1       R1 
                     192.168.100.0
5)基于缺省路由
       终点    下一跳
       N1       R1 
       default  R1
                      
                      
A-------R1-R3
|       |\/|
C       |/\|
        R2-R4--------B-----D(N1)
                     |
                     C
                     

A-->B

清湖-->机场东
方案1: 清湖→深圳北站→宝安中心→机场东
方案2: 清湖→深圳北站→前海湾→机场东
方案3: 清湖→少年宫→购物公园→机场东

清湖(源主机)
路由表
终点    下一跳
机场东  深圳北站

深圳北(路由器)
路由表
终点    下一跳
机场东  保安中心

保安中心(路由器)
路由表
终点    下一跳
机场东  机场东

机场东(目的主机) 
路由表
终点    下一跳
机场东   null

A-------R1-R3
        |\/|
        |/\|
        R2-R4--------B

A-->B(路由 A-R1-R4-B)
        
源主机                      路由器                   目的主机

应用层                                               应用层
传输层                                               传输层
网络层                     网络层                    网络层
数据链路层                 数据链路层                数据链路层
物理层                     物理层                    物理层

编址机制                A            R1                        R4                         B
应用层      域名     
传输层      端口        A_P(ort)                                                        B_P
网络层      IP地址      A_A(ddress) R1_A1 R1_A2 R1_A3 R1_A4  R4_A1 R4_A2 R4_A3 R4_A4    B_A
数据链路层  MAC地址     A_M(AC)     R1_M1 R1_M2 R1_M3 R1_M4  R4_M1 R4_M2 R4_M3 R4_M4    B_M
物理层      无         
       
应用层: 报文
传输层: 段/用户数据报   data
-----------------------------------------------------------------------------------------
发送数据: 封装
接收数据: 解封装
A:
网络层: 分组/数据报(包) A_A B_A + data
数据链路层: 帧         R1_M A_M + (A_A B_A + data)  
物理层: 比特           0010101010101010100     

R1:
网络层: 分组/数据报(包) A_A B_A + data
数据链路层: 帧         R1_M A_M + (A_A B_A + data)  
物理层: 比特           0010101010101010100                             

数据链路层: 帧         R4_M1 R1_M4 + (A_A B_A + data)  
物理层: 比特           0010101010101010100                   

R4:
网络层: 分组/数据报(包) A_A B_A + data
数据链路层: 帧         R4_M1 R1_M4 + (A_A B_A + data)  
物理层: 比特           0010101010101010100                             

数据链路层: 帧         B_M R4_M4 + (A_A B_A + data)  
物理层: 比特           0010101010101010100  

B:
网络层: 分组/数据报(包) A_A B_A + data
数据链路层: 帧         B_M R4_M4 + (A_A B_A + data)  
物理层: 比特           0010101010101010100  
           
-----------------------------------------------------------------------------------------
协议: 管理计算机通信的一组规则.

协议三要素:
1)语法  数据结构与格式
2)语义  一段比特的所表示的含义
3)时序  发送数据的速度,发送数据时间

网络层主要协议: IP协议,ICMP协议,ARP协议

IP协议:
IP数据报格式:
               头部          +          数据
        |<-- 20~60Byte-->|
        |<--------------65536Byte-------------->|
        
头部长度: 四个字节,多少行,每4个字节为1行, 最多能表示 4*15=60字节
服务类型8位: xxxxxx yy(后两位未使用) 
            xxx000  分组优先级
            yyyyy0/yyyy11/yyyy10 网络类型
数据报总长度16位: 2^16Byte=65536Byte
标识位(identifiction): 源主机发送数据报,启动一个计时器,初始值,每发送一个数据报,递增1,
分片时,会将同一个数据报的标识位复制一份给每一个分片,标识它们来源与同一个数据报.

A---->B
4个数据报,初始值1000
数据报标识位分别为: 1000,1001,1002,1003
标志位(flag):
y xx (第一位未使用) 第二位表示是否同意分片,1不同意,0同意
                   第三位表示是否是最后一个分片,1不是,0是或未分片
段偏移量: 分片在原始数据报中的相对位置.13bit,用8去除
假设数据报大小为4000字节,分成4分片
            0~1000 1001~2000 2001~3000 3001~4000
            0/8=0  1001/8=125 2001/8=250 3001/8=375
生存期8位: 防止报文在路由过程中出现死循环.        
A-------R1-R3
        |\/|
        |/\|
        R2-R4--------B
A: ttl=64
R1:ttl=63
R4:ttl=62

协议类型8位:指高层的协议

TCP  UDP  ICMP                             TCP  UDP  ICMP       
 \    |    /                                \    |    /         
    IP协议  (复用n:1) ------------------>      IP协议  (分用1:n)                  

头部校验和16位: 

---------------------------------------------------------------------------------
IP协议: 面向无连接 不可靠

较弱差错控制

无流量控制

无拥塞控制

ICMP协议: 因特网控制报文协议
看成对IP协议补充,可以一定程度的解决IP网络没有流量控制和拥塞控制的缺点.

IP数据报(包含在IP数据报的数据部分)

IP头部 + (ICMP报文 + 上层数据)

1)差错报告报文: 报告路由器或目的主机在处理IP数据报时遇到的问题.
(1)目标主机不可达
(2)超时
       1>ttl=0,报文还未到达目的主机
       2>在规定的时间内,还有部分分片未到达目的主机
(3)源点抑制
(4)参数错误
(5)路由变更

2)查询报文: 获取路由器或目的主机某种特定信息.
(1)echo request / echo reply
ping
测试网络层路由器或主机之间的连通性

(2)timestamp request / timestamp reply
时间戳
测试网络层两台主机之间发送接收数据耗费的时间.

-----------------------------------------------------------------------------------
ARP协议:
地址解析协议
将网络层的IP地址转换成数据链路层的MAC地址.


A-------B--C
        |\/|
        |/\|
        D--E--------F

B --> F

B arp表
IP地址   MAC地址
A        A_M
B        B_M
C        C_M
D        D_M
E        E_M

假设B想知道C的MAC地址
B向网络中的所有主机发送一个ARP广播:  谁的IP地址为C,请将你的MAC地址发送给我.
C接收到,回送一个应答,将自己的MAC发送给B(通过1:1单播)
B接到后将数据保存到arp表中.

查看arp表:
arp -a
删除arp表:
arp -d

-----------------------------------------------------------------------------------
传输层:
实现数据进程到进程之间的交付.
                发送数据
A源主机 程序 ------------------>  B目的主机 程序(接收数据)
        
怎么在网络中标识一个进程?

进程在哪台主机上    数据通过哪个端口流向网络/接收网络数据
    IP      +         port
套接字: IP+Port

端口编址:
16bit  00000000 00000000 ~ 11111111 11111111 
       0~65535

端口分类:
1)熟知端口 0~1023
HTTP 80
SMTP 25
POP3 110
FTP  21
...
2)注册端口 1024~49151
Oracle 1521
MySQL  3306
...

3)随机端口 49152~65535
一般用户客户端访问程序

查看端口:
Windows:  netstat -ano | findstr  pid|port
Linux:    netstat -anp | grep pid|port|imagename

-------------------------------------------------------------------------
传输层主要协议:
TCP协议与UDP协议的区别?

TCP协议: 传输控制协议
         面向连接协议(建立连接 传输数据 断开连接)
         可靠协议(差错控制,流量控制,拥塞控制)
         传输效率较低

UDP协议: 用户数据报协议
         面向无连接协议
         不可靠协议(很弱的差错控制,无流量控制,无拥塞控制)
         传输效率较高

TCP协议: 传输控制协议

TCP连接建立(三次握手,必考)

A     B
1 \
   \
    \　　　　　　　　　
    /2
   /      
  /       
 /
3\         
  \      
   \
    \   

1)主机A向主机B发送一个请求
  seq=x,ctl=syn
2)主机B向主机A回送一个应答
  seq=y,ack=x+1,ctl=syn,ack
3)主机A向主机B回送一个应答
  seq=x/x+1,ack=y+1,ctl=ack

TCP连接的断开(四次挥手)
1)主机A向主机B发送一个终止连接的请求
  seq=x,ctl=fin,ack
2)主机B向主机A回送一个应答
  seq=y,ack=x+1,ctl=ack
3)主机B向主机A发送一个终止连接的请求
  seq=y/y+1,ctl=fin,ack
4)主机A向主机B回送一个应答
  seq=x/x+1,ack=y+1/y+2,ctl=ack

------------------------------------------------------
TCP段的格式:
TCP首部 + 数据

32bit序列号: 是由源主机随机生成的一个数字+对段的编号

A--->B
随机数: 1000
发送了4个段: 1,2,3,4
seq分别为: 1001,1002,1003,1004

32位确认号:期望收到的下一个段的编号
A发送1001序号的段给B
回送的应答中 ack=1002

4位首部长度: 0000~1111 15行*4字节=60字节

6个比特的控制字段(0表示未设置,1表示设置)
紧急比特URGENT：当URG=1时，表明此报文应尽快传送，而不要按原来的排队顺序来传送。
               与“紧急指针”字段配合使用，紧急指针指出在本报文段中的紧急数据的最后一个字节的序号，
               使接收方可以知道紧急数据共有多长；
确认比特ACK：只有当ACK=1时，确认序号字段才有意义；
急迫比特PSH：当PSH=1时，表明请求远地TCP将本报文段立即传送给其应用层，而不要等到整个缓存都填满了之后再向上交付。
复位比特RESET：当RST=1时，表明出现严重差错，必须释放连接，然后再重建传输连接。复位比特还用来拒绝一个非法的报文段或拒绝打开一个连接；
同步比特SYN：在建立连接时使用，当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，在发回的报文段中使SYN=1和ACK=1。因此，SYN=1表示这是一个连接请求或连接接受报文，而ACK的值用来区分是哪一种报文；
终止比特FINAL：用来释放一个连接，当FIN=1时，表明欲发送的字节串已经发完，并要求释放传输连接；

A主机                           B主机

应用层: 应用程序(发送)            应用层: 应用程序(接收)
   |                                  ^
   v                                  |
传输层                             传输层
   |                                  ^
   v--------------TCP段---------------|
      
流量控制: 发送方的应用程序发送数据给本机的传输层
          源主机的传输层发送数据给目的主机的传输层
          

缓存:发送窗口                      接收窗口
循环队列                          循环队列
空白
带发送--------------------------->未读取
已发送                            待接受

------------------------------------------------------------------------------------
UDP协议:
用户数据报协议

A主机                          B主机
应用层                           应用层
  |                                ^
  v                                |
传输层                           传输层
  |                                ^
  v------------用户数据报--------->|
  发送队列                       接受队列
           
UDP头 + 应用层数据

UDP报文格式:
参看ppt
-----------------------------------------------------------------------------------
应用层:
应用程序与网络的接口,提供了网络服务.

应用层
传输层:TCP  UDP

应用层
基于TCP协议: TCP协议簇

HTTP     80   超文本传输协议（www服务）
HTTPS    443  安全的HTTP协议
FTP      21   文件传输协议
SMTP     25   简单邮件传输协议(发送邮件)
POP3     110  第三版邮局协议(接收邮件)
TELNET   23   远程登录协议

基于UDP协议: UDP协议簇
TFTP     69    简化的文件传输协议
DNS      53    域名解析协议
DHCP     67    动态主机配置协议
NTP      123   网络时间协议
SNMP     161   简单网络管理协议

应用层的主要协议:
1)DNS协议
2)TELNET协议
3)FTP协议
4)SMTP/POP3/IMAP4
5)HTTP

--------------------------------------------------------------------
1)DNS协议
域名解析

编址机制:
应用层: 			域名  www.baidu.com   
传输层: 			端口  80(HTTP)             16bit
网络层: 			IP地址 180.97.33.108       32bit
数据链路层: 	MAC地址 9C-B7-0D-E8-6E-D3  48bit
物理层:      无

              DNS协议
应用层 域名   ----------> 网络层 IP地址
             <----------
              DNS协议
              
              ARP协议
网络层 IP地址 ----------> 数据链路层 MAC地址
             <----------
              RARP协议

              

域名空间:

按层次结构来划分:

                   根(根域)                                     --- 0 level  根域
       类属域                 国家域                反向域       --- 1 level  顶级域
(com net org mil biz info ...)(cn us jp hk tw ...) (IP-->域名)
注册二级域(ICANN)                类属域                          --- 2 level  二级域
sina baidu                    (com net org ...)
www (www.sina.com)             sina (www.sina.com.cn)           --- 3 level  三级域                    
news (news.sina.com)

...

0~127 level

sky.news.sina.com.cn.

标号: 根域的标号为空,其他域名是非空字符串

每个域名的标号之间用.分隔,书写顺序,按照域名的级别从右向左书写.

-------------------------------------------------------------------
域名与IP地址的对应关系:
www.baidu.com  <--> 180.97.33.107

1:1 (1个域名对以1个IP地址) 
1:n (1个域名对应多个IP地址)
C:\Users\CaiZhiguo>nslookup www.baidu.com
服务器:  ns.mqcache.net
Address:  192.168.100.9

非权威应答:
名称:    www.a.shifen.com
Addresses:  180.97.33.108
          180.97.33.107
Aliases:  www.baidu.com
n:1(多个域名对应1个IP地址)
192.168.100.18    www.test.com/mail.test.com/ftp.test.com

--------------------------------------------------------------------
怎样查看域名对应的IP地址?
ping 域名  (1:1)
nslookup 域名

--------------------------------------------------------------------
域名解析原理:
www.baidu.com --> 180.97.33.107

1)浏览器从浏览器缓存中查找域名与IP地址的对应关系,若有则获取,否则转至2)
2)浏览器从本地DNS缓存中查找域名与IP地址的对应关系,若有则获取,否则转至3)
  C:\windows\system32\drivers\etc\hosts
           IP        domain
     192.168.100.38  www.baidu.com
3)浏览器向本地DNS服务器发送请求
4)本地DNS服务器查询域名与IP地址的对应关系,若有则获取,否则提供根域DNS服务器地址
           IP        domain
           x         www.baidu.com 
          a.b.c.d     .(根域)   
5)本地DNS服务器向根域DNS服务器发送请求
6)根域DNS服务器查询域名与IP地址的对应关系,若有则获取,否则提供com域DNS服务器地址
           IP        domain
           x         www.baidu.com 
          x.y.z.k     com
7)本地DNS服务器向com域DNS服务器发送请求
8)com域DNS服务器查询域名与IP地址对应关系,若有则获取,否则提供baidu域的DNS服务器地址
           IP        domain
           x         www.baidu.com 
          j.h.k.l     baidu
9)本地DNS服务器向baidu域DNS服务器发送请求
10)baidu域DNS服务器查询域名与IP地址对应关系,若有则获取.否则报告域名无法解析.
           IP        domain
           y         www.baidu.com 
11)本地DNS服务器将IP地址回送给浏览器

---------------------------------------------------------------------------------------
Telnet协议
远程登录

1)远程登录与本地登录

本地登录: 输入设备(键盘,鼠标),终端驱动程序
远程登录: 网络连接

windows:  ctrl + z(从键盘上结束输入)
Linux:    ctrl + d

本地主机 --------------------->  远程主机
本地字符集-->NVT字符集-->       远程字符集


客户端 ------------------ 服务器

数据(应用层)            应用程序(应用层)
 |                         ^
 v                         |
终端驱动程序            伪终端驱动程序    
 |                         ^
 v                         |
telnet客户端            telent服务器
 |                         ^
 v                         |
NVT字符集-----------------> 
              网络

telnet应用:

telnet客户端: telnet命令
telnet服务器:

windows:   
        telnet   IP    port
        telent   域名  port

远程登录baidu服务器

telnet www.baidu.com 80
建立TCP连接
syn
syn ack
ack

ctl+]  打开本地回显

向服务器发送与协议相关的一些的命令(请求),服务器接到请求会做响应的处理,处理后
会将结果返回给客户端(响应)

--------------------------------------------------------------------------------
FTP协议
文件传输协议

文件上传与下载  客户端/服务器模式


FTP客户端      FTP服务器

建立TCP连接
文件传输
断开TCP连接

FTP客户端: 资源管理/浏览器/CuteFTP
FTP服务器: ServU

FTP原理:

FTP客户端     FTP服务器
1)建立控制连接
客户端发送一个连接请求,打开一个随机端口,服务器打开一个21端口
2)传输数据
  1>建立一个数据连接
    主动模式: 服务器发起一个连接请求,打开一个20端口,客户端打开一个随机端口
    被动模式: 客户端发起请求,打开一个随机端口,服务器打开一个随机端口
  2>关闭数据连接
3)关闭控制连接

FTP命令:
C:\Users\CaiZhiguo>ftp
ftp> ?
命令可能是缩写的。  命令为:

!               delete          literal         prompt          send
?               debug           ls              put             status
append          dir             mdelete         pwd             trace
ascii           disconnect      mdir            quit            type
bell            get             mget            quote           user
binary          glob            mkdir           recv            verbose
bye             hash            mls             remotehelp
cd              help            mput            rename
close           lcd             open            rmdir
ftp>

------------------------------------------------------------------------------------
SMTP/POP3/IMAP4
与电子邮件相关协议:

SMTP: 邮件传输协议
POP3: 邮局协议

电子邮件系统组成:
1)邮件代理程序: 编辑邮件 接收邮件 管理邮件 ...
foxmail outlook
2)邮件服务器
163邮件服务器  
3)邮件协议
SMTP/POP3/IMAP4/MIME
                           电子邮件
张三(zhangsan@163.com) -------------------->  李四(lisi@qq.com)

                     转发(SMTP)
     163邮件服务器 ----------------->   qq邮件服务器
          ^                                  |                 |
          |发送(SMTP)                        v接收(POP3)       v接收(IMAP4)
      邮件代理程序                        邮件代理程序
      (Foxmail)                            (Outlook)         浏览器
      附件(图片/声音/...)
      MIME

(1)UA (user agent): 编辑/接收邮件
(2)MS (mail ): 邮件检查
(3)MT (mail transfer): 邮件发送与存储
(4)MD (mail delivery): 邮件投递到收件人邮箱
(5)MA (mail access): 接收邮件

UA --> MS --> MT --> MD --> MA -- UA

----------------------------------------------------------------
电子邮箱地址组成:
zhangsan@163.com

用户名 @ 邮件服务器的域名

邮件服务器的域名 --> IP地址    DNS协议(MX记录)

----------------------------------------------------------------
电子邮件组成:

纸质信件:   信封  +  正文
E-mail :    邮件头 + 邮件体(text/HTML)

邮件头: 由一些关键字引导的命令
Return-Path: lvteng@51testing.com
Received: from GA5MDXUVQIDJIEF (Unknown [218.17.218.41])
	by mail.51testing.com with ESMTPA
	; Sun, 28 Jun 2015 16:26:08 +0800
Date: Sun, 28 Jun 2015 16:38:49 +0800
From: "lvteng" <lvteng@51testing.com>
To: "caizhiguo" <caizhiguo@51testing.com>
Subject:  =?utf-8?B?NjnmnJ/mnpfnvo7njrLkuKrkurrnroDljoY=?=
X-Mailer: NetEase FlashMail 2.4.1.18
X-Priority: 3 (Normal)
MIME-Version: 1.0
Message-ID: 558FB297.2050302@51testing.com


电子邮件只能用ascii表示.
常见的ascii编码有: base64


----------------------------------
SMTP命令:
HELO 向服务器标识用户身份。发送者能欺骗，说谎，但一般情况下服务器都能检测到。 
EHLO 向服务器标识用户身份。发送者能欺骗，说谎，但一般情况下服务器都能检测到。
MAIL FROM 命令中指定的地址是发件人地址
RCPT TO 标识单个的邮件接收人；可有多个 RCPT TO；常在 MAIL 命令后面。
DATA 在单个或多个 RCPT 命令后，表示所有的邮件接收人已标识，并初始化数据传输，以 CRLF.CRLF 结束 
VRFY 用于验证指定的用户/邮箱是否存在；由于安全方面的原因，服务器常禁止此命令 
EXPN 验证给定的邮箱列表是否存在，扩充邮箱列表，也常被禁用 
HELP 查询服务器支持什么命令 
NOOP 无操作，服务器应响应 OK 
RSET 重置会话，当前传输被取消
QUIT 结束会话 

例子:用telnet模拟发送电子邮件

用户:nettesting@163.com --->  caizhiguo@51testing.com

telnet smtp.163.com 25

参看资料.

POP3命令:
USER username 认证用户名         
PASS password 认证密码认证，认证通过则状态转换         
APOP name,digest 认可一种安全传输口令的办法，执行成功导致状态转换，请参见 RFC 1321 。         
STAT 处理请求 server 回送邮箱统计资料，如邮件数、 邮件总字节数         
UIDL n 处理 server 返回用于该指定邮件的唯一标识， 如果没有指定，返回所有的。         
LIST n 处理 server 返回指定邮件的大小等         
RETR n 处理 server 返回邮件的全部文本         
DELE n 处理 server 标记删除，QUIT 命令执行时才真正删除         
RSET 处理撤消所有的 DELE 命令         
TOP n,m 处理 返回 n 号邮件的前 m 行内容，m 必须是自然数         
NOOP 处理 server 返回一个肯定的响应         
QUIT 希望结束会话。如果 server 处于"处理" 状态，则现在进入"更新"状态，删除那些标记成删除的邮件。如果 server 处于"认可"状态，则结束会话时 server 不进入"更新"状态 。

IMAP4与POP3区别:
1)POP3离线,IMAP4离线,在线
2)POP3对邮件操作不会映射到服务器上.
3)POP3只支持单个用户登录收取邮件










      


        

                    





    


                   
                    
                    
                             

          
          

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           