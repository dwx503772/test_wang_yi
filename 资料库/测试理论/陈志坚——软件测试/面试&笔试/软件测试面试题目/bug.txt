软件中的bug随想录
发布时间: 2012-7-25 10:24    作者: feixiaoxing    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 

　　软件由于其特殊性，始终和bug紧密地联系在一起。没有bug的软件是不存在的。为什么这么说呢？我们知道，软件是由很多人完成的，不同的人完成代码的水平是不一样的，一旦沟通不畅是很容易引入故障的。另外软件的需求是时刻在改变的、软件的修改是每时每刻都在进行的、软件的外部硬件环境也是在不断变化的。某些软件即使现在不存在bug，也可能是因为我们暂时还没有发现而已，和软件本身是否没有bug其实关系不大。

　　其实，只要你进入软件开发这个行业，基本上每天都需要和bug打交道，这是不以你的意志为转移的。问题的关键是，对待这些bug故障我们应该这么做？哪些是必须完成的，哪些是有待改进的，哪些是必须拒绝的。在发现和验证故障的过程中，有几条原则是我们需要牢记的，

　　（1）故障的处理是需要成本的，需要优先处理那些基本业务故障；

　　（2）必须使得故障复现，故障必现或者有概率地复现，这样解决的可能性才会大大提高，否则极有可能没办法解决；

　　（3）做好故障的描述工作是一件十分重要的事情，恰当、精确的描述可以大大提高问题解决的速度，比如说

　　　　a）当前软件的版本是什么；

　　　　b）故障是否必现；

　　　　c）有没有前提配置；

　　　　d）错误号是什么；

　　　　e）故障出现前的最后一个操作是什么；

　　　　f）故障的基本现象是什么。

　　当然，出现了故障总要解决吧。要是故障出现了，真正的原因却一直查不到，这也是一件什么恼人的事情。就我个人的经验来说，一般只要故障可以稳定复现出来，基本上都可以解决的，但是这个中间会有一些处理效率的问题。所以，有一些简单的准则和方法是需要注意的，

　　（1）寻找到故障的真实原因，通过日志和二分法寻找到故障发生的精确地点；

　　（2）充分利用故障发生时的日志信息、内存数据、回溯堆栈和调试信息等等；

　　（3）掌握单步调试的技巧，关注内存数据发生的每一点变化，尤其是验证内存越界的时候十分有效；

　　（4）解决故障的时候，注意一并处理同类的故障的，比如相似代码段的故障；

　　（5）修改故障，验证代码，注意不要引入新的故障，其实这是极难的一件事情；

　　（6）编写测试用例，防止类似事件的发生，我自己做得也不好。

　　当然，话又说回来，正所谓知易行难。很多事情说说很容易，但是真正实施起来的时候往往打了很多的折扣，这也导致我们处理bug的效果常常很不理想。其实也没有什么好的方法，关键还在于我们自己要及时反省、及时总结吧。不过有一点是肯定的，好的编程习惯可以消除一批类型的故障，比如说内存、死锁、重复编译、野指针等等。愿这篇文章和大家共勉。



过去两年工作中，我竟然成了一个擅长解Bug的家伙。真不知道为什么偏偏是解Bug成了自然而然的事。在这段时间里我总结出了一套解bug的流程，简称为RED方法吧（译注：感 觉可以像是红色警戒！）。不过，这也不是什么新的方法论了。事实上，它成为标准的软件开发实践已经有些年头了。但是我依然见到许多开发者无法系统运用这个方法，总是被解Bug弄得头大。这就是写这篇文章的原因。

　　RED方法是什么？它其实上就是三个步骤： 重现（Reproduce），评估（Evaluate），和调试（Debug）。这三个步骤已经让我能够快速识别Bug的来源并快速的除掉它。c以下是详细的步骤：

　　重现（Reproduce）

　　重现一个 bug，除了验证它确实存在，也是为了找到一个测试用例供解决时使用。能够自信地测试您的解决方案对确保解掉这个bug 至关重要。（译注：常常有程序员看到Bug描述，就想当然的认为如何如何，结果可与之相反，这样的状况屡见不鲜。重现是第一步，特别是理解Bug背后的意图，就像是软件开发中的需求之于设计一样重要。）

　　评估（Evaluate）

　　面对Bug， 大多数开发者会将时间花在这里。坦率地说，这是错误的。评估应当用于找出一些显而易见的问题 （错误字符、 错误的常量等），然后调试程序，这样可以快速从代码中隔离出来这个Bug。解bug需要更多地关注代码。评估很重要，但不能靠它来解掉bug。

　　调试（Debug）

　　这是最重要的一步。一旦确定了Bug出现的位置，就要以单步执行的方式跟踪代码并加以分析。Bug 往往更多地取决于程序的状态，而不是它的位置。如果一个Bug发生是因为某个不应该为NULL的变量却赋成了NULL，那么这个Bug的根本原因可能在此位置之前了。（代码死掉的位置并不一定是Bug存在的位置）。

　　代码的运行状态比代码本身更重要。运用调试可以让你真正了解程序的运行状态。一行一行地逐步执行程序可以最终发现您的代码在哪里出错了和什么状态导致了这个问题。只有了解了代码为什么出错，而不是只了解代码在什么位置出错，才能找出最佳的解决方案。

　　例如，刚刚提到的那个Bug可以有两种方案：

　　1、添加判断，以确认该变量不是NULL。

　　2、消除所有可能导致此变量为NULL值的情况。

　　第一种方法有时可能是正确的。但如果在设计时该变量无论在哪里都不应为空，那这样做就有问题了。这样做只会暂时掩饰掉它，而以后可能就要花更多的时间来解决变量为NULL的情况了。

　　如果先确定导致该变量为NULL的所有情况，对于先前的设计，消除掉这些异常的情况，这样才算真正解掉了这个bug。解bug应当是修复代码中的缺陷，而不只是隐藏起来。


由软件测试bug状态转换想到的
发布时间: 2012-7-06 13:48    作者: 未知    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 测试管理 

　　上周四，不得不对客户新启用的bug管理工具Redmine中的bug状态进行验证。当然Redmine其实是一个项目管理工具，bug管理只是它的一部分功能而已。我在验证之前，是让一个经验不多的同事去验证的，主要是因为Redmine是客户的testmanager自定义了，我们发现之前的配置下某些状态下不能修改bug的状态了，或者说bug可选的状态不对。所有有必要在客户又重新调整后验证一下，是否符合我们一般的要求。同事的工作经验不多，估计又是忙着下班，着急的看了就画了个流程图，用邮件发给我且没有标题。收到以后，我自己也看了看，自己创建了一个testbug，发现流程图中出现的一个reopen状态，在现在的配置下根本就没有，我就不知道他是怎么画的了，我知道的是之前有reopen的，但最新的是没有的嘛。因此，我不得不重新研究。

　　说实话，我被气的够呛。如果简单的一个任务，作为测试每天都要接触的问题，怎么就不能研究好了，我自己也画了一个，发了邮件，发之前为了验证我画的流程图是不是，找了一个开发来帮我一起看看，让他看看在我不解释的情况下能不能理解。其实工作很简单，根据现有的配置，检查在各个状态下是否能流转到想要的状态去，不对的地方就提出来。为什么会做不好呢？同样一个任务，我和他做的效果就完全不一样。这个应该有那位同事去思考，而我却得到了一个新的面试题。

　　面试题：

　　1、请列出你说知道的bug的状态一般有哪些？

　　2、请根据你列出的状态，画出bug状态的转换流程图？

　　3、请根据上述的流程图，写出或列出对该流程图的用例

　　我觉得这是一个不错的面试题。第一个问题比较基础，但不容易答全了，bug的状态很多，并且各个公司对状态的定义可能会存在差别，但这种差别不影响回答这个问题。特别想提的是客户在bug状态中加了一个monitoring，我觉得很好，这是用来监控哪些不易产生，但有时常产生的bug，开发说改了，这样的bug测试人员就很纠结，验证的时候是没有出现，但这能代表问题真的修改好了。所以在一定时间内做监控，是有必要的。

　　第二个问题能考察应聘者的综合能力。是否仔细想过各状态之间转换的关系。是否能够将理解的内容转换成图形。是否有足够的耐心去做好事情。这基本和测试技能没什么关系，重点在其他基本素质。

　　第三个题目，考测试用例编写的思想。对于状态转换如何测试。这就是一个状态机的测试。也可以用场景法（路径法）测试。



软件测试bug收集策略
发布时间: 2012-7-03 13:28    作者: 未知    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 测试管理 

　　Error = 0 的程序是不存在的，怎样收集和处理程序中的错误？怎样更好地利用错误信息的收集和反馈来协助程序的调试？怎样让产品发布后，用户能够反馈出更有价值的问题信息？这些问题是本文将要涉及的，最近对自己所做项目中的错误处理机制做了一些总结与思考，故在此讨论，希望对大家有所帮助。

　　目前，按照我个人的理解，软件中的错误收集和反馈方式主要有如下几种：

　　第一种方式：使用常用的信息输出语句。

　　对于控制台程序，可以使用 printf 语句或者 std：：cout 将错误信息打印出来；对于MFC程序，可以使用 TRACE 宏，将错误信息输出到 output 窗口，或者使用 MessageBox直接弹出对话框将错误信息告知用户 。

　　这些处理策略往往针对于 “交互性” 的代码段，可以实现 实时反馈错误信息，以供用户实时地进行处理，以免后面产生更大的错误。

　　第二种方式：使用错误日志方式

　　思想：将程序中的所有错误信息输出到错误日志文件中，这样有以下这些好处：

　　1、当程序发布后，客户在使用中遇到问题后，可以直接将错误日志发送给程序员，将极大地方便了问题的定位及原因的分析。

　　2、便于调试多线程或者涉及网络通信等复杂的程序，因为在这样的程序中，设置断点的调试方式非常地不方便，一旦暂停在断点处，往往为引起线程异常或者 网络连接断开等问题，极大影响了调试的效率。如果将错误信息打印到文件中，错误描述详细丰富一些，可以极大地提高调试的效率。

　　3、便于程序进行大规模的性能测试。例如：C/S模式的系统，进行100个客户端对服务器的访问测试，使用这种错误收集策略可以方便地通过分析错误日志文件来推测系统的性能。

　　下面思考这样一个问题：很多软件的设计上都有一个类似TCP/IP协议的应用层的模块，该模块一般是直接与客户端交互的一层，它隔离了核心代码模块与客户端的耦合，那么，对于这样一种层次结构比较深设计方案，最底层发生的错误信息怎样传递到最上层？每一层都提供获取错误信息的接口？这样开销太大，也往往不够理想，那该怎样处理呢？

　　我想应该主要有以下两种处理策略，也就是我即将引出的错误收集和反馈的第三种和第四种策略：

　　第三种方式：C++异常机制

　　C++异常处理机制是一个用来有效地处理运行错误的非常强大且灵活的工具，它提供了更多的弹性、安全性和稳固性，克服了传统方法所带来的问题.

　　异常的抛出和处理主要使用了以下三个关键字： try、 throw 、 catch 。

　　抛出异常、捕获异常 ，这些是C++提供的极其方便地处理异常策略，可以实现在最底层抛出异常，由最上层捕获，并且处理。

　　说实话，C++异常机制的确是一种处理错误和异常的很好的策略，如果需要使用该机制，需要从软件架构和设计时就要开始考虑，一旦软件结构和代码写到一定程度后，再引入异常机制将很难达到很好的效果。其实，要想用好c++异常机制，不是一件很容易的事，特别是对于项目组里面有大量新人的时候，故使用成本还是挺高的。

　　关于C++异常机制很多C++书籍都有介绍，我也不在此赘述，本博客也有一篇C++异常机制的入门示例代码，有兴趣可以看看http://www.51testing.com/html/17/n-209117.html。

　　第四种方式：GetLastError模式

　　经常开发windows程序的人应该都了解，windows程序有一个API：GetLastError，它其实代表着一种错误收集处理机制。

　　当一个Windows函数检测到一个错误时，它会使用一个称为线程本地存储器（thread-localstorage）的机制。当函数返回时，它的返回值为flase就能指明一个错误已经发生。若要确定这是个什么错误，可以调用GetLastError函数来获取：该函数只返回线程的32位错误代码。

　　WinError.h头文件包含了Microsoft公司定义的错误代码的列表。

　　当Windows函数运行失败时，应该立即调用GetLastError函数。如果调用另一个Windows函数，它的值很可能被改写。

　　Visual studio还配有一个小的实用程序，称为Error Lookup.

　　如果在编写的应用程序中发现一个错误，可能想要向用户显示该错误的文本描述。Windows提供了一个函数，可以将错误代码转换成它的文本描述。该函数称为FormatMessage。

　　以上就是GetLastError模式的介绍，可以简单地把它想象成为这样一种模式：有一个全局的变量，可以用来存放32位错误代码，一旦Windows函数运行失败，就将错误代码赋值给这个全局的变量，每当调用GetLastError，则将该错误代码返回出来以供外部分析原因。

　　其实，我们自己也可以实现这样一个GetLastError模式的错误收集机制，收集整个程序中最新的错误信息，供上层及时调用查询，定义自己的错误代码和错误描述信息串，那么，怎样才能更好地实现属于自己的类似的错误收集反馈机制呢？怎样使它具有更好地移植性、健壮性（支持多线程等）和易扩展性（加入新的错误代码和信息）呢？我将在后面的文章中介绍我的思考和设计。

　　以上就是我对软件中的错误收集策略的思考和总结，希望对各位有所帮助，也欢迎大家提出意见和建议。



解决软件测试Bug的五个阶段
发布时间: 2012-6-28 11:44    作者: 未知    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 测试管理 

　　一个非常严重和困难的bug，能够成就一个饱经沧桑深受压力的有经验的专业程序员的职业生涯。经受这种考验的创伤程度，相当你受到了一次严重的身体伤害，离婚，或是家庭成员的离世。

　　研究人员在研究了计算机编程心理学后，得出了一个程序员们在解决一个困难的bug时的心路里程。这些不同的境界，很像为大众所知的Kübler-Ross Stages of Grief（这个模型描述了人对待哀伤与灾难过程中的5个独立阶段（否认，愤怒，耍赖，抑郁，接受）。绝症患者被认为会经历这些阶段），而且原因都很相似。就好像死亡所伴随的悲伤一样，fix一个bug是一个过程其初始化了一个事件，一开始是拒绝相信，其造就了你苦闷的情绪并开始逐步影响你的心智。这种苦闷的情结果会让你纠结要努力忍受，最终会你会找到一个满意的结果。

　　了解下面这几个bug-fixing的阶段，会让我们更好的生存下来，并持之以恒，最终带来……关闭我们所有的bug的结果。

　　第一阶段：抵触

　　本阶段的状态：多疑Skeptical、生气Offended、易怒Petulant。

　　1、不理睬
　　也许这个bug会安静地离开。

　　2、标记上“不是bug”
　　也许这是用户的错，或是本地配置有问题。是的，我确信就是那样，一会就会好的。

　　3、就是一次小故障
　　我想这就是一次小故障，很奇怪地发生了一次，它不会再发生的，虽然没有搞清楚是为什么发生了，不过这就好像我们的数据库，网格，浏览器或别的什么打了几个嗝一样。一会就会好的，我确信。

　　4、躲藏
　　我要休几天病假，也许他们会把这个bug转给别人的。

　　5、标记为“修改需求中”
　　你看，我是按照需求实现的。如果你们想要改这个行为和UI，就一定要修改需求。也许他们会决定就这样了。

　　6、需要更多的信息
　　我不能确定这是一个bug，除非我能在错误日志中看到一条特定的报错信息。

　　7、转给其他人
　　我调查这个bug中看到了其它模块中我看不懂的数据，问题很大。我应该把这个bug转给开发那个模块的人。我可以在我的模块中检查一下那个边边角角的情况，但是正确的fix应该是在别人的模块中。反正那个在别的国家，我见不着他。

　　第二阶段：接受

　　本阶段的状态：认命Resigned、被打击Defeated、被激怒Annoyed。

　　1、接受现实
　　行了，行了，行了！这是我的bug，我会修正它的。

　　2、把这个bug放到最后
　　也许，我可以在我需要fix这个bug之前找到一个新的工作。

　　3、和你的经理讨价还价
　　好的，你看，我可以正确地fix这个问题，不过我需要一个月。也就是说，我可以给这个问题贴个创可贴，那不会真正的解决它，但是我们可以避免用户的抱怨，这可以为我们赢得几天的时间。

　　4、为这个bug标记一个无耻的时间
　　上帝啊，我希望这时间够了。

　　第三阶段：投入和沮丧

　　本阶段的状态：眼花Giddy、头晕Light-headed、紧张Nauseous。

　　1、开始调查
　　我能搞定它，我能搞定它！只需要小小的调整一下，小小的关注一下，多一点咖啡因，再加上一点时间，我能搞定它。

　　2、Befuddlement
　　Shit。这太扯了。我居然没有一点进展。这代码真是乱。这样的代码居然能编译和运行，真TMD的神奇，我有机会能搞清楚它什么不正常吗？

　　3、再次躲藏
　　你看，很对不起。我不得不要去切除我的阑尾。再一次，是的，既然你提到了它，我的确有两个阑尾。现在我一个也没有了，你高兴了吧？
