作为一个刚入门的Liunx爱好者，必须了解的Liunx基础知识有哪些？

　　1、Linux的文件系统

　　Unix的文件系统管理是极具特色的。NFS、UFS、TMPFS、VFS、PROC等各类文件系统均承担不同角色。Unix将硬盘、打印机等字符设备和块设备都以文件的方式管理起来，对这些设备的操作就如同访问一个文件。

　　2、什么是shell
　　shell是人机交互的字符界面。Unix中提供多种shell供使用者选择，例如RedHat中的bash、tcsh、ksh等，由不同的作者编写完成。在这些shell中，用户都可以输入命令完成系统管理、配置等任务；而在Solaris中，有sh、csh等。

　　3、Linux用户与用户登录

　　Linux是一个真正意义上的多用户操作系统，用户要使用该系统，必须输入用户名和密码，经系统验证无误后才可以登录系统使用。

　　Linux下有两种用户：

　　1）root用户：超级权限者和系统的拥有者，在Linux系统中有且只有一个root用户，它可以在系统中做任何操作。在系统安装时所设定的密码就是root用户的密码，该密码请牢记，并出于安全考虑，请定期修改。密码的保密性也要得到保证。

　　2）普通用户：Linux系统可以创建许多普通用户，并为其指定相应的权限，使其有限地使用Linux系统，如安装msyql时需要创建的mysql用户。用户通过本机的Xwindow或Telnet远程登录后，执行exit命令即可退出登录。

　　4、修改口令

　　为了更好地保护用户帐号的安全，Linux允许用户在登录之后随时使用passwd命令修改自己的口令。修改口令需要经历三步：

　　输入原来的口令，如果口令输错，将中止程序，无法修改口令；

　　输入新的口令；

　　重新输入一次新的口令，如果两次输入的口令相吻合，则口令修改成功。

　　5、用户的环境变量

　　环境变量定义了用户执行命令操作所需要的诸如命令路径、库路径、别名、字符集等等的内容。/etc/profile是缺省所有bash用户的环境变量文件。而用户home目录下的.bash_profile、.bashrc等文件是bash用户自己定义的环境变量文件。例如，ifconfig命令在/sbin目录下，如果不将/sbin路径加入到环境变量PATH中，那么每次执行这个命令，都需要输入/sbin/ifconfig。

　　不同shell的环境变量定义方式不同。bash采取赋值的方式，再export生效。

　　执行env命令可以查看当前用户使用的所有环境变量。

　　6、Linux文件与目录权限

　　在Linux系统中，每一个文件和目录都有相应的访问许可权限，分为可读、可写和可执行三种，分别以r、w、x表示，其含义为read、write、execute（目录的可执行指的可以进入目录）。每一个文件或目录的访问权限都有三组，每组用三位表示，如： d rwx r-x r--。

　　第一部分：这里的d代表目录，其它的有：- 代表普通文件，c代表字符设备文件；

　　第二部分：文件所有者的权限字；

　　第三部分：与文件所有者同组的用户的权限字；

　　第四部分：其它用户的权限字。

　　1）文件/目录权限设置命令：chmod [mode] 文件名

　　如果要对文件a.txt的权限要设置为rw-rw-r--，则转换成二进制数就是110 110 100，再每三位转换成为一个十进制数得到664，因此我们执行命令：

　　chmod 664 a.txt

　　表示a.txt文件属主和同组用户可读可写，其他用户只可读。

　　2）改变文件/目录的属主命令：chown [选项] 用户名：组名文件/目录名

　　其中最常用的选项是“R”，加上这个参数，可以将整个目录里的所有子目录和文件的属主都改变成指定用户。

　　7、Linux的Daemon

　　Daemon守护进程是指系统启动时需要加载的必要的服务和应用。如xinetd等。主要的守护进程在/etc/xinetd.d目录下，而/etc/init.d是在系统初始化的时候需要加载的进程，如syslogd、sendmail等。

　　例如，当我们telnet一个Linux主机时，xinetd监听23端口，当发现有连接请求时，xinetd启动telnetd守护进程，处理这个telnet连接。




一、系统信息 

arch 显示机器的处理器架构(1) 

uname -m 显示机器的处理器架构(2) 

uname -r 显示正在使用的内核版本 

dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) 

hdparm -i /dev/hda 罗列一个磁盘的架构特性 

hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 

cat /proc/cpuinfo 显示CPU info的信息 

cat /proc/interrupts 显示中断 

cat /proc/meminfo 校验内存使用 

cat /proc/swaps 显示哪些swap被使用 

cat /proc/version 显示内核的版本 

cat /proc/net/dev 显示网络适配器及统计 

cat /proc/mounts 显示已加载的文件系统 

lspci -tv 罗列 PCI 设备 

lsusb -tv 显示 USB 设备 

date 显示系统日期 

cal 2007 显示2007年的日历表 

date 041217002007.00 设置日期和时间 - 月日时分年.秒 



Linux安装性能问题解析
发布时间: 2012-7-26 10:12    作者: TerryLiang    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Linux 操作系统 

　　在硬件系统上安装Linux系统之前，需要考虑许多有助于优化操作系统以及日后在其运行的应用程序的性能问题。这些问题包括：

　　● 选择分区位置

　　● 使用多个硬盘驱动器

　　● 选择文件系统

　　Linux至少需要一个root分区和一个swap分区，这两个分区以及其他需要频繁访问的分区在磁盘上的安装位置最终会影响到系统的性能。

　　● 对于var、swap、/var、/usr和/home等分区，都分别使用单独的分区

　　● 大多数硬盘驱动器的盘片在外侧磁道上封装的扇区要多于内侧磁道，因此从外侧磁道上读取数据要快得多。通常将编号较低的分区安装到外部磁道上（例如，/dev/hda1比/dev/hda3更接近与硬盘驱动器的外侧边缘），因此首先要放置需要经常访问的分区

　　● 第一个分区应该是swap分区（用于优化内存交换操作）

　　● 第二个分区应该是/var，因为日志记录会频繁地写入/var/log中

　　● 下一个分区应该是/usr，因为基本的系统工具和命令都位于/usr中

　　● root和/home分区可以驻留在靠近硬盘驱动器末尾的位置

　　使用多个硬盘驱动器，并要充分利用多个硬盘驱动器。

　　● 将经常访问的分区安装到更快的硬盘驱动器上

　　● 如果这些硬盘驱动器的性能相近，那么将常用的分区分别安装在不同的硬盘驱动器上。例如，讲/var和/usr分区分别置于两个不同的硬盘驱动器上，而交换分区位于自己单独的硬盘驱动器上

　　● 为了最大话总线吞吐率，应该将每个充当主设备的硬盘驱动器安放到I/O通道上。硬盘驱动器在不同I/O通道之间移动后，其设备名称会发生变化，因此需要对文件系统表（/etc/fstab）进行相应改动。如果对包含root或/boot分区的硬盘驱动器进行移动，那么还需要编辑/boot/grub/menu.lst文件

　　文件系统类型

　　● ext4，ext3的改进版，提供更加的性能和可靠性，更为丰富的功能

　　● ReiserFS，对于小型文件具有更佳的性能

　　● XFS，针对大型文件具有更佳的性能




测试过程3步走
上一篇 / 下一篇  2012-07-27 22:41:42 / 个人分类：测试 

查看( 385 ) / 评论( 2 ) / 评分( 3 / 0 ) 
在我们公司，还是作坊式的开发，需求、设计基本没有，都是客户说几点要做的，其他都看开发人员的想象力。
这样在很少的需求文档，并且没有设计等内容的情况下，测试如何进行测试？
下面就以我近期测试的一个项目为例，说明在这种情况下，我如何处理这种情况。

我接手测试的是我们公司内部开发的一个项目管理系统，需求都是由项目管理部的经理提出，现有流程都是走的纸质单子，想把各个项目组的流程电子化。
我们测试并没有介入前期，所以直到交给我们，才看到具体的软件样子。
同期给我们的，只有数据库结构设计，其他莫有了。

开始第一轮测试。
第一轮测试，我主要是确认软件功能都是正确的。
项目管理软件，主要由3个部分组成，一是立项管理，就是销售或项目经理建立项目，指定项目经理，项目类型，预计人员，里程碑，项目回款等等。立项管理这里还有项目管理部等的审批，以及修改等内容。二是任务单，主要是确定做项目的人员，每个活动都对应到具体的人上面，根据人员计算项目花销。三是借款报销，主要就是在项目的框架内，进行直接借款或通过任务单借款和相应的报销。
功能算不上太复杂，大概6个大模块70个左右功能。
第一轮，主要是了解系统由哪些功能组成，而且确保每个功能的正确性。比如每次操作，我都会去查数据库，看是否数据进行了相应的变更，通过数据库的设计，可以更好的了解程序员是如何想的，程序是如何运作的。
每一个功能都需要进行了解和确认，比如立项的时候，有间接费用、直接费用、管理费、利润等等数据，每个数据都需要了解从哪里来的，以及如何计算，确保计算结果的正确性。
另外，收集需求的时候，他们既然把大部分的东西都写在自己的笔记本上，而不是整理出来，所以很多时候，都需要开发人员具体的解释。
总之，第一轮过后，我保证对数据库的每个表，每个数据都心里有数，知道每个操作会影响到哪里。

第一轮提出问题后，经过开发人员的修改，进入第二轮。
第二轮我不很关注功能，因为第一轮基本确认了所有的功能，保证其有效性，第二轮我主要从业务逻辑着手，发现其中可能存在的漏洞。
比如很多办理业务的过程中，需要先查询再办理，但是很多时候，查询结果只有入口，没有出口，这样随着项目的更新，查询就几乎失去了意义，因为很多都不是办理需要的。
还有像是任务单借款报销，这里并没有和任务单很好的结合，实际借款和任务单并没有太多关联。
这样的业务漏洞，在第2轮提出了很多。第二轮我所做的就是深入业务，了解各个业务是如何运作的，从整体上把握整个的项目。
在第2轮，终于从开发人员那里弄来了需求列表，上面都是项目管理部提出的对软件的要求，发现了很多不符合要求的地方，看文档日期，半年前的需求，一些确实是问题，一些后来在他们的笔记本上又变更了，其实后面第3轮，还要来了补充的需求，挤牙膏一样，很多东西他们自己都忘记有了。

第三轮我关注接口。
经过第二轮理顺业务，对整个系统应该熟悉了，就需要考虑一个地方变动，会对其他地方有什么影响。比如项目里面有客户，那么我把客户删除了，对项目有什么影响。
或者我提交了1个任务单，但是对此任务单多次借款和报销，是否会有问题。
另外就是磨一些比较细的地方，比如立项有4种类型，不同的类型对借款报销等的影响等等。第一轮也做过相应的测试，但是第3轮的时候，随着系统的熟悉，实际补充了很多的用例对可能有问题的地方做更细致的测试调整。

这样经过三轮测试，功能、业务、接口都没有问题了，剩下的就是慢慢的和开发磨了，很多时候一个问题经过多轮没有修改，或者原先一些问题没有发现，但实际都不影响大局。这个可能再经过3~5轮，项目就大概能收尾了。

测试用例我是第2轮才开始写的，因为刚接触软件的时候比较兴奋，还是第2轮沉淀和熟悉的时候，写用例更适宜，而且经过第2轮，软件很多地方有很大的调整，第一轮即使写了，也都需要变更。

还有就是一定要从业务的角度思考系统，功能是死的，但是为什么有这个功能，每个测试人员都需要了解。数据的流向也需要切实的把握，我是很喜欢用截图软件截图的，因为随时进行比对，看哪些内容有了变化。



软件测试是如何跟进和管理bug？
发布时间: 2012-7-23 10:56    作者: 吕书茹 抽屉(chouti)    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 

　　问题：一个软件每个版本存在的bug或多或少数百个。有的重复出现，有的新发现，有的一直没修复。真不知道测试部门是如何去管理和跟进这些bug...

　　精彩回答：

　　吕书茹：

　　理论上：

　　所提的BUG有版本号；稳定复现的BUG，下一个版本的时候回归已确认修复则可以关闭；不是稳定复现的问题需要观察连续3个版本未复现的可以关闭；偶然性的问题可以置成观察状态，持续观察。由于种种原因未能解决的问题，定期讨论做处理（修改或者pending）。复现的BUG只能reopen了

　　实际上：

　　BUG管理应该一直是QA很头疼的问题，不同的管理人员有不同的解决策略吧。很难做到尽善尽美吧。

　　抽屉（chouti）：

　　对于Bug的跟踪，一般来讲会采用 Bug tracking system 比如 Bugzilla， Bug free， 或者其他的任务管理系统中集成的相关模块。

　　当然，我也见过一些公司采用 Excel 甚至是邮件来管理、跟踪 Bug 的状态。

　　一般来讲，一个 Bug 的生命周期经历了新建 - 被指派（修复/Backlog）/不修复/判断为非Bug - 已修复（待测试确认）- 确认修复/确认未修复 这样的一些阶段。

　　缺陷跟踪软件一般会在缺陷的状态产生变化（或者有人添加了评论，虽然没有变更状态）时发送邮件告知相关各方（包括测试人员）。测试人员对这些变化做出相关的反应。

　　在缺陷得到修复之后，测试人员负责对新版本进行确认，如果确认修复了，则关闭缺陷，如果证实没有修复，则重新打开Bug，配合开发人员继续调查原因。

　　这里，对缺陷的管理有一个难点，既当系统内积累了相当数量的缺陷报告之后，新发现一个问题后，如果去系统内检索是否这是一个已知的问题（包括过去出现过，但是已经修复了的问题）的过程会耗费测试人员很大的精力，这一步最好需要做，在时间紧迫的情况下，我认为以报告缺陷为高优先级，即新建一个缺陷报告，而不是一味地去检索原先的那个。





QA可以发现什么样的缺陷？
发布时间: 2012-7-18 10:56    作者: livexmm    来源: 51Testing软件测试论坛  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： 软件测试 缺陷管理 

　　问题描述：

　　当开发人员的单元测试覆盖率达到100%时，QA可以发现什么样的缺陷？

　　精彩答案：

　　会员 livexmm：

　　单元测试一般是测试代码的严谨性，并且代码是否按照详细设计来做。如果详细设计过关，单元测试一般是以详细设计为基础设计，而不是以代码为基础。

　　恩，就说国内，一般很多公司开发软件都不会做详细设计，或者详细设计不够严谨，这个先不说，先按照出题者的思路来回答。

　　一般情况下单元测试覆盖率很难达到90%以上。既然题目说是单元测试覆盖率达到100%，那基本上想表达的意思应该是程序已经完完全全按照详细设计来做，并且代码逻辑上很严谨。

　　会出现问题的地方以及测试范围：

　　先细分一下单元测试包含的内容：软件在该单元模块的功能，画面显示与画面迁移（如果单元测试覆盖率只表示代码覆盖率，那这个测试点还是得测试）。

　　那么从这里我们就能确定剩下还需要进行的测试：需求合理性，模块间的集成，软件性能，软件可操作性，如果有必要还需要进行安全性测试。

　　各个测试范围内可能出现的问题：

　　需求合理性：

　　这里会出的问题就是需求没做好，我认为这个反倒是目前国内软件开发最有可能出现问题的地方。需求出现问题随之带来的需求变更有无数的谚语与语录可以供认调侃。严格的需求审核是保证这方面质量的一个关键。并且不能把原始业务需求与需求用例混为一谈。

　　另外，测试团队需要在这方面发现问题必须业务熟练，并且有一定的开发经验。所以如果是完全没基础的新项目，测试团队这方面能力又不足的话，还是别考虑吃这方面的肉了。虽然确实很诱人。但是一搞不好也很丢人。

　　模块间的集成：

　　这点严格来说属于详细设计没做好。比如接口间传递的数据不对，导致画面上显示的不正确，或者干脆造成下一个业务流程无法进行下去。保证这个方面没有问题主要靠详细设计的审核与测试团队的测试。

　　软件性能：

　　这里会出现的问题主要是由2部分组成。

　　1、代码。举个例子，一般公司都会有代码规范，并且规定数据库查询语句不允许写在循环内，但是有多少公司真正有QA，并且QA真正去追这方面的问题呢？实际上这里只需要开发人员之间的一个代码走查就能搞定了。

　　2、数据量过大。这个详细设计的时候就需要提一根弦，碰到查询页面不加个分页功能实在是不应该的。

　　还有诸如网络环境，硬件配置，业务人员操作习惯等等天灾人祸的原因太多了。不过就我实际碰到的情况，90%都是以上2点组成。另我很遗憾的是，我发现只要代码规范写得仔细，并且开发人员能够执行，很多性能问题不会出现。

　　当然，性能最终反馈的问题就是执行效率过慢！！想要保证性能，设计、开发、测试各个阶段都需要注意。

　　软件可操作性：

　　比如用户操作习惯的一致性，画面风格的一致性，页面简洁等等。这里主要还是一些操作习惯。如果是对用户体验比较重视的软件，那这方面到成了重点。这里会由测试团体负责，客户体验也占了很大一部分。

　　安全性：

　　安全性么，比如SQL注入，加密，文件上传与下载，网络环境的配置。涉及不多，就不多说了。


如何写一份良好的缺陷（Bug）报告
发布时间: 2012-7-17 10:13    作者: 刘志军 编译    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 

　　没错，任何软件都存在bug，哪怕是我们自己也存在缺陷，因为程序员也是普通人，人是会犯错误的。当有人在使用软件时遇到bug，你需要使用邮件形成一份缺陷bug，发送给开发人员。开发者可以依据该报告定位问题，复现问题，修复问题。

　　但是很多时候，开发人员很难理解提交上的缺陷报告，因为发送人并不了解我们需要的是什么，那如何与开发人员沟通以及如何写出一份缺陷报告，在这篇文章，我将教你如何写出一份清晰的缺陷报告能使开发者理解、复现、修复问题，这里下载缺陷报告模板。



　　为什么要发送缺陷报告

　　缺陷报告可以用很多方式来帮助我们的开发者。

　　● 他们能告知我们没有意识到的问题

　　● 他们能发现我们可能还没想到的新特性

　　● 他们能帮助我们感受到客户是如何使用我们的软件，以至于我们可以做的更好

　　没有这些缺陷报告，我们就不知道出错的地方，我们需要它就像你唱歌跳舞时需要有软件的支持一样。

　　什么时候发送缺陷报告

　　● 简单来说就是越快越好，详细来说就是：

　　● 当你看到一个错误消息时就发送错误报告

　　● 当屏幕是空白或者数据缺失就发送报告

　　● 当程序没有出现预期的结果时发送报告

　　● 当程序崩溃、死机、没有响应或者响应很慢时发送报告

　　● 当程序返回错误结果时发送报告

　　● 当你得不到想需要的结果时发送报告

　　● 如果你不清楚怎样做时发送报告

　　● 如果你不喜欢软件做的方式，或者软件老打搅你时，发送错报告

　　● 如果你想在系统中实现一个变通方案时发送报告

　　缺陷报告需要有哪些内容

　　缺陷报告应该包含很多信息，你提供的信息越多效果越好，对于开发者，就像我，提供一个纯文本文件模板给你填充然后邮件发给我，当然也有表格形式的，但是最期待你自己杜撰一份然后发给我。下面是一些必须包括的部分以及如何写好每部分：

　　标题：创建一个简短的标题，让问题看起来更清晰。“应用崩溃”是一个很恼人的标题因为它没有足够的信息包括在这份报告里面。取而代之的是标题应该包含错误消息和消息码，或者是结果的名称以及失败时你正在做的事情。例如：Error 402：访问拒绝当点击“发送邮件”这个例子就提供了缺陷系统的上下文信息。

　　差：“程序崩溃”，“报错”，“Bug”

　　好：“从’Kifu’中打印时5C79错误”，“’Kifu honors’报表为空”

　　产品：用名称标识产品，告知你使用的是哪个版本。绝大部分软件都包含有版本信息。web应用的版本信息通常在页脚。

　　差：“你的应用”

　　好：”Kifu v1.01″
平台：告诉我们软件运行在什么平台。尤其是操作系统的名字及版本和游览器名称版本。特别是web应用，这些信息对我们很重要。

　　差：“Windows”

　　好：“Windows7，IE9”

　　是否能重现：有些恼火的Bug是间歇性的出现，我们想预先知道，如果我们正在处理一个灵异事件或者正逢Bug出现时。

　　差：留空白

　　好：“每次”，“偶然”，“不重现”

　　描述：这部分是很多人拿不定的地方，不知道怎么描述问题，在描述中做到包括下面的内容：

　　● 总结：用简洁的语言概括出Bug出现时你正在做的事情。从上下文开始，在操作应用的哪个部分。聚焦在你做的时候软件做了什么？

　　差：“系统不能用了”

　　好：在“honor report”页面单击“打印按钮”，但是报表是空的。

　　● 发生了什么：一步一步描述你做的事情当bug出现时，为什么你认为是错误的。事无巨细，打印出菜单的名称，页面标题，点击时的按钮或者链接的名称。做相同的操作是不是出现一样的错误。

　　差：“空白报表”

　　好：“点击 ‘File/Save as…’，’Save‘对话空弹出，然后点击‘OK’按钮，但是文件没有保存”

　　● 错误时什么：如果错误消息出现时，拷贝粘贴整个信息，这样更有利于我们跟踪错误。

　　差：“有个错误，点击它始终读不出”

　　好：“Error 403：访问拒绝”

　　● 复现的步骤：如果你可以让bug重现，那太好了，这能提供很大的帮助。一步步描述如何重现次bug。

　　差：“打印没法使用”

　　好：“从‘Honors Report’页面，点击‘打印按钮’”

　　● 预期结果：描述你预期发生的结果当bug发生时，这部分特别有用如果程序没有按照你期待的结果发生时，因为它很诡异。

　　差：“我期待能正常工作”

　　好：“我期待能看到‘Honors Reports’的PDF文件”

　　真实结果：当bug发生时是怎么发生的，什么错误，为什么有错，或者如果错误抛出，抛出什么错。

　　差：“没法用”

　　好：“我收到是空的PDF文件，或者’403错误，访问拒绝’”

　　● 附件：如果你知道怎么截屏，做吧，附上一个简短的错误，截屏可以是错误之前或者发生错误之后，我们的开发者能够看到究竟发生了什么。如果应用有崩溃的日志，同样附上它。

　　● 联系方式：附上你的名字和email，我们可以让你提交的报告及时的得到答复，在我们不理解问题的描述时还能够询问你，如果你忘记附联系方式了，我们也就没法联系到你，也没法修复bug。



如何弱化因不同软件测试人员测试而引发的BUG率上涨的现象？
发布时间: 2012-7-04 11:56    作者: livexmm    来源: 51Testing软件测试论坛  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： Bug 软件测试 缺陷管理 测试工程师 

　　问题描述：

　　如何弱化因不同测试人员测试而引发的BUG率上涨的现象？

　　精彩答案：

　　会员 livexmm：

　　想了想，如果测试人员变更导致BUG数量增加主要也就2个原因：

　　1、提交了重复的BUG报告。

　　这主要和任务分配，缺陷管理等有关系。

　　任务分配出现的问题一般是测试用例审核不严格，导致用例有效性下降，从而测试部门本身对自己的用例没有信心，最终导致换个人测试就要换用例。最后结果么就是测试了重复的模块，如果缺陷管理也不过关么就会出现提交重复BUG的情况。

　　解决办法：

　　● 增加用例的审核力度，加强用例的可用性、合理性与可重复性。

　　● 加强缺陷管理。这是建立在测试用例合理可用的情况下，确保每一个缺陷都有对应的来源于测试依据。像很多测试工具（比如CQ）都有这种测试思路，不要因为图方便而让自己增加更多的工作量。

　　2、软件确实有这些BUG。

　　这里也包含一些无效BUG的情况我放在一起说。

　　一般情况下测试是无止境的，总归能测出各种缺陷，这个主要是和测试阶段和测试方式有关。

　　比如你的软件经过了严格的功能测试，能够保证所有的功能有效并且没有任何业务逻辑上的缺陷。但是说不定一个简单的画面验证就能发现画面上输入金额的地方能够输入汉字。

　　如果2个测试人员，一个进行了很严格的功能测试，而忽略的画面测试的话，那自然换个人就能测出一堆问题。从测试原则上来说这确实没错，但是从开发计划上来说这就是无法忍受的。开发或者领导就会认为测试部门没有认真测试，而测试人员却觉得很冤枉。

　　解决办法：

　　想减少这方面的BUG最好能先分清楚该软件不同的测试阶段，由此来分配测试任务。尽早的规划出自己的测试目标，并且在测试用例和测试计划中体现。

　　所以负责设计测试计划的人一定需要对软件工程有一定理解。这样在设计自己的测试计划时心里才有谱，哪些测试我们需要做，哪些不需要做。根据开发模式还得考虑在哪个阶段做哪些测试。

　　举个例子，比如开发部门刚把一个软件的基本功能做好，想让测试部门测试一下功能方面的问题，然后画面就随便做了个让测试能先用起来。结果测试部门重点测了画面，发现一堆问题。你说这些缺陷开发会认吗？

　　如果能够很清楚的分清楚该阶段我们应该做什么类型的测试，还出现换个人就发现大量BUG，那就得好好检讨一下自己是否有认真的审核了之前哪个测试人员设计的测试用例了。








clock -w 将时间修改保存到 BIOS 
