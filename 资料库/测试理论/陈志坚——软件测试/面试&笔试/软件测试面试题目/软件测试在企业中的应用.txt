软件测试的职责
发布时间: 2012-7-26 11:30    作者: 薛定谔的破猫    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： 软件测试 测试工程师 

　　以前，我是个开发人员。我不喜欢这个工作，无尽的压力让我疲惫。我几乎从未感觉到自己的工作做得足够好。我从未有过真正的休息。如果我没做好，我们就可能超过最后期限，或者是打包了一个垃圾产品。经历了这些之后，成为一个测试管理者感觉就像是休假一样。

　　测试同开发比起来，是一个非常模糊的工作――有很多的余地。我要做的仅仅是找问题。

　　我曾经认为测试的职责就是找问题。

　　找问题很简单，但是时间长了就会发现这样很难让人满意。我想让产品变得更好。

　　我曾是Apple一个400人团队中的众多测试专家之一。由于团队名称是软件质量保证（Software Quality Assurance），我们在质量保证（QA）上的讨论过比测试还多。一个管理者推荐了一本书，Philip Crosby的Quality Without Tears，以此来帮助我们看到自己在产品开发过程中更深层次的职责。这本书提到了“零缺陷”，于是我转向了缺陷预防这一理念。“质量不是测出来的”是我们的口号。

　　我曾经认为测试的职责是保证质量。

　　但是，测试人员并不能真正的保证质量。首先，完美的质量本身就是不可及的目标。质量有多个方面，其中的一些就是冲突的。其次，测试人员并不创造质量，所以保证质量这样的职责并不在我们的能力范围之内。如果我们把自己想象成质量把关者，团队的其他人就有可能倾向于为质量少承担一些责任，他们会认为有QA在保证着质量――这样如果产品不是很好，我们就会承担主要责任。

　　除此之外，许多QA是通过定义流程和审查流程的执行来发挥作用。问题是，这样的一个方式很容易就会沦为关于质量的说教，在响亮的口号和常见的“好的质量是好的，不好的质量是不好的”式的争论中，QA所有的优点都看不见了。这就是为什么很多开发人员把QA视为耳边的噪音――只会另他们分心。

　　而我，从这种招人烦的角色中被解救了出来。经理把我叫到一边，告诉了我一个大秘密：一切都是为了风险――不必追寻完美，只需找到一个足够好的东西就够了。这样就把测试和质量保证转变成了一种项目的雷达，寻找敌人。我们在项目中是要快速的找到重要的问题，而不是每一个历史阶段中的每一个旧问题。

　　这深深的改变了我的思想。我不再像以前那么关注要在测试中达到尽可能全面的覆盖，而是关注哪一部分真正需要测试，并评估未知问题的风险。

　　考虑风险使测试人员在项目中更加容易与其他人相处。关于质量的讨论变成了判断哪些有影响，而不是纠结于谁想要完美。

　　我曾经认为测试的职责是分析风险。

　　风险是很重要，但它仍然是一种抽象的概念，而且悲观。一个开发经理跟我说他不喜欢谈论风险。“风险听起来很消极。我们不是保险公司理赔员，我们是企业家。我们勇于冒险。”他说的很在理。回报才是项目最重要的部分。难道对于测试，就找不到一个更全面和积极的观点了？

　　当然，测试的目的的确是发现问题、分析风险、以及保证质量，但是还有一种更本质的方式来看待我们的职责：我们照亮道路。没有测试，项目在黑暗中乱撞、被障碍绊倒、最后跌下悬崖。而测试会在需要的地方点亮火把，来帮助开发人员和管理者知道他们在哪、他们要去哪、还有他们什么时候能到达。

　　现在，我认为测试的职责是提供重要信息，来协助创造和运营优秀的产品。这包括了发现问题、保证质量、分析风险、以及其他任何能够帮助团队了解当前状况的方式。




不管是文档化的测试用例，还是存在于测试人员头脑中的测试想法和思维，针对测试对象的分析和设计都是整个测试过程的重要测试活动之一。在进行测试分析和设计之前，测试人员首先需要确定测试的需求来源，即测试用例设计需要参考哪些测试依据文档？

　　测试用例设计的输入文档是什么？测试人员头脑中第一个蹦出的参考依据就是需求规格说明。确实，需求文档是我们测试设计的最主要参考文档。但是，由于时间限制、成本限制和个人能力限制等方面的原因，提供完备的需求规格说明几乎是不可能的。现实情况是，需求规格说明常常是不全的、模糊的，甚至是错误的。

　　因此，测试设计中仅仅参考需求规格说明是不够的，测试人员需要从更广的范围来定义测试用例设计的参考来源。图1是作者提出的测试用例设计的参考输入的主要来源架构图。



图1 测试用例设计的参考输入的主要来源

　　除了软件产品相关的的开发文档之外，测试人员还需要收集来自用户的需求、与产品相关的标准与规范、以前类似产品的需求、测试团队的经验知识库，以及其他的一些隐现需求等。通过收集和分析这些参考输入来源，测试人员才能不断提高测试的覆盖率和质量。

　　1）开发文档

　　开发文档是测试人员进行测试用例分析与设计的最直接且必不可少的主要来源。这里的开发文档是一个统称，不同组织对其的称呼不同，包含了系统需求规格、概要设计规格、详细设计规格等不同的开发文档。

　　2）用户需求

　　软件测试同时包含了验证（Verification：Do you build the product right？）与确认（Validation：Do you build the right product？）两方面的工作。验证主要基于系统需求，来验证测试对象是否按照需求的定义实现了其中的功能和特性。而确认主要从用户的角度，保证经过测试的产品是真正客户所需要的，而不仅仅是了满足了系统的需求。因此，测试不仅仅是面向开发的，同时也应该关注面向用户。

　　用户需求可以来自各个方面，例如早期产品系统人员与客户直接沟通获取的需求、从产品技术支持人员和市场人员了解到的客户要求，以及从用户现场反馈的针对产品的缺陷和要求等。

　　3）标准与规范

　　针对特定的软件产品，不同标准组织和行业都制定了不同的标准和规范，而这些参考资料是开展测试分析和设计的又一个重要输入。例如电信产品相关的ITU-T标准、IEEE标准、RFC文档、国家电信行业规范等。

　　4）类似产品需求

　　随着软件产品越来越复杂，行业内采用增量-迭代开发模型的场合越来越多，例如敏捷开发。测试人员经常面临的软件产品是基于已有的系统之上，即测试对象是基于以前版本的功能增加、缺陷修复、平台移植等变更基础之上。因此测试人员需要分析历史测试是否全面，测试对象变更是否影响以前运行的软件版本等。基于这些信息，测试人员可以获取新的测试需求。

　　5）测试经验知识库

　　测试并不是存在编码之后的一个阶段，测试应该贯穿于整个软件开发生命周期。类似于开发过程改进一样，测试也应该是PDCA（戴明质量环）的过程。因此，不同项目中的测试经验是每次测试用例设计的重要输入。通过测试经验知识库，测试团队的测试经验和技能才能在整个组织中共享。

　　测试经验知识库可以来自测试执行的经验、测试过程中发现的缺陷分析和分类、用户反馈的缺陷分析和分类等。

　　6）其他隐现的需求

　　测试用例设计的参考输入，除了上面提到的一些来源之外，测试人员还需要考虑其他一些隐现的需求来源：

　　（1）不同产品利益相关者针对测试对象中间版本的变更而达成的备忘录；

　　（2）已经发布的用户使用风格指南和用户接口标准等；

　　（3）和不同的利益相关者，例如：开发人员、用户和技术专家等面谈得到的备忘录或者邮件内容等；

　　（4）通过杂志、网络等查找类似测试对象产品的一些常见缺陷、失效，以及测试对象支持功能在用户现场使用的讨论。




性能测试在软件企业的应用
发布时间: 2012-7-16 10:35    作者: 于涌    来源: 51Testing软件测试网采编  

字体:  小  中  大  | 上一篇 下一篇 | 打印  | 我要投稿  | 推荐标签： 性能测试 软件测试 

　　随着软件行业的不断发展，越来越多的企业更加重视产品的质量。性能测试已经成为软件质量保障的一个重要因素。一个软件性能的优劣很有可能直接决定一个软件的成败，甚至一个企业的兴衰。每个软件企业都有各自不同的应用领域，有着不同的实际情况，这样必然要求每个企业量体裁衣，选择适合自己的应用策略。

　　大型企业、大型项目的应用策略

　　大型企业应用的软件系统，业务比较复杂、用户数很多、存在并发情况、业务的响应时间、操作的实时性、稳定性、安全性、可恢复性等都要求很高。

　　象银行、电信、铁路等大型企业一般通过CMMI、ISO等认证，企业拥有先进的管理模式、人员储备丰富、实力雄厚，在涉足的领域基本处于不可撼动的地位。这些行业对性能的要求很高。在此仅举一个铁路售票系统的例子：每逢春节、五一、十一，相信坐火车回家探亲或度假的朋友一定身有体会。在火车站、车票零售点，人海茫茫，一望无际，此时火车售票系统正在经受着巨大的性能考验。全市几百个售票网点同时紧张忙碌工作。售票过程一般分为两步，首先根据购票者提供的要出行的日期、车次和目的地进行相关查询，然后在有票的情况下，收取现金，打印出相应的车票交付给购票者。一个看起来简单的两个步骤，但当成百上千的终端同时执行时，情况就复杂了。如此众多的交易同时发生，对应用程序本身、操作系统、中心数据库服务器、中间件服务器、网络设备的承受力都是一个严峻的考验。由这些行业的性质决定了决策者不可能在发生问题后才考虑系统的承受力， 预见并发承受力， 是这些行业应该考虑的一个很重要的问题。

　　鉴于大型企业资金雄厚、管理规范、人员分工明确，笔者认为主要可以有两种方式解决大型企业的性能测试问题。

　　解决方案一：构建自己的性能测试团队

　　组建由性能测试专家、数据库专家、网络专家和系统软件管理员以及资深的程序员（有的公司还有业务专家）构成的性能测试团队。性能测试团队是一个独立的部门，在进行性能测试时，需要制定详细的性能测试计划、测试设计、测试用例，而后依据测试用例执行性能测试、分析性能测试结果，提出性能调整建议、书写性能测试总结报告。在工具的选用方面，建议选择商业性能测试工具，强大的功能、丰富的统计分析项、而且象Mercury LoadRunner和IBM Rational Performance Tester等工具还提供了专门的插件可以集成到IDE中，做粒度很细的工作，如看某个算法的执行时间、某个存储过程的执行时间、甚至某个语句的执行时间等。这些优势无疑为专家们定位系统问题提供了很好的依据。

　　解决方案二：专业性能测试机构为系统测试

　　如果企业没有自己的性能测试部门，请专业的性能测试机构为系统做测试也不失为一个好办法。专业软件测试机构具有成熟的测试流程和测试方法，由有丰富的工作经验的性能测试工程师进行测试并提交专业的性能分析报告，可极大地提高测试有效性，同时企业不需为维护性能测试而保留的由各方面专家组成的部门人员的高额费用（这种情况在很少进行性能测试的企业尤为重要）。还可保证测试的独立性、公正性，避免了部门之间产生矛盾或磨擦。

　　中型企业、中型项目的应用策略

　　中型应用的软件系统，业务比较复杂、用户数较多、存在并发情况，对业务的响应时间、稳定性等都有一定的要求。

　　中型企业一般通过ISO认证，企业拥有比较先进的管理模式、有一定的人员储备、较强实力，在涉足的领域有比较有名气，对性能的要求比较高。在此仅举一个汽车配件查询系统的例子：该系统提供近千家的汽车配件信息，通常有50－120人在线。用户操作的最多的就是查询厂家及其配件信息的操作。这是一个典型的中型项目。用户并发数量不是很大，涉及到频繁的查询操作，对系统的响应时间和系统的稳定性要求比较高。

　　鉴于中型企业有较强实力、管理较规范、有一定的人员储备，笔者认为主要可以有三种方式解决中型企业的性能测试问题。

　　解决方案一：临时组建性能测试团队

　　在测试部门和开发部门临时组建由资深的程序员、资深的测试员、数据库专家、网络专家和系统软件管理员构成的性能测试团队。性能测试团队不是一个独立的部门，分别由隶属于开发、测试等部门的专家构成。在进行性能测试时，需要制定详细的性能测试计划、测试用例，而后依据测试用例执行性能测试、分析性能测试结果，提出性能调整建议、书写性能测试总结报告。在工具的选用方面，建议选择商业性能测试工具，购买单协议的Mercury LoadRunner、IBM Rational Performance Tester等工具。也可以选择开源的性能测试工具，如：Jmeter 、 OpenSTA等。还可以选择免费的性能测试工具，如：Microsoft Web Application Stress Tool 或 Microsoft Application Center Test 。但是无论是开源工具还是免费的测试工具，因为这些工具为非商业工具，它们使用的熟悉过程时间长、统计分析项不是十分丰富以及产品的后期升级和技术支持没有保证都应该成为企业考虑的内容。




