2011-04-22
测试的含义：
首先是一项活动，在这项活动中某个系统或组成的部分将在特定的条件下运行，结果将被观察和记录，并对系统或组成部分进行评价。

对软件测试的定义有两种描述：
定义1：软件测试是为了发现错误而执行程序的过程
定义2：软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计的一批测试用例，并利用这些测试用例运行程序以及发现错误的过程，即执行测试步骤。


测试结果：
找出缺陷和故障
显示软件执行正确


软件测试：
使用人工或自动化手段，来运行或测试某个系统的过程，
其目的:在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别（IEEE）。


需要5~6返工

软件测试的目的：
  目的		根本目的
查找错误――》发现 修改缺陷
满足需求――》用户的满意程度
发现新大陆――》优化软件品质

************************************************

软件测试的对象：

1、需求规格说明；
2、概要设计；
3、详细设计；
4、源程序；


测试：静态测试
      动态测试


软件测试的分类：

测试组织：
	开发方测试，
	用户测试，
	第三方测试

测试用例设计方法：
		黑盒测试法，
		白盒测试法，
		灰盒测试法

测试策略与过程：
		单元测试，（开发部）
		集成测试，（回归测试――》如果不行要重回单元测试）
		系统测试，
		验收测试，（要求客户参与）

基本要求和适用要求(测试的角度)
				功能测试，
				性能测试，
				界面测试，
				易用性测试，
				兼容性测试，
				安全性测试，
				安装测试


软件测试的生命周期：

计划，需求――》设计，编码，测试――》运行维护――》淘汰停用


软件测试的八条原则：

1、尽早的及时的进入测试
2、测试前应准备好测试数据和与之对应的预期结果这两部分
3、测试输入数据应包括合理的输入条件合不合理输入条件
4、程序提交测试后，应当由专门的测试人员进行测试
5、严格执行测试计划，排除测试的随意性
6、应对每一个测试结果做全面的检查
7、充分注意测试当中的群体现象
8、保存测试计划，测试用例，出错统计和最终分析报告，为维护工作提供充分的资料

*******************************************************************

软件测试的误区：

误区一：软件测试技术要求不高，至少比编程容易多了
误区二：若发布的软件有质量问题，那是软件测试人员的错
误区三：软件测试是测试人员的事，与开发人员无关
误区四：根据软件开发瀑布模型，软件测试是开发后期的一个阶段
误区五：有时间就多测试一些，来不及就少测试一些
误区六：软件测试是非建设性的工作，甚至是破坏性的，测试中发现错误是对责任人工作的一种否定

*******************************************************************

软件开发模型（Software Development Model）：指：软件发布全部过程，活动和任务的结构框架。

软件开发包括需求，设计，编码和测试等阶段，有时也包括维护阶段

常见的软件开发模型有：
瀑布模型，演化模型，螺旋模型，喷泉模型，智能模型，敏捷开发模式等。

****************	瀑布模型	***************

瀑布模型：
该模型给出了固定的顺序，将生存期活动从上一个阶段向下一个阶段逐级过渡，如同瀑布流水，最终得到所开发的软件产品，投入使用。

瀑布模型的的特点：
？
？
？
立项分析――》需求分析――》设计――》编码――》测试――》运行维护

瀑布模型的问题（缺点）：
1、各阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量
2、由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增强了开发的风险
3、早期的错误可能要等到开发后期的测试阶段才能发现，进而带来严重的后果

**********************	V模型	********************

V模型的特点：
V模型即快速应用开发模型
1、是属于线性顺序一类的软件开发模型
2、它的开发活动是按时间顺序进行的，而相应的测试活动顺序刚好相反
3、它通过使用基于构件的开发方法来缩短产品的开发周期，提高开发的速度
4、成功的应用V模型，主要体现在设计测试用例的时机

缺点（弱点）：可能导致系统设计差，效率低，难于维护

V模型
（开发人员 测试人员参与评审  需求说明《----------------------------------（测试人员参与测试 客户验收
				概要设计《----------------------------系统测试）
					详细设计《---------------集成测试）
						编码    单元测试
调试一一对应


快速原型模型(步骤)：
1.构建快速原型，实现客户需求
2.在快速模型的基础上开发实现满意产品

与瀑布模型的区别：
减少由于软件需求不明确带来的开发风险，具有显著效果



螺旋模型（大型项目）
需求分析--》风险分析--》设计编码――》测试评审-->需求分析



**************************************************************************

2011-04-25

**************************************************************************

黑盒测试案例的设计：(目的:用少量的测试用例达到100%的覆盖效果）

测试案例设计方法：
边界值: 即采用定义域或者等价区间的边界值进行测试
等价类: 在众多组合中一个最优子集的挑选过程
决策表: 严格描述不同条件集合下采取行动的若干组合
因果图: 考虑多个输入之间的相互组合，相互制约关系


等价类划分方法：

有效等价类:
对于程序的需求说明来说是合理的，有意义的输入数据所构成的集合

目的：利用它可以检验程序是否实现了预期的功能和性能

无效等价类：
对于程序的需求说明来说是不合理的,没有意义的输入数据所构成的集合

目的：利用它可以检验程序对于无效数据的处理能力




**************************************************************************

2011-04-25

**************************************************************************
Web测试：
	功能测试
	性能测试
	界面测试
	安全性测试
	兼容性测试
	容错性测试



功能测试：
-------------------
1、链接测试
2、表单及数据校验测试
3、cookies测试
4、数据库一致性
5、业务流程




性能测试
--------------------------
1、连接速度测试
    界面转换时间。在从一个界面通过树型结构或者链接转到另一个界面的时候，页面需要等待的时间是多少。过慢的时间会导致页面的浏览用户失去等待的耐心。

2、登陆速度测试    
    用户登录的速度测试。用户在使用功能之前需要进行登录，如果登陆时间异常，同样会使用户失去等待的耐心。

3、负载测试:
    为了测量Web系统在某一负载级别上的性能，以保证Web系统在需求范围内能正常工作；负载级别可以是某个时刻同时访问Web系统的用户数量，也可以是在线数据处理的数量。
    例如：Web应用系统能允许多少个用户同时在线？如果超过了这个数量，会出现什么现象？Web应用系统能否处理大量用户对同一个页面的请求？ 

4、压力测试
    进行压力测试是指实际破坏一个Web应用系统，测试系统的反映。压力测试是测试系统的限制和故障恢复能力，也就是测试Web应用系统会不会崩溃，在什么情况下会崩溃。
    黑客常常提供错误的数据负载，直到Web应用系统崩溃，接着当系统重新启动时获得存取权。
    压力测试的区域包括表单、登陆和其他信息传输页面等。

	
界面测试
-----------------------
1、导航测试

    导航是否直观？Web系统的主要部分是否可通过主页存取？Web系统是否需要站点地图、搜索引擎或其他的导航帮助？导航是否足够准确？
    导航的另一个重要方面是Web应用系统的页面结构、导航、菜单、连接的风格是否一致。确保用户凭直觉就知道Web应用系统里面是否还有内容，内容在什么地方。 
    Web应用系统的层次一旦决定，就要着手测试用户导航功能，让最终用户参与这种测试，效果将更加明显。

2、图形测试

（1）要确保图形有明确的用途，图片或动画不要胡乱地堆在一起，以免浪费传输时间。Web应用系统的图片尺寸要尽量地小，并且要能清楚地说明某件事情，一般都链接到某个具体的页面。
（2）验证所有页面字体的风格是否一致。
（3）背景颜色应该与字体颜色和前景颜色相搭配。
（4）图片的大小和质量也是一个很重要的因素，一般采用JPG或GIF压缩，最好能使图片的大小减小到 30k 以下
（5）最后，需要验证的是文字回绕是否正确。如果说明文字指向右边的图片，应该确保该图片出现在右边。不要因为使用图片而使窗口和段落排列古怪或者出现孤行。

3、内容测试

	内容测试用来检验Web应用系统提供信息的正确性、准确性和相关性。
	信息的正确性是指信息是可靠的还是误传的。例如，在商品价格列表中，错误的价格可能引起财政问题甚至导致法律纠纷；信息的准确性是指是否有语法或拼写错误。这种测试通常使用一些文字处理软件来进行，例如使用Microsoft Word的"拼音与语法检查"功能；信息的相关性是指是否在当前页面可以找到与当前浏览信息相关的信息列表或入口，也就是一般Web站点中的所谓"相关文章列表"。
	对于开发人员来说，可能先有功能然后才对这个功能进行描述。

4、表格测试

    需要验证表格（不要产生横向滚动条，页面宽度推荐：1000px）是否设置正确。用户是否需要向右滚动页面才能看见产品的价格？把价格放在左边，而把产品细节放在右边是否更有效? 每一栏的宽度是否足够宽，表格里的文字是否都有折行？是否有因为某一格的内容太多，而将整行的内容拉长?

5、整体界面测试

    整体界面是指整个Web应用系统的页面结构设计，是给用户的一个整体感。例如：当用户浏览Web应用系统时是否感到舒适，是否凭直觉就知道要找的信息在什么地方？整个Web应用系统的设计风格是否一致？ 
    对整体界面的测试过程，其实是一个对最终用户进行调查的过程。一般Web应用系统采取在主页上做一个调查问卷的形式，来得到最终用户的反馈信息。
    对所有的用户界面测试来说，都需要有外部人员（与Web应用系统开发没有联系或联系很少的人员）的参与，最好是最终用户的参与。

    采取措施：手动测试，参与人员最好有外部人员


	
兼容性测试
--------------------------
1、平台测试

    市场上有很多不同的操作系统类型，最常见的有Windows、Unix、Macintosh、Linux等。Web应用系统的最终用户究竟使用哪一种操作系统，取决于用户系统的配置。这样，就可能会发生兼容性问题，同一个应用可能在某些操作系统下能正常运行，但在另外的操作系统下可能会运行失败。 
    因此，在Web系统发布之前，需要在各种操作系统下对Web系统进行兼容性测试。

2、浏览器测试

    浏览器是Web客户端最核心的构件，来自不同厂商的浏览器对Java，、JavaScript、 ActiveX、 plug-ins或不同的HTML规格有不同的支持。例如，ActiveX是Microsoft的产品，是为Internet Explorer而设计的，JavaScript是Netscape的产品，Java是Sun的产品等等。另外，框架和层次结构风格在不同的浏览器中也有不同的显示，甚至根本不显示。不同的浏览器对安全性和Java的设置也不一样。
    测试浏览器兼容性的一个方法是创建一个兼容性矩阵。在这个矩阵中，测试不同厂商、不同版本的浏览器对某些构件和设置的适应性

3、分辨率测试
   
    页面版式在 640x400、600x800 或 1024x768 的分辨率模式下是否显示正常? 字体是否太小以至于无法浏览? 或者是太大? 文本和图片是否对齐?	

4、Modem/连接速率

    是否有这种情况，用户使用 28.8 modem下载一个页面需要 10 分钟，但测试人员在测试的时候使用的是 T1 专线? 用户在下载文章或演示的时候，可能会等待比较长的时间，但却不会耐心等待首页的出现。最后，需要确认图片不会太大。	

5、打印机

    用户可能会将网页打印下来。因此网也在设计的时候要考虑到打印问题，注意节约纸张和油墨。有不少用户喜欢阅读而不是盯着屏幕，因此需要验证网页打印是否正常。有时在屏幕上显示的图片和文本的对齐方式可能与打印出来的东西不一样。测试人员至少需要验证订单确认页面打印是正常的。	

6、组合测试

    最后需要进行组合测试。600x800 的分辨率在 MAC 机上可能不错，但是在 IBM 兼容机上却很难看。在 IBM 机器上使用 Netscape 能正常显示，但却无法使用 Lynx 来浏览。如果是内部使用的 web 站点，测试可能会轻松一些。如果公司指定使用某个类型的浏览器，那么只需在该浏览器上进行测试。如果所有的人都使用 T1 专线，可能不需要测试下载施加。(但需要注意的是，可能会有员工从家里拨号进入系统) 有些内部应用程序，开发部门可能在系统需求中声明不支持某些系统而只支持一些那些已设置的系统。但是，理想的情况是，系统能在所有机器上运行，这样就不会限制将来的发展和变动。

    采取措施：根据实际情况，采取等价划分的方法，列出兼容性矩阵



安全测试
------------------
    即使站点不接受信用卡支付，安全问题也是非常重要的。Web 站点收集的用户资料只能在公司内部使用。如果用户信息被黑客泄露，客户在进行交易时，就不会有安全感。

1、目录设置―如何寻找路径的所在地
    Web 安全的第一步就是正确设置目录。每个目录下应该有 index.html 或 main.html 页面，这样就不会显示该目录下的所有内容。我服务的一个公司没有执行这条规则。我选中一幅图片，单击鼠标右键，找到该图片所在的路径"…com/objects/images"。然后在浏览器地址栏中手工输入该路径，发现该站点所有图片的列表。这可能没什么关系。我进入下一级目录 "…com/objects" ，点击 jackpot。在该目录下有很多资料，其中引起我注意的是已过期页面。该公司每个月都要更改产品价格，并且保存过期页面。我翻看了一下这些记录，就可以估计他们的边际利润以及他们为了争取一个合同还有多大的降价空间。如果某个客户在谈判之前查看了这些信息，他们在谈判桌上肯定处于上风。

2、登录
	    有些站点需要用户进行登录，以验证他们的身份。这样对用户是方便的，他们不需要每次都输入个人资料。你需要验证系统阻止非法的用户名/口令登录，而能够通过有效登录。用户登录是否有次数限制? 是否限制从某些 IP 地址登录? 如果允许登录失败的次数为3，你在第三次登录的时候输入正确的用户名和口令，能通过验证吗? 口令选择有规则限制吗?  是否可以不登陆而直接浏览某个页面？
    Web应用系统是否有超时的限制，也就是说，用户登陆后在一定时间内（例如15分钟）没有点击任何页面，是否需要重新登陆才能正常使用。

3、日志文件

	在后台，要注意验证服务器日志工作正常。日志是否记所有的事务处理? 是否记录失败的注册企图? 是否记录被盗信用卡的使用? 是否在每次事务完成的时候都进行保存? 记录IP 地址吗? 记录用户名吗?



接口测试
-----------------
1、服务器接口

	第一个需要测试的接口是浏览器与服务器的接口。测试人员提交事务，然后查看服务器记录，并验证在浏览器上看到的正好是服务器上发生的。测试人员还可以查询数据库，确认事务数据已正确保存。
	这种测试可以归到功能测试中的表单测试和数据校验测试中

2、外部接口

	有些 web 系统有外部接口。例如，网上商店可能要实时验证信用卡数据以减少欺诈行为的发生。测试的时候，要使用 web 接口发送一些事务数据，分别对有效信用卡、无效信用卡和被盗信用卡进行验证。如果商店只使用 Visa 卡和 Mastercard 卡， 可以尝试使用 Discover 卡的数据。(简单的客户端脚本能够在提交事务之前对代码进行识别，例如 3 表示 American Express，4 表示 Visa，5 表示 Mastercard，6 代表Discover。)通常，测试人员需要确认软件能够处理外部服务器返回的所有可能的消息。
	这种情况在远程抄表中可能会体现到




容错测试
-----------------------------
错误处理：
	最容易被测试人员忽略的地方是接口错误处理。通常我们试图确认系统能够处理所有错误，但却无法预期系统所有可能的错误。尝试在处理过程中中断事务，看看会发生什么情况？订单是否完成？尝试中断用户到服务器的网络连接。尝试中断 web 服务器到信用卡验证服务器的连接。在这些情况下，系统能否正确处理这些错误？是否已对信用卡进行收费？如果用户自己中断事务处理，在订单已保存而用户没有返回网站确认的时候，需要由客户代表致电用户进行订单确认。

    采取措施：在理解需求的基础上，充分发挥想象力，尽量比较全面的列出各种异常情况。



--------------------------------

1 什么是软件测试？软件测试与调试有什么区别？
2 软件测试包括哪些类型的测试？这些测试之间的区别是什么？


1、软件测试是为了发现错误而执行程序的过程。或者说，软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例（即输入数据及其预期的输出结果），并利用这些测试用例去运行程序，以发现程序错误的过程。 

软件测试与调试在目的、技术和方法等方面存在很大的区别，主要表现在如下方面： 
  （1） 测试是为了发现软件中存在的错误；调试是为了证明软件开发的正确性。 
  （2） 测试以已知条件开始，使用预先定义的程序，且有预知的结果，不可预见的仅是程序是否通过测试；调试一般是以不可知的内部条件开始，除统计性调试外，结果是不可预见的。 
  （3） 测试是有计划的，需要进行测试设计；调试是不受时间约束的。 
  （4） 测试经历发现错误、改正错误、重新测试的过程；调试是一个推理的过程。 
  （5） 测试的执行是有规程的；调试的执行往往要求开发人员进行必要推理以至知觉的"飞跃"。 
  （6） 测试经常是由独立的测试组在不了解软件设计的条件下完成的；调试必须由了解详细设计的开发人员完成。 
  （7） 大多数测试的执行和设计可以由工具支持；调式时，开发人员能利用的工具主要是调试器。 

2、软件测试包括单元测试、集成测试、确认测试和系统测试等。单元测试集中于单个模块的功能和结构的检验；集成测试集中于模块组合的功能和软件结构检验；确认测试主要检查软件是否符合合同要求，包括需求规格说明、设计规格说明和用户手册等；系统测试集中检验系统所有元素之间协作是否合适，整个系统的性能和功能是否达到。


-------------------------------------------

9测试结束的标准是什么？
用例全部测试。
覆盖率达到标准。
缺陷率达到标准。
其他指标达到质量标准
10描述软件测试活动的生命周期？
测试周期分为计划、设计、实现、执行、总结。其中：
计划：对整个测试周期中所有活动进行规划，估计工作量、风险，安排人力物力资源，安排进度等；
设计：完成测试方案，从技术层面上对测试进行规划；
实现：进行测试用例和测试规程设计；
执行：根据前期完成的计划、方案、用例、规程等文档，执行测试用例。
总结：记录测试结果，进行测试分析，完成测试报告。
11软件的缺陷等级应如何划分？
A类―严重错误，包括以下各种错误： 1． 由于程序所引起的死机,非法退出 2． 死循环 3． 数据库发生死锁 4． 因错误操作导致的程序中断 5． 功能错误 6． 与数据库连接错误 7． 数据通讯错误
B类―较严重错误，包括以下各种错误： 1． 程序错误 2． 程序接口错误 3． 数据库的表、业务规则、缺省值未加完整性等约束条件
C类―一般性错误，包括以下各种错误： 1． 操作界面错误（包括数据窗口内列名定义、含义是否一致） 2． 打印内容、格式错误 3． 简单的输入限制未放在前台进行控制 4． 删除操作未给出提示 5． 数据库表中有过多的空字段
D类―较小错误，包括以下各种错误： 1． 界面不规范 2． 辅助说明描述不清楚 3． 输入输出不规范 4． 长操作未给用户提示 5． 提示窗口文字未采用行业术语 6． 可输入区域和只读区域没有明显的区分标志
E类―测试建议